// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "EventCollection.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace HEP {

namespace {

const ::google::protobuf::Descriptor* Jet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Jet_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Jet_JetAlgorithm_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GenJet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GenJet_reflection_ = NULL;
const ::google::protobuf::Descriptor* GenParticle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GenParticle_reflection_ = NULL;
const ::google::protobuf::Descriptor* Electron_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Electron_reflection_ = NULL;
const ::google::protobuf::Descriptor* Electron_GSFTrack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Electron_GSFTrack_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Electron_ElectronAlgorithm_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Muon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Muon_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Muon_MuonAlgorithm_descriptor_ = NULL;
const ::google::protobuf::Descriptor* MET_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MET_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MET_METAlgorithm_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Vertex_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vertex_reflection_ = NULL;
const ::google::protobuf::Descriptor* BeamSpot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BeamSpot_reflection_ = NULL;
const ::google::protobuf::Descriptor* Trigger_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Trigger_reflection_ = NULL;
const ::google::protobuf::Descriptor* Event_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Event_reflection_ = NULL;
const ::google::protobuf::Descriptor* GenEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GenEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* EventCollection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EventCollection_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_EventCollection_2eproto() {
  protobuf_AddDesc_EventCollection_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "EventCollection.proto");
  GOOGLE_CHECK(file != NULL);
  Jet_descriptor_ = file->message_type(0);
  static const int Jet_offsets_[67] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, energy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, px_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, py_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, pz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, charge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, mass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, eta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, phi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, ptraw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, energyraw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, partonflavour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, jecunc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, l2l3resjec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, l3absjec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, l2reljec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, l1offjec_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, emf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, resemf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, hadf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, n90hits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, fhpd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, frbx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, sigmaeta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, sigmaphi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, trackcountinghigheffbtag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, trackcountinghighpurbtag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, simplesecondaryvertexhigheffbtag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, simplesecondaryvertexhighpurbtag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, jetprobabilitybtag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, jetbprobabilitybtag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, softelectronbjettag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, softmuonbjettag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, softmuonnoipbjettag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, combinedsvbjettag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, combinedsvmvabjettag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, passlooseid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, passtightid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, chargedemenergyfraction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, chargedhadronenergyfraction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, chargedmuenergyfraction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, electronenergyfraction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, muonenergyfraction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, neutralemenergyfraction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, neutralhadronenergyfraction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, photonenergyfraction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, chargedhadronmultiplicity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, chargedmultiplicity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, electronmultiplicity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, muonmultiplicity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, neutralhadronmultiplicity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, neutralmultiplicity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, photonmultiplicity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, nconstituents_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, chargedemenergyfractionraw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, chargedhadronenergyfractionraw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, neutralemenergyfractionraw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, neutralhadronenergyfractionraw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, bestvertextrackassociationfactor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, closestvertexweighted3dseparation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, closestvertexweightedxyseparation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, closestvertexweightedzseparation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, bestvertextrackassociationindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, closestvertex3dindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, closestvertexxyindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, closestvertexzindex_),
  };
  Jet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Jet_descriptor_,
      Jet::default_instance_,
      Jet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Jet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Jet));
  Jet_JetAlgorithm_descriptor_ = Jet_descriptor_->enum_type(0);
  GenJet_descriptor_ = file->message_type(1);
  static const int GenJet_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenJet, energy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenJet, px_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenJet, py_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenJet, pz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenJet, charge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenJet, mass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenJet, eta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenJet, phi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenJet, pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenJet, emf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenJet, hadf_),
  };
  GenJet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GenJet_descriptor_,
      GenJet::default_instance_,
      GenJet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenJet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenJet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GenJet));
  GenParticle_descriptor_ = file->message_type(2);
  static const int GenParticle_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenParticle, energy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenParticle, px_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenParticle, py_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenParticle, pz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenParticle, charge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenParticle, mass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenParticle, eta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenParticle, phi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenParticle, pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenParticle, pdgid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenParticle, vx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenParticle, vy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenParticle, vz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenParticle, numdaught_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenParticle, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenParticle, motherindex_),
  };
  GenParticle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GenParticle_descriptor_,
      GenParticle::default_instance_,
      GenParticle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenParticle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenParticle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GenParticle));
  Electron_descriptor_ = file->message_type(3);
  static const int Electron_offsets_[50] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, energy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, px_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, py_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, pz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, charge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, mass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, eta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, phi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, caloenergy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, hoe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, eseedclusteroverpout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, eoverp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, fbrem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, sigmaetaeta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, sigmaietaieta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, deltaphitrksc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, deltaetatrksc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, trkiso03_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, ecaliso03_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, hcaliso03_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, trkiso_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, ecaliso_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, hcaliso_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, db_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, closestctftrackref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, shfracinnerhits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, track_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, ecalisoheep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, hcalisod1heep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, hcalisod2heep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, trkisoheep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, missinghits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, dist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, dcottheta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, sceta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, scphi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, scpt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, scrawenergy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, vtxindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, vtxdistxy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, vtxdistz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, vertexx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, vertexy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, vertexz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, passid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, pfchargedhadroniso_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, pfneutralhadroniso_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, pfgammaiso_),
  };
  Electron_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Electron_descriptor_,
      Electron::default_instance_,
      Electron_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Electron));
  Electron_GSFTrack_descriptor_ = Electron_descriptor_->nested_type(0);
  static const int Electron_GSFTrack_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron_GSFTrack, d0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron_GSFTrack, eta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron_GSFTrack, phi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron_GSFTrack, theta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron_GSFTrack, charge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron_GSFTrack, pt_),
  };
  Electron_GSFTrack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Electron_GSFTrack_descriptor_,
      Electron_GSFTrack::default_instance_,
      Electron_GSFTrack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron_GSFTrack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Electron_GSFTrack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Electron_GSFTrack));
  Electron_ElectronAlgorithm_descriptor_ = Electron_descriptor_->enum_type(0);
  Muon_descriptor_ = file->message_type(4);
  static const int Muon_offsets_[42] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Muon, energy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Muon, px_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Muon, py_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Muon, pz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Muon, charge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Muon, mass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Muon, trkiso03_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Muon, ecaliso03_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Muon, hcaliso03_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Muon, isgoodglobalmuon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Muon, pfchargedhadroniso_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Muon, pfneutralhadroniso_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Muon, pfgammaiso_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Muon, eta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Muon, phi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Muon, pt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Muon, p_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Muon, trkhits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Muon, trkd0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Muon, trkd0error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Muon, trkdz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Muon, trkdzerror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Muon, globalchi2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Muon, trkiso_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Muon, ecaliso_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Muon, hcaliso_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Muon, hoiso_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Muon, vtxindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Muon, vtxdistxy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Muon, vtxdistz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Muon, cocktaileta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Muon, cocktailphi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Muon, cocktailpt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Muon, cocktailp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Muon, cocktailcharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Muon, cocktailtrkhits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Muon, cocktailtrkd0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Muon, cocktailtrkd0error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Muon, cocktailtrkdz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Muon, cocktailtrkdzerror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Muon, cocktailglobalchi2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Muon, type_),
  };
  Muon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Muon_descriptor_,
      Muon::default_instance_,
      Muon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Muon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Muon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Muon));
  Muon_MuonAlgorithm_descriptor_ = Muon_descriptor_->enum_type(0);
  MET_descriptor_ = file->message_type(5);
  static const int MET_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MET, ex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MET, ey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MET, et_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MET, phi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MET, sumet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MET, significance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MET, etuncorr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MET, phiuncorr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MET, sumetuncorr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MET, type_),
  };
  MET_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MET_descriptor_,
      MET::default_instance_,
      MET_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MET, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MET, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MET));
  MET_METAlgorithm_descriptor_ = MET_descriptor_->enum_type(0);
  Vertex_descriptor_ = file->message_type(6);
  static const int Vertex_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex, xerr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex, yerr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex, zerr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex, rho_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex, chi2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex, ndf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex, ntracks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex, ntracksw05_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex, isfake_),
  };
  Vertex_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vertex_descriptor_,
      Vertex::default_instance_,
      Vertex_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vertex, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vertex));
  BeamSpot_descriptor_ = file->message_type(7);
  static const int BeamSpot_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeamSpot, widthx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeamSpot, widthxerror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeamSpot, widthy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeamSpot, widthyerror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeamSpot, x0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeamSpot, x0error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeamSpot, y0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeamSpot, y0error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeamSpot, z0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeamSpot, z0error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeamSpot, dxdz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeamSpot, dxdzerror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeamSpot, dydz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeamSpot, dydzerror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeamSpot, sigmaz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeamSpot, sigmazerror_),
  };
  BeamSpot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BeamSpot_descriptor_,
      BeamSpot::default_instance_,
      BeamSpot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeamSpot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeamSpot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BeamSpot));
  Trigger_descriptor_ = file->message_type(8);
  static const int Trigger_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trigger, l1physbits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trigger, l1techbits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trigger, hltbits_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trigger, hltresults_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trigger, hltresultsother_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trigger, hltprescales_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trigger, hltprescalesother_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trigger, hltnames_),
  };
  Trigger_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Trigger_descriptor_,
      Trigger::default_instance_,
      Trigger_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trigger, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trigger, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Trigger));
  Event_descriptor_ = file->message_type(9);
  static const int Event_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, goodpatjets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, goodpatjetspflow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, goodpatjetsca8pf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, selectedpatelectrons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, selectedpatelectronsloosepflow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, patmets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, patmetspflow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, selectedpatmuons_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, selectedpatmuonsloosepflow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, goodofflineprimaryvertices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, beamspot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, magneticfield_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, run_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, bunch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, lumisection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, orbit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, isdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, rho_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, trigger_),
  };
  Event_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Event_descriptor_,
      Event::default_instance_,
      Event_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Event));
  GenEvent_descriptor_ = file->message_type(10);
  static const int GenEvent_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenEvent, processid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenEvent, pthat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenEvent, pdfweights_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenEvent, pileupinteractions_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenEvent, pileuporiginbx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenEvent, genmetextrue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenEvent, genmeteytrue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenEvent, genjets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenEvent, genparticles_),
  };
  GenEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GenEvent_descriptor_,
      GenEvent::default_instance_,
      GenEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GenEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GenEvent));
  EventCollection_descriptor_ = file->message_type(11);
  static const int EventCollection_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventCollection, event_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventCollection, genevent_),
  };
  EventCollection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EventCollection_descriptor_,
      EventCollection::default_instance_,
      EventCollection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventCollection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EventCollection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EventCollection));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_EventCollection_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Jet_descriptor_, &Jet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GenJet_descriptor_, &GenJet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GenParticle_descriptor_, &GenParticle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Electron_descriptor_, &Electron::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Electron_GSFTrack_descriptor_, &Electron_GSFTrack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Muon_descriptor_, &Muon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MET_descriptor_, &MET::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vertex_descriptor_, &Vertex::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BeamSpot_descriptor_, &BeamSpot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Trigger_descriptor_, &Trigger::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Event_descriptor_, &Event::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GenEvent_descriptor_, &GenEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EventCollection_descriptor_, &EventCollection::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_EventCollection_2eproto() {
  delete Jet::default_instance_;
  delete Jet_reflection_;
  delete GenJet::default_instance_;
  delete GenJet_reflection_;
  delete GenParticle::default_instance_;
  delete GenParticle_reflection_;
  delete Electron::default_instance_;
  delete Electron_reflection_;
  delete Electron_GSFTrack::default_instance_;
  delete Electron_GSFTrack_reflection_;
  delete Muon::default_instance_;
  delete Muon_reflection_;
  delete MET::default_instance_;
  delete MET_reflection_;
  delete Vertex::default_instance_;
  delete Vertex_reflection_;
  delete BeamSpot::default_instance_;
  delete BeamSpot_reflection_;
  delete Trigger::default_instance_;
  delete Trigger_reflection_;
  delete Event::default_instance_;
  delete Event_reflection_;
  delete GenEvent::default_instance_;
  delete GenEvent_reflection_;
  delete EventCollection::default_instance_;
  delete EventCollection_reflection_;
}

void protobuf_AddDesc_EventCollection_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025EventCollection.proto\022\003HEP\"\374\017\n\003Jet\022\021\n\006"
    "Energy\030\001 \001(\001:\0010\022\r\n\002Px\030\002 \001(\001:\0010\022\r\n\002Py\030\003 \001"
    "(\001:\0010\022\r\n\002Pz\030\004 \001(\001:\0010\022\021\n\006Charge\030\005 \001(\001:\0010\022"
    "\017\n\004Mass\030\006 \001(\001:\0010\022+\n\004type\030\007 \001(\0162\025.HEP.Jet"
    ".JetAlgorithm:\006PF2PAT\022\016\n\003Eta\030\010 \001(\001:\0010\022\016\n"
    "\003Phi\030\t \001(\001:\0010\022\r\n\002Pt\030\n \001(\001:\0010\022\020\n\005PtRaw\030\013 "
    "\001(\001:\0010\022\024\n\tEnergyRaw\030\014 \001(\001:\0010\022\030\n\rPartonFl"
    "avour\030\r \001(\005:\0010\022\021\n\006JECUnc\030\016 \001(\001:\0010\022\025\n\nL2L"
    "3ResJEC\030\017 \001(\001:\0010\022\023\n\010L3AbsJEC\030\020 \001(\001:\0010\022\023\n"
    "\010L2RelJEC\030\021 \001(\001:\0010\022\023\n\010L1OffJEC\030\022 \001(\001:\0010\022"
    "\016\n\003EMF\030\023 \001(\001:\0010\022\021\n\006resEMF\030\024 \001(\001:\0010\022\017\n\004HA"
    "DF\030\025 \001(\001:\0010\022\022\n\007n90Hits\030\026 \001(\005:\0010\022\017\n\004fHPD\030"
    "\027 \001(\001:\0010\022\017\n\004fRBX\030\030 \001(\001:\0010\022\023\n\010SigmaEta\030\031 "
    "\001(\001:\0010\022\023\n\010SigmaPhi\030\032 \001(\001:\0010\022#\n\030TrackCoun"
    "tingHighEffBTag\030\033 \001(\001:\0010\022#\n\030TrackCountin"
    "gHighPurBTag\030\034 \001(\001:\0010\022+\n SimpleSecondary"
    "VertexHighEffBTag\030\035 \001(\001:\0010\022+\n SimpleSeco"
    "ndaryVertexHighPurBTag\030\036 \001(\001:\0010\022\035\n\022JetPr"
    "obabilityBTag\030\037 \001(\001:\0010\022\036\n\023JetBProbabilit"
    "yBTag\030  \001(\001:\0010\022\036\n\023SoftElectronBJetTag\030! "
    "\001(\001:\0010\022\032\n\017SoftMuonBJetTag\030\" \001(\001:\0010\022\036\n\023So"
    "ftMuonNoIPBJetTag\030# \001(\001:\0010\022\034\n\021CombinedSV"
    "BJetTag\030$ \001(\001:\0010\022\037\n\024CombinedSVMVABJetTag"
    "\030% \001(\001:\0010\022\026\n\013PassLooseID\030& \001(\005:\0010\022\026\n\013Pas"
    "sTightID\030\' \001(\005:\0010\022\"\n\027ChargedEmEnergyFrac"
    "tion\030( \001(\001:\0010\022&\n\033ChargedHadronEnergyFrac"
    "tion\030) \001(\001:\0010\022\"\n\027ChargedMuEnergyFraction"
    "\030* \001(\001:\0010\022!\n\026ElectronEnergyFraction\030+ \001("
    "\001:\0010\022\035\n\022MuonEnergyFraction\030, \001(\001:\0010\022\"\n\027N"
    "eutralEmEnergyFraction\030- \001(\001:\0010\022&\n\033Neutr"
    "alHadronEnergyFraction\030. \001(\001:\0010\022\037\n\024Photo"
    "nEnergyFraction\030/ \001(\001:\0010\022$\n\031ChargedHadro"
    "nMultiplicity\0300 \001(\005:\0010\022\036\n\023ChargedMultipl"
    "icity\0301 \001(\005:\0010\022\037\n\024ElectronMultiplicity\0302"
    " \001(\005:\0010\022\033\n\020MuonMultiplicity\0303 \001(\005:\0010\022$\n\031"
    "NeutralHadronMultiplicity\0304 \001(\005:\0010\022\036\n\023Ne"
    "utralMultiplicity\0305 \001(\005:\0010\022\035\n\022PhotonMult"
    "iplicity\0306 \001(\005:\0010\022\030\n\rNConstituents\0307 \001(\005"
    ":\0010\022%\n\032ChargedEmEnergyFractionRAW\0308 \001(\001:"
    "\0010\022)\n\036ChargedHadronEnergyFractionRAW\0309 \001"
    "(\001:\0010\022%\n\032NeutralEmEnergyFractionRAW\030: \001("
    "\001:\0010\022)\n\036NeutralHadronEnergyFractionRAW\030;"
    " \001(\001:\0010\022+\n BestVertexTrackAssociationFac"
    "tor\030< \001(\001:\0010\022,\n!ClosestVertexWeighted3DS"
    "eparation\030= \001(\001:\0010\022,\n!ClosestVertexWeigh"
    "tedXYSeparation\030> \001(\001:\0010\022+\n ClosestVerte"
    "xWeightedZSeparation\030\? \001(\001:\0010\022*\n\037BestVer"
    "texTrackAssociationIndex\030@ \001(\005:\0010\022\037\n\024Clo"
    "sestVertex3DIndex\030A \001(\005:\0010\022\037\n\024ClosestVer"
    "texXYIndex\030B \001(\005:\0010\022\036\n\023ClosestVertexZInd"
    "ex\030C \001(\005:\0010\">\n\014JetAlgorithm\022\026\n\022Calo_Anti"
    "KT_Cone05\020\000\022\n\n\006CA08PF\020\001\022\n\n\006PF2PAT\020\002\"\274\001\n\006"
    "GenJet\022\021\n\006Energy\030\001 \001(\001:\0010\022\r\n\002Px\030\002 \001(\001:\0010"
    "\022\r\n\002Py\030\003 \001(\001:\0010\022\r\n\002Pz\030\004 \001(\001:\0010\022\021\n\006Charge"
    "\030\005 \001(\001:\0010\022\017\n\004Mass\030\006 \001(\001:\0010\022\016\n\003Eta\030\007 \001(\001:"
    "\0010\022\016\n\003Phi\030\010 \001(\001:\0010\022\r\n\002Pt\030\t \001(\001:\0010\022\016\n\003EMF"
    "\030\n \001(\001:\0010\022\017\n\004HADF\030\013 \001(\001:\0010\"\240\002\n\013GenPartic"
    "le\022\021\n\006Energy\030\001 \001(\001:\0010\022\r\n\002Px\030\002 \001(\001:\0010\022\r\n\002"
    "Py\030\003 \001(\001:\0010\022\r\n\002Pz\030\004 \001(\001:\0010\022\021\n\006Charge\030\005 \001"
    "(\001:\0010\022\017\n\004Mass\030\006 \001(\001:\0010\022\016\n\003Eta\030\007 \001(\001:\0010\022\016"
    "\n\003Phi\030\010 \001(\001:\0010\022\r\n\002Pt\030\t \001(\001:\0010\022\020\n\005PdgId\030\n"
    " \001(\005:\0010\022\r\n\002VX\030\013 \001(\001:\0010\022\r\n\002VY\030\014 \001(\001:\0010\022\r\n"
    "\002VZ\030\r \001(\001:\0010\022\024\n\tNumDaught\030\016 \001(\005:\0010\022\021\n\006St"
    "atus\030\017 \001(\005:\0010\022\026\n\013MotherIndex\030\020 \001(\005:\0010\"\215\n"
    "\n\010Electron\022\021\n\006Energy\030\001 \001(\001:\0010\022\r\n\002Px\030\002 \001("
    "\001:\0010\022\r\n\002Py\030\003 \001(\001:\0010\022\r\n\002Pz\030\004 \001(\001:\0010\022\021\n\006Ch"
    "arge\030\005 \001(\001:\0010\022\017\n\004Mass\030\006 \001(\005:\0010\022;\n\004type\030\007"
    " \001(\0162\037.HEP.Electron.ElectronAlgorithm:\014P"
    "articleFlow\022\016\n\003Eta\030\010 \001(\001:\0010\022\016\n\003Phi\030\t \001(\001"
    ":\0010\022\r\n\002Pt\030\n \001(\001:\0010\022\025\n\nCaloEnergy\030\014 \001(\001:\001"
    "0\022\016\n\003HoE\030\r \001(\001:\0010\022\037\n\024eSeedClusterOverPou"
    "t\030\016 \001(\001:\0010\022\021\n\006EoverP\030\017 \001(\001:\0010\022\020\n\005fbrem\030\020"
    " \001(\001:\0010\022\026\n\013SigmaEtaEta\030\021 \001(\001:\0010\022\030\n\rSigma"
    "IEtaIEta\030\022 \001(\001:\0010\022\030\n\rDeltaPhiTrkSC\030\023 \001(\001"
    ":\0010\022\030\n\rDeltaEtaTrkSC\030\024 \001(\001:\0010\022\023\n\010TrkIso0"
    "3\030\025 \001(\001:\0010\022\024\n\tEcalIso03\030\026 \001(\001:\0010\022\024\n\tHcal"
    "Iso03\030\027 \001(\001:\0010\022\021\n\006TrkIso\030\030 \001(\001:\0010\022\022\n\007Eca"
    "lIso\030\031 \001(\001:\0010\022\022\n\007HcalIso\030\032 \001(\001:\0010\022\r\n\002dB\030"
    "\033 \001(\001:\0010\022\035\n\022closestCtfTrackRef\030\034 \001(\005:\0010\022"
    "\032\n\017shFracInnerHits\030\035 \001(\001:\0010\022%\n\005track\030\036 \003"
    "(\0132\026.HEP.Electron.GSFTrack\022\026\n\013EcalIsoHee"
    "p\030\037 \001(\001:\0010\022\030\n\rHcalIsoD1Heep\030  \001(\001:\0010\022\030\n\r"
    "HcalIsoD2Heep\030! \001(\001:\0010\022\025\n\nTrkIsoHeep\030\" \001"
    "(\001:\0010\022\026\n\013MissingHits\030# \001(\005:\0010\022\017\n\004Dist\030$ "
    "\001(\001:\0010\022\024\n\tDCotTheta\030% \001(\001:\0010\022\020\n\005SCEta\030& "
    "\001(\001:\0010\022\020\n\005SCPhi\030\' \001(\001:\0010\022\017\n\004SCPt\030( \001(\001:\001"
    "0\022\026\n\013SCRawEnergy\030) \001(\001:\0010\022\023\n\010VtxIndex\030* "
    "\001(\005:\0010\022\024\n\tVtxDistXY\030+ \001(\001:\0010\022\023\n\010VtxDistZ"
    "\030, \001(\001:\0010\022\022\n\007VertexX\030- \001(\001:\0010\022\022\n\007VertexY"
    "\030. \001(\001:\0010\022\022\n\007VertexZ\030/ \001(\001:\0010\022\021\n\006PassID\030"
    "0 \001(\005:\0010\022\035\n\022PfChargedHadronIso\0301 \001(\001:\0010\022"
    "\035\n\022PfNeutralHadronIso\0302 \001(\001:\0010\022\025\n\nPFGamm"
    "aIso\0303 \001(\001:\0010\032m\n\010GSFTrack\022\r\n\002d0\030\001 \001(\001:\0010"
    "\022\016\n\003Eta\030\002 \001(\001:\0010\022\016\n\003Phi\030\003 \001(\001:\0010\022\020\n\005Thet"
    "a\030\004 \001(\001:\0010\022\021\n\006Charge\030\005 \001(\005:\0010\022\r\n\002Pt\030\006 \001("
    "\001:\0010\"/\n\021ElectronAlgorithm\022\010\n\004Calo\020\000\022\020\n\014P"
    "articleFlow\020\001\"\356\007\n\004Muon\022\021\n\006Energy\030\001 \001(\001:\001"
    "0\022\r\n\002Px\030\002 \001(\001:\0010\022\r\n\002Py\030\003 \001(\001:\0010\022\r\n\002Pz\030\004 "
    "\001(\001:\0010\022\021\n\006Charge\030\005 \001(\005:\0010\022\017\n\004Mass\030\006 \001(\001:"
    "\0010\022\023\n\010TrkIso03\030\007 \001(\001:\0010\022\024\n\tEcalIso03\030\010 \001"
    "(\001:\0010\022\024\n\tHcalIso03\030\t \001(\001:\0010\022\033\n\020isGoodGlo"
    "balMuon\030\n \001(\005:\0010\022\035\n\022PfChargedHadronIso\030\013"
    " \001(\001:\0010\022\035\n\022PfNeutralHadronIso\030\014 \001(\001:\0010\022\025"
    "\n\nPFGammaIso\030\r \001(\001:\0010\022\016\n\003Eta\030\016 \001(\001:\0010\022\016\n"
    "\003Phi\030\017 \001(\001:\0010\022\r\n\002Pt\030\020 \001(\001:\0010\022\014\n\001P\030\021 \001(\001:"
    "\0010\022\022\n\007TrkHits\030\022 \001(\005:\0010\022\020\n\005TrkD0\030\023 \001(\001:\0010"
    "\022\025\n\nTrkD0Error\030\024 \001(\001:\0010\022\020\n\005TrkDz\030\025 \001(\001:\001"
    "0\022\025\n\nTrkDzError\030\026 \001(\001:\0010\022\025\n\nGlobalChi2\030\027"
    " \001(\001:\0010\022\021\n\006TrkIso\030\030 \001(\001:\0010\022\022\n\007EcalIso\030\031 "
    "\001(\001:\0010\022\022\n\007HcalIso\030\032 \001(\001:\0010\022\020\n\005HOIso\030\033 \001("
    "\001:\0010\022\023\n\010VtxIndex\030\034 \001(\005:\0010\022\024\n\tVtxDistXY\030\035"
    " \001(\001:\0010\022\023\n\010VtxDistZ\030\036 \001(\001:\0010\022\026\n\013Cocktail"
    "Eta\030\037 \001(\001:\0010\022\026\n\013CocktailPhi\030  \001(\001:\0010\022\025\n\n"
    "CocktailPt\030! \001(\001:\0010\022\024\n\tCocktailP\030\" \001(\001:\001"
    "0\022\031\n\016CocktailCharge\030# \001(\005:\0010\022\032\n\017Cocktail"
    "TrkHits\030$ \001(\005:\0010\022\030\n\rCocktailTrkD0\030% \001(\001:"
    "\0010\022\035\n\022CocktailTrkD0Error\030& \001(\001:\0010\022\030\n\rCoc"
    "ktailTrkDz\030\' \001(\001:\0010\022\035\n\022CocktailTrkDzErro"
    "r\030( \001(\001:\0010\022\035\n\022CocktailGlobalChi2\030) \001(\001:\001"
    "0\0223\n\004type\030* \001(\0162\027.HEP.Muon.MuonAlgorithm"
    ":\014ParticleFlow\".\n\rMuonAlgorithm\022\013\n\007Defau"
    "lt\020\000\022\020\n\014ParticleFlow\020\001\"\217\002\n\003MET\022\r\n\002Ex\030\001 \001"
    "(\001:\0010\022\r\n\002Ey\030\002 \001(\001:\0010\022\r\n\002ET\030\003 \001(\001:\0010\022\016\n\003P"
    "hi\030\004 \001(\001:\0010\022\020\n\005SumET\030\005 \001(\001:\0010\022\027\n\014Signifi"
    "cance\030\006 \001(\001:\0010\022\023\n\010ETUncorr\030\007 \001(\001:\0010\022\024\n\tP"
    "hiUncorr\030\010 \001(\001:\0010\022\026\n\013SumETUncorr\030\t \001(\001:\001"
    "0\0221\n\004type\030\n \001(\0162\025.HEP.MET.METAlgorithm:\014"
    "ParticleFlow\"*\n\014METAlgorithm\022\010\n\004Calo\020\000\022\020"
    "\n\014ParticleFlow\020\001\"\324\001\n\006Vertex\022\014\n\001X\030\001 \001(\001:\001"
    "0\022\014\n\001Y\030\002 \001(\001:\0010\022\014\n\001Z\030\003 \001(\001:\0010\022\017\n\004XErr\030\004 "
    "\001(\001:\0010\022\017\n\004YErr\030\005 \001(\001:\0010\022\017\n\004ZErr\030\006 \001(\001:\0010"
    "\022\016\n\003Rho\030\007 \001(\001:\0010\022\017\n\004Chi2\030\010 \001(\001:\0010\022\016\n\003NDF"
    "\030\t \001(\001:\0010\022\022\n\007NTracks\030\n \001(\005:\0010\022\025\n\nNTracks"
    "W05\030\013 \001(\005:\0010\022\021\n\006IsFake\030\014 \001(\005:\0010\"\302\002\n\010Beam"
    "Spot\022\021\n\006WidthX\030\001 \001(\001:\0010\022\026\n\013WidthXError\030\002"
    " \001(\001:\0010\022\021\n\006WidthY\030\003 \001(\001:\0010\022\026\n\013WidthYErro"
    "r\030\004 \001(\001:\0010\022\r\n\002X0\030\005 \001(\001:\0010\022\022\n\007X0Error\030\006 \001"
    "(\001:\0010\022\r\n\002Y0\030\007 \001(\001:\0010\022\022\n\007Y0Error\030\010 \001(\001:\0010"
    "\022\r\n\002Z0\030\t \001(\001:\0010\022\022\n\007Z0Error\030\n \001(\001:\0010\022\017\n\004d"
    "xdz\030\013 \001(\001:\0010\022\024\n\tdxdzError\030\014 \001(\001:\0010\022\017\n\004dy"
    "dz\030\r \001(\001:\0010\022\024\n\tdydzError\030\016 \001(\001:\0010\022\021\n\006sig"
    "maZ\030\017 \001(\001:\0010\022\026\n\013sigmaZError\030\020 \001(\001:\0010\"\262\001\n"
    "\007Trigger\022\022\n\nL1PhysBits\030\001 \003(\005\022\022\n\nL1TechBi"
    "ts\030\002 \003(\005\022\017\n\007HLTBits\030\003 \003(\005\022\022\n\nHLTResults\030"
    "\004 \003(\005\022\027\n\017HLTResultsOther\030\005 \003(\005\022\024\n\014HLTPre"
    "scales\030\006 \003(\005\022\031\n\021HLTPrescalesOther\030\007 \003(\005\022"
    "\020\n\010HLTNames\030\010 \003(\t\"\344\004\n\005Event\022\035\n\013goodPatJe"
    "ts\030\001 \003(\0132\010.HEP.Jet\022\"\n\020goodPatJetsPFlow\030\002"
    " \003(\0132\010.HEP.Jet\022\"\n\020goodPatJetsCA8PF\030\003 \003(\013"
    "2\010.HEP.Jet\022+\n\024selectedPatElectrons\030\004 \003(\013"
    "2\r.HEP.Electron\0225\n\036selectedPatElectronsL"
    "oosePFlow\030\005 \003(\0132\r.HEP.Electron\022\031\n\007patMET"
    "s\030\006 \003(\0132\010.HEP.MET\022\036\n\014patMETsPFlow\030\007 \003(\0132"
    "\010.HEP.MET\022#\n\020selectedPatMuons\030\010 \003(\0132\t.HE"
    "P.Muon\022-\n\032selectedPatMuonsLoosePFlow\030\t \003"
    "(\0132\t.HEP.Muon\022/\n\032goodOfflinePrimaryVerti"
    "ces\030\n \003(\0132\013.HEP.Vertex\022\037\n\010beamSpot\030\013 \003(\013"
    "2\r.HEP.BeamSpot\022\025\n\rMagneticField\030\014 \001(\001\022\013"
    "\n\003Run\030\r \002(\r\022\016\n\006Number\030\016 \002(\r\022\r\n\005Bunch\030\017 \001"
    "(\r\022\023\n\013LumiSection\030\020 \002(\r\022\r\n\005Orbit\030\021 \001(\r\022\014"
    "\n\004Time\030\022 \001(\001\022\016\n\006isData\030\023 \001(\010\022\013\n\003rho\030\024 \001("
    "\001\022\035\n\007trigger\030\025 \003(\0132\014.HEP.Trigger\"\346\001\n\010Gen"
    "Event\022\021\n\tProcessID\030\001 \001(\r\022\r\n\005PtHat\030\002 \001(\001\022"
    "\022\n\nPDFWeights\030\003 \003(\001\022\032\n\022PileUpInteraction"
    "s\030\004 \003(\005\022\026\n\016PileUpOriginBX\030\005 \003(\005\022\024\n\014GenME"
    "TExTrue\030\006 \003(\001\022\024\n\014GenMETEyTrue\030\007 \003(\001\022\034\n\007g"
    "enJets\030\010 \003(\0132\013.HEP.GenJet\022&\n\014genParticle"
    "s\030\t \003(\0132\020.HEP.GenParticle\"M\n\017EventCollec"
    "tion\022\031\n\005event\030\001 \003(\0132\n.HEP.Event\022\037\n\010genEv"
    "ent\030\002 \003(\0132\r.HEP.GenEvent", 6784);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "EventCollection.proto", &protobuf_RegisterTypes);
  Jet::default_instance_ = new Jet();
  GenJet::default_instance_ = new GenJet();
  GenParticle::default_instance_ = new GenParticle();
  Electron::default_instance_ = new Electron();
  Electron_GSFTrack::default_instance_ = new Electron_GSFTrack();
  Muon::default_instance_ = new Muon();
  MET::default_instance_ = new MET();
  Vertex::default_instance_ = new Vertex();
  BeamSpot::default_instance_ = new BeamSpot();
  Trigger::default_instance_ = new Trigger();
  Event::default_instance_ = new Event();
  GenEvent::default_instance_ = new GenEvent();
  EventCollection::default_instance_ = new EventCollection();
  Jet::default_instance_->InitAsDefaultInstance();
  GenJet::default_instance_->InitAsDefaultInstance();
  GenParticle::default_instance_->InitAsDefaultInstance();
  Electron::default_instance_->InitAsDefaultInstance();
  Electron_GSFTrack::default_instance_->InitAsDefaultInstance();
  Muon::default_instance_->InitAsDefaultInstance();
  MET::default_instance_->InitAsDefaultInstance();
  Vertex::default_instance_->InitAsDefaultInstance();
  BeamSpot::default_instance_->InitAsDefaultInstance();
  Trigger::default_instance_->InitAsDefaultInstance();
  Event::default_instance_->InitAsDefaultInstance();
  GenEvent::default_instance_->InitAsDefaultInstance();
  EventCollection::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_EventCollection_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_EventCollection_2eproto {
  StaticDescriptorInitializer_EventCollection_2eproto() {
    protobuf_AddDesc_EventCollection_2eproto();
  }
} static_descriptor_initializer_EventCollection_2eproto_;


// ===================================================================

const ::google::protobuf::EnumDescriptor* Jet_JetAlgorithm_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Jet_JetAlgorithm_descriptor_;
}
bool Jet_JetAlgorithm_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Jet_JetAlgorithm Jet::Calo_AntiKT_Cone05;
const Jet_JetAlgorithm Jet::CA08PF;
const Jet_JetAlgorithm Jet::PF2PAT;
const Jet_JetAlgorithm Jet::JetAlgorithm_MIN;
const Jet_JetAlgorithm Jet::JetAlgorithm_MAX;
const int Jet::JetAlgorithm_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Jet::kEnergyFieldNumber;
const int Jet::kPxFieldNumber;
const int Jet::kPyFieldNumber;
const int Jet::kPzFieldNumber;
const int Jet::kChargeFieldNumber;
const int Jet::kMassFieldNumber;
const int Jet::kTypeFieldNumber;
const int Jet::kEtaFieldNumber;
const int Jet::kPhiFieldNumber;
const int Jet::kPtFieldNumber;
const int Jet::kPtRawFieldNumber;
const int Jet::kEnergyRawFieldNumber;
const int Jet::kPartonFlavourFieldNumber;
const int Jet::kJECUncFieldNumber;
const int Jet::kL2L3ResJECFieldNumber;
const int Jet::kL3AbsJECFieldNumber;
const int Jet::kL2RelJECFieldNumber;
const int Jet::kL1OffJECFieldNumber;
const int Jet::kEMFFieldNumber;
const int Jet::kResEMFFieldNumber;
const int Jet::kHADFFieldNumber;
const int Jet::kN90HitsFieldNumber;
const int Jet::kFHPDFieldNumber;
const int Jet::kFRBXFieldNumber;
const int Jet::kSigmaEtaFieldNumber;
const int Jet::kSigmaPhiFieldNumber;
const int Jet::kTrackCountingHighEffBTagFieldNumber;
const int Jet::kTrackCountingHighPurBTagFieldNumber;
const int Jet::kSimpleSecondaryVertexHighEffBTagFieldNumber;
const int Jet::kSimpleSecondaryVertexHighPurBTagFieldNumber;
const int Jet::kJetProbabilityBTagFieldNumber;
const int Jet::kJetBProbabilityBTagFieldNumber;
const int Jet::kSoftElectronBJetTagFieldNumber;
const int Jet::kSoftMuonBJetTagFieldNumber;
const int Jet::kSoftMuonNoIPBJetTagFieldNumber;
const int Jet::kCombinedSVBJetTagFieldNumber;
const int Jet::kCombinedSVMVABJetTagFieldNumber;
const int Jet::kPassLooseIDFieldNumber;
const int Jet::kPassTightIDFieldNumber;
const int Jet::kChargedEmEnergyFractionFieldNumber;
const int Jet::kChargedHadronEnergyFractionFieldNumber;
const int Jet::kChargedMuEnergyFractionFieldNumber;
const int Jet::kElectronEnergyFractionFieldNumber;
const int Jet::kMuonEnergyFractionFieldNumber;
const int Jet::kNeutralEmEnergyFractionFieldNumber;
const int Jet::kNeutralHadronEnergyFractionFieldNumber;
const int Jet::kPhotonEnergyFractionFieldNumber;
const int Jet::kChargedHadronMultiplicityFieldNumber;
const int Jet::kChargedMultiplicityFieldNumber;
const int Jet::kElectronMultiplicityFieldNumber;
const int Jet::kMuonMultiplicityFieldNumber;
const int Jet::kNeutralHadronMultiplicityFieldNumber;
const int Jet::kNeutralMultiplicityFieldNumber;
const int Jet::kPhotonMultiplicityFieldNumber;
const int Jet::kNConstituentsFieldNumber;
const int Jet::kChargedEmEnergyFractionRAWFieldNumber;
const int Jet::kChargedHadronEnergyFractionRAWFieldNumber;
const int Jet::kNeutralEmEnergyFractionRAWFieldNumber;
const int Jet::kNeutralHadronEnergyFractionRAWFieldNumber;
const int Jet::kBestVertexTrackAssociationFactorFieldNumber;
const int Jet::kClosestVertexWeighted3DSeparationFieldNumber;
const int Jet::kClosestVertexWeightedXYSeparationFieldNumber;
const int Jet::kClosestVertexWeightedZSeparationFieldNumber;
const int Jet::kBestVertexTrackAssociationIndexFieldNumber;
const int Jet::kClosestVertex3DIndexFieldNumber;
const int Jet::kClosestVertexXYIndexFieldNumber;
const int Jet::kClosestVertexZIndexFieldNumber;
#endif  // !_MSC_VER

Jet::Jet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Jet::InitAsDefaultInstance() {
}

Jet::Jet(const Jet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Jet::SharedCtor() {
  _cached_size_ = 0;
  energy_ = 0;
  px_ = 0;
  py_ = 0;
  pz_ = 0;
  charge_ = 0;
  mass_ = 0;
  type_ = 2;
  eta_ = 0;
  phi_ = 0;
  pt_ = 0;
  ptraw_ = 0;
  energyraw_ = 0;
  partonflavour_ = 0;
  jecunc_ = 0;
  l2l3resjec_ = 0;
  l3absjec_ = 0;
  l2reljec_ = 0;
  l1offjec_ = 0;
  emf_ = 0;
  resemf_ = 0;
  hadf_ = 0;
  n90hits_ = 0;
  fhpd_ = 0;
  frbx_ = 0;
  sigmaeta_ = 0;
  sigmaphi_ = 0;
  trackcountinghigheffbtag_ = 0;
  trackcountinghighpurbtag_ = 0;
  simplesecondaryvertexhigheffbtag_ = 0;
  simplesecondaryvertexhighpurbtag_ = 0;
  jetprobabilitybtag_ = 0;
  jetbprobabilitybtag_ = 0;
  softelectronbjettag_ = 0;
  softmuonbjettag_ = 0;
  softmuonnoipbjettag_ = 0;
  combinedsvbjettag_ = 0;
  combinedsvmvabjettag_ = 0;
  passlooseid_ = 0;
  passtightid_ = 0;
  chargedemenergyfraction_ = 0;
  chargedhadronenergyfraction_ = 0;
  chargedmuenergyfraction_ = 0;
  electronenergyfraction_ = 0;
  muonenergyfraction_ = 0;
  neutralemenergyfraction_ = 0;
  neutralhadronenergyfraction_ = 0;
  photonenergyfraction_ = 0;
  chargedhadronmultiplicity_ = 0;
  chargedmultiplicity_ = 0;
  electronmultiplicity_ = 0;
  muonmultiplicity_ = 0;
  neutralhadronmultiplicity_ = 0;
  neutralmultiplicity_ = 0;
  photonmultiplicity_ = 0;
  nconstituents_ = 0;
  chargedemenergyfractionraw_ = 0;
  chargedhadronenergyfractionraw_ = 0;
  neutralemenergyfractionraw_ = 0;
  neutralhadronenergyfractionraw_ = 0;
  bestvertextrackassociationfactor_ = 0;
  closestvertexweighted3dseparation_ = 0;
  closestvertexweightedxyseparation_ = 0;
  closestvertexweightedzseparation_ = 0;
  bestvertextrackassociationindex_ = 0;
  closestvertex3dindex_ = 0;
  closestvertexxyindex_ = 0;
  closestvertexzindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Jet::~Jet() {
  SharedDtor();
}

void Jet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Jet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Jet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Jet_descriptor_;
}

const Jet& Jet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EventCollection_2eproto();  return *default_instance_;
}

Jet* Jet::default_instance_ = NULL;

Jet* Jet::New() const {
  return new Jet;
}

void Jet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    energy_ = 0;
    px_ = 0;
    py_ = 0;
    pz_ = 0;
    charge_ = 0;
    mass_ = 0;
    type_ = 2;
    eta_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    phi_ = 0;
    pt_ = 0;
    ptraw_ = 0;
    energyraw_ = 0;
    partonflavour_ = 0;
    jecunc_ = 0;
    l2l3resjec_ = 0;
    l3absjec_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    l2reljec_ = 0;
    l1offjec_ = 0;
    emf_ = 0;
    resemf_ = 0;
    hadf_ = 0;
    n90hits_ = 0;
    fhpd_ = 0;
    frbx_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    sigmaeta_ = 0;
    sigmaphi_ = 0;
    trackcountinghigheffbtag_ = 0;
    trackcountinghighpurbtag_ = 0;
    simplesecondaryvertexhigheffbtag_ = 0;
    simplesecondaryvertexhighpurbtag_ = 0;
    jetprobabilitybtag_ = 0;
    jetbprobabilitybtag_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    softelectronbjettag_ = 0;
    softmuonbjettag_ = 0;
    softmuonnoipbjettag_ = 0;
    combinedsvbjettag_ = 0;
    combinedsvmvabjettag_ = 0;
    passlooseid_ = 0;
    passtightid_ = 0;
    chargedemenergyfraction_ = 0;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    chargedhadronenergyfraction_ = 0;
    chargedmuenergyfraction_ = 0;
    electronenergyfraction_ = 0;
    muonenergyfraction_ = 0;
    neutralemenergyfraction_ = 0;
    neutralhadronenergyfraction_ = 0;
    photonenergyfraction_ = 0;
    chargedhadronmultiplicity_ = 0;
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    chargedmultiplicity_ = 0;
    electronmultiplicity_ = 0;
    muonmultiplicity_ = 0;
    neutralhadronmultiplicity_ = 0;
    neutralmultiplicity_ = 0;
    photonmultiplicity_ = 0;
    nconstituents_ = 0;
    chargedemenergyfractionraw_ = 0;
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    chargedhadronenergyfractionraw_ = 0;
    neutralemenergyfractionraw_ = 0;
    neutralhadronenergyfractionraw_ = 0;
    bestvertextrackassociationfactor_ = 0;
    closestvertexweighted3dseparation_ = 0;
    closestvertexweightedxyseparation_ = 0;
    closestvertexweightedzseparation_ = 0;
    bestvertextrackassociationindex_ = 0;
  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    closestvertex3dindex_ = 0;
    closestvertexxyindex_ = 0;
    closestvertexzindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Jet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double Energy = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &energy_)));
          set_has_energy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_Px;
        break;
      }
      
      // optional double Px = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Px:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &px_)));
          set_has_px();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_Py;
        break;
      }
      
      // optional double Py = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Py:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &py_)));
          set_has_py();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_Pz;
        break;
      }
      
      // optional double Pz = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Pz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pz_)));
          set_has_pz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_Charge;
        break;
      }
      
      // optional double Charge = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Charge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &charge_)));
          set_has_charge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_Mass;
        break;
      }
      
      // optional double Mass = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Mass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mass_)));
          set_has_mass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_type;
        break;
      }
      
      // optional .HEP.Jet.JetAlgorithm type = 7 [default = PF2PAT];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HEP::Jet_JetAlgorithm_IsValid(value)) {
            set_type(static_cast< ::HEP::Jet_JetAlgorithm >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_Eta;
        break;
      }
      
      // optional double Eta = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Eta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &eta_)));
          set_has_eta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_Phi;
        break;
      }
      
      // optional double Phi = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Phi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &phi_)));
          set_has_phi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_Pt;
        break;
      }
      
      // optional double Pt = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Pt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pt_)));
          set_has_pt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_PtRaw;
        break;
      }
      
      // optional double PtRaw = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PtRaw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ptraw_)));
          set_has_ptraw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_EnergyRaw;
        break;
      }
      
      // optional double EnergyRaw = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_EnergyRaw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &energyraw_)));
          set_has_energyraw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_PartonFlavour;
        break;
      }
      
      // optional int32 PartonFlavour = 13 [default = 0];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PartonFlavour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &partonflavour_)));
          set_has_partonflavour();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_JECUnc;
        break;
      }
      
      // optional double JECUnc = 14 [default = 0];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_JECUnc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &jecunc_)));
          set_has_jecunc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_L2L3ResJEC;
        break;
      }
      
      // optional double L2L3ResJEC = 15 [default = 0];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_L2L3ResJEC:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &l2l3resjec_)));
          set_has_l2l3resjec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_L3AbsJEC;
        break;
      }
      
      // optional double L3AbsJEC = 16 [default = 0];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_L3AbsJEC:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &l3absjec_)));
          set_has_l3absjec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(137)) goto parse_L2RelJEC;
        break;
      }
      
      // optional double L2RelJEC = 17 [default = 0];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_L2RelJEC:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &l2reljec_)));
          set_has_l2reljec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(145)) goto parse_L1OffJEC;
        break;
      }
      
      // optional double L1OffJEC = 18 [default = 0];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_L1OffJEC:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &l1offjec_)));
          set_has_l1offjec();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(153)) goto parse_EMF;
        break;
      }
      
      // optional double EMF = 19 [default = 0];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_EMF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &emf_)));
          set_has_emf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(161)) goto parse_resEMF;
        break;
      }
      
      // optional double resEMF = 20 [default = 0];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_resEMF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &resemf_)));
          set_has_resemf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(169)) goto parse_HADF;
        break;
      }
      
      // optional double HADF = 21 [default = 0];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_HADF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hadf_)));
          set_has_hadf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_n90Hits;
        break;
      }
      
      // optional int32 n90Hits = 22 [default = 0];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_n90Hits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &n90hits_)));
          set_has_n90hits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(185)) goto parse_fHPD;
        break;
      }
      
      // optional double fHPD = 23 [default = 0];
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_fHPD:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fhpd_)));
          set_has_fhpd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(193)) goto parse_fRBX;
        break;
      }
      
      // optional double fRBX = 24 [default = 0];
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_fRBX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &frbx_)));
          set_has_frbx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(201)) goto parse_SigmaEta;
        break;
      }
      
      // optional double SigmaEta = 25 [default = 0];
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_SigmaEta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sigmaeta_)));
          set_has_sigmaeta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(209)) goto parse_SigmaPhi;
        break;
      }
      
      // optional double SigmaPhi = 26 [default = 0];
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_SigmaPhi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sigmaphi_)));
          set_has_sigmaphi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(217)) goto parse_TrackCountingHighEffBTag;
        break;
      }
      
      // optional double TrackCountingHighEffBTag = 27 [default = 0];
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_TrackCountingHighEffBTag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &trackcountinghigheffbtag_)));
          set_has_trackcountinghigheffbtag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(225)) goto parse_TrackCountingHighPurBTag;
        break;
      }
      
      // optional double TrackCountingHighPurBTag = 28 [default = 0];
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_TrackCountingHighPurBTag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &trackcountinghighpurbtag_)));
          set_has_trackcountinghighpurbtag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(233)) goto parse_SimpleSecondaryVertexHighEffBTag;
        break;
      }
      
      // optional double SimpleSecondaryVertexHighEffBTag = 29 [default = 0];
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_SimpleSecondaryVertexHighEffBTag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &simplesecondaryvertexhigheffbtag_)));
          set_has_simplesecondaryvertexhigheffbtag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(241)) goto parse_SimpleSecondaryVertexHighPurBTag;
        break;
      }
      
      // optional double SimpleSecondaryVertexHighPurBTag = 30 [default = 0];
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_SimpleSecondaryVertexHighPurBTag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &simplesecondaryvertexhighpurbtag_)));
          set_has_simplesecondaryvertexhighpurbtag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(249)) goto parse_JetProbabilityBTag;
        break;
      }
      
      // optional double JetProbabilityBTag = 31 [default = 0];
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_JetProbabilityBTag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &jetprobabilitybtag_)));
          set_has_jetprobabilitybtag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(257)) goto parse_JetBProbabilityBTag;
        break;
      }
      
      // optional double JetBProbabilityBTag = 32 [default = 0];
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_JetBProbabilityBTag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &jetbprobabilitybtag_)));
          set_has_jetbprobabilitybtag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(265)) goto parse_SoftElectronBJetTag;
        break;
      }
      
      // optional double SoftElectronBJetTag = 33 [default = 0];
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_SoftElectronBJetTag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &softelectronbjettag_)));
          set_has_softelectronbjettag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(273)) goto parse_SoftMuonBJetTag;
        break;
      }
      
      // optional double SoftMuonBJetTag = 34 [default = 0];
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_SoftMuonBJetTag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &softmuonbjettag_)));
          set_has_softmuonbjettag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(281)) goto parse_SoftMuonNoIPBJetTag;
        break;
      }
      
      // optional double SoftMuonNoIPBJetTag = 35 [default = 0];
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_SoftMuonNoIPBJetTag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &softmuonnoipbjettag_)));
          set_has_softmuonnoipbjettag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(289)) goto parse_CombinedSVBJetTag;
        break;
      }
      
      // optional double CombinedSVBJetTag = 36 [default = 0];
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_CombinedSVBJetTag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &combinedsvbjettag_)));
          set_has_combinedsvbjettag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(297)) goto parse_CombinedSVMVABJetTag;
        break;
      }
      
      // optional double CombinedSVMVABJetTag = 37 [default = 0];
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_CombinedSVMVABJetTag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &combinedsvmvabjettag_)));
          set_has_combinedsvmvabjettag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_PassLooseID;
        break;
      }
      
      // optional int32 PassLooseID = 38 [default = 0];
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PassLooseID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &passlooseid_)));
          set_has_passlooseid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_PassTightID;
        break;
      }
      
      // optional int32 PassTightID = 39 [default = 0];
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PassTightID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &passtightid_)));
          set_has_passtightid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(321)) goto parse_ChargedEmEnergyFraction;
        break;
      }
      
      // optional double ChargedEmEnergyFraction = 40 [default = 0];
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ChargedEmEnergyFraction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &chargedemenergyfraction_)));
          set_has_chargedemenergyfraction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(329)) goto parse_ChargedHadronEnergyFraction;
        break;
      }
      
      // optional double ChargedHadronEnergyFraction = 41 [default = 0];
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ChargedHadronEnergyFraction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &chargedhadronenergyfraction_)));
          set_has_chargedhadronenergyfraction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(337)) goto parse_ChargedMuEnergyFraction;
        break;
      }
      
      // optional double ChargedMuEnergyFraction = 42 [default = 0];
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ChargedMuEnergyFraction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &chargedmuenergyfraction_)));
          set_has_chargedmuenergyfraction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(345)) goto parse_ElectronEnergyFraction;
        break;
      }
      
      // optional double ElectronEnergyFraction = 43 [default = 0];
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ElectronEnergyFraction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &electronenergyfraction_)));
          set_has_electronenergyfraction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(353)) goto parse_MuonEnergyFraction;
        break;
      }
      
      // optional double MuonEnergyFraction = 44 [default = 0];
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_MuonEnergyFraction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &muonenergyfraction_)));
          set_has_muonenergyfraction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(361)) goto parse_NeutralEmEnergyFraction;
        break;
      }
      
      // optional double NeutralEmEnergyFraction = 45 [default = 0];
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_NeutralEmEnergyFraction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &neutralemenergyfraction_)));
          set_has_neutralemenergyfraction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(369)) goto parse_NeutralHadronEnergyFraction;
        break;
      }
      
      // optional double NeutralHadronEnergyFraction = 46 [default = 0];
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_NeutralHadronEnergyFraction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &neutralhadronenergyfraction_)));
          set_has_neutralhadronenergyfraction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(377)) goto parse_PhotonEnergyFraction;
        break;
      }
      
      // optional double PhotonEnergyFraction = 47 [default = 0];
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PhotonEnergyFraction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &photonenergyfraction_)));
          set_has_photonenergyfraction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(384)) goto parse_ChargedHadronMultiplicity;
        break;
      }
      
      // optional int32 ChargedHadronMultiplicity = 48 [default = 0];
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ChargedHadronMultiplicity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chargedhadronmultiplicity_)));
          set_has_chargedhadronmultiplicity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(392)) goto parse_ChargedMultiplicity;
        break;
      }
      
      // optional int32 ChargedMultiplicity = 49 [default = 0];
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ChargedMultiplicity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chargedmultiplicity_)));
          set_has_chargedmultiplicity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_ElectronMultiplicity;
        break;
      }
      
      // optional int32 ElectronMultiplicity = 50 [default = 0];
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ElectronMultiplicity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &electronmultiplicity_)));
          set_has_electronmultiplicity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_MuonMultiplicity;
        break;
      }
      
      // optional int32 MuonMultiplicity = 51 [default = 0];
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MuonMultiplicity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &muonmultiplicity_)));
          set_has_muonmultiplicity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(416)) goto parse_NeutralHadronMultiplicity;
        break;
      }
      
      // optional int32 NeutralHadronMultiplicity = 52 [default = 0];
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NeutralHadronMultiplicity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &neutralhadronmultiplicity_)));
          set_has_neutralhadronmultiplicity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(424)) goto parse_NeutralMultiplicity;
        break;
      }
      
      // optional int32 NeutralMultiplicity = 53 [default = 0];
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NeutralMultiplicity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &neutralmultiplicity_)));
          set_has_neutralmultiplicity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(432)) goto parse_PhotonMultiplicity;
        break;
      }
      
      // optional int32 PhotonMultiplicity = 54 [default = 0];
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PhotonMultiplicity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &photonmultiplicity_)));
          set_has_photonmultiplicity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(440)) goto parse_NConstituents;
        break;
      }
      
      // optional int32 NConstituents = 55 [default = 0];
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NConstituents:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nconstituents_)));
          set_has_nconstituents();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(449)) goto parse_ChargedEmEnergyFractionRAW;
        break;
      }
      
      // optional double ChargedEmEnergyFractionRAW = 56 [default = 0];
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ChargedEmEnergyFractionRAW:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &chargedemenergyfractionraw_)));
          set_has_chargedemenergyfractionraw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(457)) goto parse_ChargedHadronEnergyFractionRAW;
        break;
      }
      
      // optional double ChargedHadronEnergyFractionRAW = 57 [default = 0];
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ChargedHadronEnergyFractionRAW:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &chargedhadronenergyfractionraw_)));
          set_has_chargedhadronenergyfractionraw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(465)) goto parse_NeutralEmEnergyFractionRAW;
        break;
      }
      
      // optional double NeutralEmEnergyFractionRAW = 58 [default = 0];
      case 58: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_NeutralEmEnergyFractionRAW:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &neutralemenergyfractionraw_)));
          set_has_neutralemenergyfractionraw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(473)) goto parse_NeutralHadronEnergyFractionRAW;
        break;
      }
      
      // optional double NeutralHadronEnergyFractionRAW = 59 [default = 0];
      case 59: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_NeutralHadronEnergyFractionRAW:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &neutralhadronenergyfractionraw_)));
          set_has_neutralhadronenergyfractionraw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(481)) goto parse_BestVertexTrackAssociationFactor;
        break;
      }
      
      // optional double BestVertexTrackAssociationFactor = 60 [default = 0];
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_BestVertexTrackAssociationFactor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bestvertextrackassociationfactor_)));
          set_has_bestvertextrackassociationfactor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(489)) goto parse_ClosestVertexWeighted3DSeparation;
        break;
      }
      
      // optional double ClosestVertexWeighted3DSeparation = 61 [default = 0];
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ClosestVertexWeighted3DSeparation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &closestvertexweighted3dseparation_)));
          set_has_closestvertexweighted3dseparation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(497)) goto parse_ClosestVertexWeightedXYSeparation;
        break;
      }
      
      // optional double ClosestVertexWeightedXYSeparation = 62 [default = 0];
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ClosestVertexWeightedXYSeparation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &closestvertexweightedxyseparation_)));
          set_has_closestvertexweightedxyseparation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(505)) goto parse_ClosestVertexWeightedZSeparation;
        break;
      }
      
      // optional double ClosestVertexWeightedZSeparation = 63 [default = 0];
      case 63: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ClosestVertexWeightedZSeparation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &closestvertexweightedzseparation_)));
          set_has_closestvertexweightedzseparation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(512)) goto parse_BestVertexTrackAssociationIndex;
        break;
      }
      
      // optional int32 BestVertexTrackAssociationIndex = 64 [default = 0];
      case 64: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BestVertexTrackAssociationIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bestvertextrackassociationindex_)));
          set_has_bestvertextrackassociationindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(520)) goto parse_ClosestVertex3DIndex;
        break;
      }
      
      // optional int32 ClosestVertex3DIndex = 65 [default = 0];
      case 65: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ClosestVertex3DIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &closestvertex3dindex_)));
          set_has_closestvertex3dindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(528)) goto parse_ClosestVertexXYIndex;
        break;
      }
      
      // optional int32 ClosestVertexXYIndex = 66 [default = 0];
      case 66: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ClosestVertexXYIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &closestvertexxyindex_)));
          set_has_closestvertexxyindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(536)) goto parse_ClosestVertexZIndex;
        break;
      }
      
      // optional int32 ClosestVertexZIndex = 67 [default = 0];
      case 67: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ClosestVertexZIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &closestvertexzindex_)));
          set_has_closestvertexzindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Jet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double Energy = 1 [default = 0];
  if (has_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->energy(), output);
  }
  
  // optional double Px = 2 [default = 0];
  if (has_px()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->px(), output);
  }
  
  // optional double Py = 3 [default = 0];
  if (has_py()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->py(), output);
  }
  
  // optional double Pz = 4 [default = 0];
  if (has_pz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->pz(), output);
  }
  
  // optional double Charge = 5 [default = 0];
  if (has_charge()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->charge(), output);
  }
  
  // optional double Mass = 6 [default = 0];
  if (has_mass()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->mass(), output);
  }
  
  // optional .HEP.Jet.JetAlgorithm type = 7 [default = PF2PAT];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->type(), output);
  }
  
  // optional double Eta = 8 [default = 0];
  if (has_eta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->eta(), output);
  }
  
  // optional double Phi = 9 [default = 0];
  if (has_phi()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->phi(), output);
  }
  
  // optional double Pt = 10 [default = 0];
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->pt(), output);
  }
  
  // optional double PtRaw = 11 [default = 0];
  if (has_ptraw()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->ptraw(), output);
  }
  
  // optional double EnergyRaw = 12 [default = 0];
  if (has_energyraw()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->energyraw(), output);
  }
  
  // optional int32 PartonFlavour = 13 [default = 0];
  if (has_partonflavour()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->partonflavour(), output);
  }
  
  // optional double JECUnc = 14 [default = 0];
  if (has_jecunc()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->jecunc(), output);
  }
  
  // optional double L2L3ResJEC = 15 [default = 0];
  if (has_l2l3resjec()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->l2l3resjec(), output);
  }
  
  // optional double L3AbsJEC = 16 [default = 0];
  if (has_l3absjec()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->l3absjec(), output);
  }
  
  // optional double L2RelJEC = 17 [default = 0];
  if (has_l2reljec()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->l2reljec(), output);
  }
  
  // optional double L1OffJEC = 18 [default = 0];
  if (has_l1offjec()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->l1offjec(), output);
  }
  
  // optional double EMF = 19 [default = 0];
  if (has_emf()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->emf(), output);
  }
  
  // optional double resEMF = 20 [default = 0];
  if (has_resemf()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->resemf(), output);
  }
  
  // optional double HADF = 21 [default = 0];
  if (has_hadf()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->hadf(), output);
  }
  
  // optional int32 n90Hits = 22 [default = 0];
  if (has_n90hits()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->n90hits(), output);
  }
  
  // optional double fHPD = 23 [default = 0];
  if (has_fhpd()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->fhpd(), output);
  }
  
  // optional double fRBX = 24 [default = 0];
  if (has_frbx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->frbx(), output);
  }
  
  // optional double SigmaEta = 25 [default = 0];
  if (has_sigmaeta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->sigmaeta(), output);
  }
  
  // optional double SigmaPhi = 26 [default = 0];
  if (has_sigmaphi()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->sigmaphi(), output);
  }
  
  // optional double TrackCountingHighEffBTag = 27 [default = 0];
  if (has_trackcountinghigheffbtag()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->trackcountinghigheffbtag(), output);
  }
  
  // optional double TrackCountingHighPurBTag = 28 [default = 0];
  if (has_trackcountinghighpurbtag()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->trackcountinghighpurbtag(), output);
  }
  
  // optional double SimpleSecondaryVertexHighEffBTag = 29 [default = 0];
  if (has_simplesecondaryvertexhigheffbtag()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->simplesecondaryvertexhigheffbtag(), output);
  }
  
  // optional double SimpleSecondaryVertexHighPurBTag = 30 [default = 0];
  if (has_simplesecondaryvertexhighpurbtag()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->simplesecondaryvertexhighpurbtag(), output);
  }
  
  // optional double JetProbabilityBTag = 31 [default = 0];
  if (has_jetprobabilitybtag()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(31, this->jetprobabilitybtag(), output);
  }
  
  // optional double JetBProbabilityBTag = 32 [default = 0];
  if (has_jetbprobabilitybtag()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(32, this->jetbprobabilitybtag(), output);
  }
  
  // optional double SoftElectronBJetTag = 33 [default = 0];
  if (has_softelectronbjettag()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(33, this->softelectronbjettag(), output);
  }
  
  // optional double SoftMuonBJetTag = 34 [default = 0];
  if (has_softmuonbjettag()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(34, this->softmuonbjettag(), output);
  }
  
  // optional double SoftMuonNoIPBJetTag = 35 [default = 0];
  if (has_softmuonnoipbjettag()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(35, this->softmuonnoipbjettag(), output);
  }
  
  // optional double CombinedSVBJetTag = 36 [default = 0];
  if (has_combinedsvbjettag()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(36, this->combinedsvbjettag(), output);
  }
  
  // optional double CombinedSVMVABJetTag = 37 [default = 0];
  if (has_combinedsvmvabjettag()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(37, this->combinedsvmvabjettag(), output);
  }
  
  // optional int32 PassLooseID = 38 [default = 0];
  if (has_passlooseid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->passlooseid(), output);
  }
  
  // optional int32 PassTightID = 39 [default = 0];
  if (has_passtightid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->passtightid(), output);
  }
  
  // optional double ChargedEmEnergyFraction = 40 [default = 0];
  if (has_chargedemenergyfraction()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(40, this->chargedemenergyfraction(), output);
  }
  
  // optional double ChargedHadronEnergyFraction = 41 [default = 0];
  if (has_chargedhadronenergyfraction()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(41, this->chargedhadronenergyfraction(), output);
  }
  
  // optional double ChargedMuEnergyFraction = 42 [default = 0];
  if (has_chargedmuenergyfraction()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(42, this->chargedmuenergyfraction(), output);
  }
  
  // optional double ElectronEnergyFraction = 43 [default = 0];
  if (has_electronenergyfraction()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(43, this->electronenergyfraction(), output);
  }
  
  // optional double MuonEnergyFraction = 44 [default = 0];
  if (has_muonenergyfraction()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(44, this->muonenergyfraction(), output);
  }
  
  // optional double NeutralEmEnergyFraction = 45 [default = 0];
  if (has_neutralemenergyfraction()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(45, this->neutralemenergyfraction(), output);
  }
  
  // optional double NeutralHadronEnergyFraction = 46 [default = 0];
  if (has_neutralhadronenergyfraction()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(46, this->neutralhadronenergyfraction(), output);
  }
  
  // optional double PhotonEnergyFraction = 47 [default = 0];
  if (has_photonenergyfraction()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(47, this->photonenergyfraction(), output);
  }
  
  // optional int32 ChargedHadronMultiplicity = 48 [default = 0];
  if (has_chargedhadronmultiplicity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(48, this->chargedhadronmultiplicity(), output);
  }
  
  // optional int32 ChargedMultiplicity = 49 [default = 0];
  if (has_chargedmultiplicity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(49, this->chargedmultiplicity(), output);
  }
  
  // optional int32 ElectronMultiplicity = 50 [default = 0];
  if (has_electronmultiplicity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->electronmultiplicity(), output);
  }
  
  // optional int32 MuonMultiplicity = 51 [default = 0];
  if (has_muonmultiplicity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(51, this->muonmultiplicity(), output);
  }
  
  // optional int32 NeutralHadronMultiplicity = 52 [default = 0];
  if (has_neutralhadronmultiplicity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(52, this->neutralhadronmultiplicity(), output);
  }
  
  // optional int32 NeutralMultiplicity = 53 [default = 0];
  if (has_neutralmultiplicity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(53, this->neutralmultiplicity(), output);
  }
  
  // optional int32 PhotonMultiplicity = 54 [default = 0];
  if (has_photonmultiplicity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(54, this->photonmultiplicity(), output);
  }
  
  // optional int32 NConstituents = 55 [default = 0];
  if (has_nconstituents()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(55, this->nconstituents(), output);
  }
  
  // optional double ChargedEmEnergyFractionRAW = 56 [default = 0];
  if (has_chargedemenergyfractionraw()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(56, this->chargedemenergyfractionraw(), output);
  }
  
  // optional double ChargedHadronEnergyFractionRAW = 57 [default = 0];
  if (has_chargedhadronenergyfractionraw()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(57, this->chargedhadronenergyfractionraw(), output);
  }
  
  // optional double NeutralEmEnergyFractionRAW = 58 [default = 0];
  if (has_neutralemenergyfractionraw()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(58, this->neutralemenergyfractionraw(), output);
  }
  
  // optional double NeutralHadronEnergyFractionRAW = 59 [default = 0];
  if (has_neutralhadronenergyfractionraw()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(59, this->neutralhadronenergyfractionraw(), output);
  }
  
  // optional double BestVertexTrackAssociationFactor = 60 [default = 0];
  if (has_bestvertextrackassociationfactor()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(60, this->bestvertextrackassociationfactor(), output);
  }
  
  // optional double ClosestVertexWeighted3DSeparation = 61 [default = 0];
  if (has_closestvertexweighted3dseparation()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(61, this->closestvertexweighted3dseparation(), output);
  }
  
  // optional double ClosestVertexWeightedXYSeparation = 62 [default = 0];
  if (has_closestvertexweightedxyseparation()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(62, this->closestvertexweightedxyseparation(), output);
  }
  
  // optional double ClosestVertexWeightedZSeparation = 63 [default = 0];
  if (has_closestvertexweightedzseparation()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(63, this->closestvertexweightedzseparation(), output);
  }
  
  // optional int32 BestVertexTrackAssociationIndex = 64 [default = 0];
  if (has_bestvertextrackassociationindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(64, this->bestvertextrackassociationindex(), output);
  }
  
  // optional int32 ClosestVertex3DIndex = 65 [default = 0];
  if (has_closestvertex3dindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(65, this->closestvertex3dindex(), output);
  }
  
  // optional int32 ClosestVertexXYIndex = 66 [default = 0];
  if (has_closestvertexxyindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(66, this->closestvertexxyindex(), output);
  }
  
  // optional int32 ClosestVertexZIndex = 67 [default = 0];
  if (has_closestvertexzindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(67, this->closestvertexzindex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Jet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double Energy = 1 [default = 0];
  if (has_energy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->energy(), target);
  }
  
  // optional double Px = 2 [default = 0];
  if (has_px()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->px(), target);
  }
  
  // optional double Py = 3 [default = 0];
  if (has_py()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->py(), target);
  }
  
  // optional double Pz = 4 [default = 0];
  if (has_pz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->pz(), target);
  }
  
  // optional double Charge = 5 [default = 0];
  if (has_charge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->charge(), target);
  }
  
  // optional double Mass = 6 [default = 0];
  if (has_mass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->mass(), target);
  }
  
  // optional .HEP.Jet.JetAlgorithm type = 7 [default = PF2PAT];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->type(), target);
  }
  
  // optional double Eta = 8 [default = 0];
  if (has_eta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->eta(), target);
  }
  
  // optional double Phi = 9 [default = 0];
  if (has_phi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->phi(), target);
  }
  
  // optional double Pt = 10 [default = 0];
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->pt(), target);
  }
  
  // optional double PtRaw = 11 [default = 0];
  if (has_ptraw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->ptraw(), target);
  }
  
  // optional double EnergyRaw = 12 [default = 0];
  if (has_energyraw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->energyraw(), target);
  }
  
  // optional int32 PartonFlavour = 13 [default = 0];
  if (has_partonflavour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->partonflavour(), target);
  }
  
  // optional double JECUnc = 14 [default = 0];
  if (has_jecunc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->jecunc(), target);
  }
  
  // optional double L2L3ResJEC = 15 [default = 0];
  if (has_l2l3resjec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->l2l3resjec(), target);
  }
  
  // optional double L3AbsJEC = 16 [default = 0];
  if (has_l3absjec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->l3absjec(), target);
  }
  
  // optional double L2RelJEC = 17 [default = 0];
  if (has_l2reljec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->l2reljec(), target);
  }
  
  // optional double L1OffJEC = 18 [default = 0];
  if (has_l1offjec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->l1offjec(), target);
  }
  
  // optional double EMF = 19 [default = 0];
  if (has_emf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->emf(), target);
  }
  
  // optional double resEMF = 20 [default = 0];
  if (has_resemf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->resemf(), target);
  }
  
  // optional double HADF = 21 [default = 0];
  if (has_hadf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->hadf(), target);
  }
  
  // optional int32 n90Hits = 22 [default = 0];
  if (has_n90hits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->n90hits(), target);
  }
  
  // optional double fHPD = 23 [default = 0];
  if (has_fhpd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->fhpd(), target);
  }
  
  // optional double fRBX = 24 [default = 0];
  if (has_frbx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->frbx(), target);
  }
  
  // optional double SigmaEta = 25 [default = 0];
  if (has_sigmaeta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->sigmaeta(), target);
  }
  
  // optional double SigmaPhi = 26 [default = 0];
  if (has_sigmaphi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->sigmaphi(), target);
  }
  
  // optional double TrackCountingHighEffBTag = 27 [default = 0];
  if (has_trackcountinghigheffbtag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->trackcountinghigheffbtag(), target);
  }
  
  // optional double TrackCountingHighPurBTag = 28 [default = 0];
  if (has_trackcountinghighpurbtag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->trackcountinghighpurbtag(), target);
  }
  
  // optional double SimpleSecondaryVertexHighEffBTag = 29 [default = 0];
  if (has_simplesecondaryvertexhigheffbtag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->simplesecondaryvertexhigheffbtag(), target);
  }
  
  // optional double SimpleSecondaryVertexHighPurBTag = 30 [default = 0];
  if (has_simplesecondaryvertexhighpurbtag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->simplesecondaryvertexhighpurbtag(), target);
  }
  
  // optional double JetProbabilityBTag = 31 [default = 0];
  if (has_jetprobabilitybtag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(31, this->jetprobabilitybtag(), target);
  }
  
  // optional double JetBProbabilityBTag = 32 [default = 0];
  if (has_jetbprobabilitybtag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(32, this->jetbprobabilitybtag(), target);
  }
  
  // optional double SoftElectronBJetTag = 33 [default = 0];
  if (has_softelectronbjettag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(33, this->softelectronbjettag(), target);
  }
  
  // optional double SoftMuonBJetTag = 34 [default = 0];
  if (has_softmuonbjettag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(34, this->softmuonbjettag(), target);
  }
  
  // optional double SoftMuonNoIPBJetTag = 35 [default = 0];
  if (has_softmuonnoipbjettag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(35, this->softmuonnoipbjettag(), target);
  }
  
  // optional double CombinedSVBJetTag = 36 [default = 0];
  if (has_combinedsvbjettag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(36, this->combinedsvbjettag(), target);
  }
  
  // optional double CombinedSVMVABJetTag = 37 [default = 0];
  if (has_combinedsvmvabjettag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(37, this->combinedsvmvabjettag(), target);
  }
  
  // optional int32 PassLooseID = 38 [default = 0];
  if (has_passlooseid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->passlooseid(), target);
  }
  
  // optional int32 PassTightID = 39 [default = 0];
  if (has_passtightid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(39, this->passtightid(), target);
  }
  
  // optional double ChargedEmEnergyFraction = 40 [default = 0];
  if (has_chargedemenergyfraction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(40, this->chargedemenergyfraction(), target);
  }
  
  // optional double ChargedHadronEnergyFraction = 41 [default = 0];
  if (has_chargedhadronenergyfraction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(41, this->chargedhadronenergyfraction(), target);
  }
  
  // optional double ChargedMuEnergyFraction = 42 [default = 0];
  if (has_chargedmuenergyfraction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(42, this->chargedmuenergyfraction(), target);
  }
  
  // optional double ElectronEnergyFraction = 43 [default = 0];
  if (has_electronenergyfraction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(43, this->electronenergyfraction(), target);
  }
  
  // optional double MuonEnergyFraction = 44 [default = 0];
  if (has_muonenergyfraction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(44, this->muonenergyfraction(), target);
  }
  
  // optional double NeutralEmEnergyFraction = 45 [default = 0];
  if (has_neutralemenergyfraction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(45, this->neutralemenergyfraction(), target);
  }
  
  // optional double NeutralHadronEnergyFraction = 46 [default = 0];
  if (has_neutralhadronenergyfraction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(46, this->neutralhadronenergyfraction(), target);
  }
  
  // optional double PhotonEnergyFraction = 47 [default = 0];
  if (has_photonenergyfraction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(47, this->photonenergyfraction(), target);
  }
  
  // optional int32 ChargedHadronMultiplicity = 48 [default = 0];
  if (has_chargedhadronmultiplicity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(48, this->chargedhadronmultiplicity(), target);
  }
  
  // optional int32 ChargedMultiplicity = 49 [default = 0];
  if (has_chargedmultiplicity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(49, this->chargedmultiplicity(), target);
  }
  
  // optional int32 ElectronMultiplicity = 50 [default = 0];
  if (has_electronmultiplicity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->electronmultiplicity(), target);
  }
  
  // optional int32 MuonMultiplicity = 51 [default = 0];
  if (has_muonmultiplicity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(51, this->muonmultiplicity(), target);
  }
  
  // optional int32 NeutralHadronMultiplicity = 52 [default = 0];
  if (has_neutralhadronmultiplicity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(52, this->neutralhadronmultiplicity(), target);
  }
  
  // optional int32 NeutralMultiplicity = 53 [default = 0];
  if (has_neutralmultiplicity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(53, this->neutralmultiplicity(), target);
  }
  
  // optional int32 PhotonMultiplicity = 54 [default = 0];
  if (has_photonmultiplicity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(54, this->photonmultiplicity(), target);
  }
  
  // optional int32 NConstituents = 55 [default = 0];
  if (has_nconstituents()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(55, this->nconstituents(), target);
  }
  
  // optional double ChargedEmEnergyFractionRAW = 56 [default = 0];
  if (has_chargedemenergyfractionraw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(56, this->chargedemenergyfractionraw(), target);
  }
  
  // optional double ChargedHadronEnergyFractionRAW = 57 [default = 0];
  if (has_chargedhadronenergyfractionraw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(57, this->chargedhadronenergyfractionraw(), target);
  }
  
  // optional double NeutralEmEnergyFractionRAW = 58 [default = 0];
  if (has_neutralemenergyfractionraw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(58, this->neutralemenergyfractionraw(), target);
  }
  
  // optional double NeutralHadronEnergyFractionRAW = 59 [default = 0];
  if (has_neutralhadronenergyfractionraw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(59, this->neutralhadronenergyfractionraw(), target);
  }
  
  // optional double BestVertexTrackAssociationFactor = 60 [default = 0];
  if (has_bestvertextrackassociationfactor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(60, this->bestvertextrackassociationfactor(), target);
  }
  
  // optional double ClosestVertexWeighted3DSeparation = 61 [default = 0];
  if (has_closestvertexweighted3dseparation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(61, this->closestvertexweighted3dseparation(), target);
  }
  
  // optional double ClosestVertexWeightedXYSeparation = 62 [default = 0];
  if (has_closestvertexweightedxyseparation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(62, this->closestvertexweightedxyseparation(), target);
  }
  
  // optional double ClosestVertexWeightedZSeparation = 63 [default = 0];
  if (has_closestvertexweightedzseparation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(63, this->closestvertexweightedzseparation(), target);
  }
  
  // optional int32 BestVertexTrackAssociationIndex = 64 [default = 0];
  if (has_bestvertextrackassociationindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(64, this->bestvertextrackassociationindex(), target);
  }
  
  // optional int32 ClosestVertex3DIndex = 65 [default = 0];
  if (has_closestvertex3dindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(65, this->closestvertex3dindex(), target);
  }
  
  // optional int32 ClosestVertexXYIndex = 66 [default = 0];
  if (has_closestvertexxyindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(66, this->closestvertexxyindex(), target);
  }
  
  // optional int32 ClosestVertexZIndex = 67 [default = 0];
  if (has_closestvertexzindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(67, this->closestvertexzindex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Jet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double Energy = 1 [default = 0];
    if (has_energy()) {
      total_size += 1 + 8;
    }
    
    // optional double Px = 2 [default = 0];
    if (has_px()) {
      total_size += 1 + 8;
    }
    
    // optional double Py = 3 [default = 0];
    if (has_py()) {
      total_size += 1 + 8;
    }
    
    // optional double Pz = 4 [default = 0];
    if (has_pz()) {
      total_size += 1 + 8;
    }
    
    // optional double Charge = 5 [default = 0];
    if (has_charge()) {
      total_size += 1 + 8;
    }
    
    // optional double Mass = 6 [default = 0];
    if (has_mass()) {
      total_size += 1 + 8;
    }
    
    // optional .HEP.Jet.JetAlgorithm type = 7 [default = PF2PAT];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional double Eta = 8 [default = 0];
    if (has_eta()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double Phi = 9 [default = 0];
    if (has_phi()) {
      total_size += 1 + 8;
    }
    
    // optional double Pt = 10 [default = 0];
    if (has_pt()) {
      total_size += 1 + 8;
    }
    
    // optional double PtRaw = 11 [default = 0];
    if (has_ptraw()) {
      total_size += 1 + 8;
    }
    
    // optional double EnergyRaw = 12 [default = 0];
    if (has_energyraw()) {
      total_size += 1 + 8;
    }
    
    // optional int32 PartonFlavour = 13 [default = 0];
    if (has_partonflavour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->partonflavour());
    }
    
    // optional double JECUnc = 14 [default = 0];
    if (has_jecunc()) {
      total_size += 1 + 8;
    }
    
    // optional double L2L3ResJEC = 15 [default = 0];
    if (has_l2l3resjec()) {
      total_size += 1 + 8;
    }
    
    // optional double L3AbsJEC = 16 [default = 0];
    if (has_l3absjec()) {
      total_size += 2 + 8;
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional double L2RelJEC = 17 [default = 0];
    if (has_l2reljec()) {
      total_size += 2 + 8;
    }
    
    // optional double L1OffJEC = 18 [default = 0];
    if (has_l1offjec()) {
      total_size += 2 + 8;
    }
    
    // optional double EMF = 19 [default = 0];
    if (has_emf()) {
      total_size += 2 + 8;
    }
    
    // optional double resEMF = 20 [default = 0];
    if (has_resemf()) {
      total_size += 2 + 8;
    }
    
    // optional double HADF = 21 [default = 0];
    if (has_hadf()) {
      total_size += 2 + 8;
    }
    
    // optional int32 n90Hits = 22 [default = 0];
    if (has_n90hits()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->n90hits());
    }
    
    // optional double fHPD = 23 [default = 0];
    if (has_fhpd()) {
      total_size += 2 + 8;
    }
    
    // optional double fRBX = 24 [default = 0];
    if (has_frbx()) {
      total_size += 2 + 8;
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional double SigmaEta = 25 [default = 0];
    if (has_sigmaeta()) {
      total_size += 2 + 8;
    }
    
    // optional double SigmaPhi = 26 [default = 0];
    if (has_sigmaphi()) {
      total_size += 2 + 8;
    }
    
    // optional double TrackCountingHighEffBTag = 27 [default = 0];
    if (has_trackcountinghigheffbtag()) {
      total_size += 2 + 8;
    }
    
    // optional double TrackCountingHighPurBTag = 28 [default = 0];
    if (has_trackcountinghighpurbtag()) {
      total_size += 2 + 8;
    }
    
    // optional double SimpleSecondaryVertexHighEffBTag = 29 [default = 0];
    if (has_simplesecondaryvertexhigheffbtag()) {
      total_size += 2 + 8;
    }
    
    // optional double SimpleSecondaryVertexHighPurBTag = 30 [default = 0];
    if (has_simplesecondaryvertexhighpurbtag()) {
      total_size += 2 + 8;
    }
    
    // optional double JetProbabilityBTag = 31 [default = 0];
    if (has_jetprobabilitybtag()) {
      total_size += 2 + 8;
    }
    
    // optional double JetBProbabilityBTag = 32 [default = 0];
    if (has_jetbprobabilitybtag()) {
      total_size += 2 + 8;
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional double SoftElectronBJetTag = 33 [default = 0];
    if (has_softelectronbjettag()) {
      total_size += 2 + 8;
    }
    
    // optional double SoftMuonBJetTag = 34 [default = 0];
    if (has_softmuonbjettag()) {
      total_size += 2 + 8;
    }
    
    // optional double SoftMuonNoIPBJetTag = 35 [default = 0];
    if (has_softmuonnoipbjettag()) {
      total_size += 2 + 8;
    }
    
    // optional double CombinedSVBJetTag = 36 [default = 0];
    if (has_combinedsvbjettag()) {
      total_size += 2 + 8;
    }
    
    // optional double CombinedSVMVABJetTag = 37 [default = 0];
    if (has_combinedsvmvabjettag()) {
      total_size += 2 + 8;
    }
    
    // optional int32 PassLooseID = 38 [default = 0];
    if (has_passlooseid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->passlooseid());
    }
    
    // optional int32 PassTightID = 39 [default = 0];
    if (has_passtightid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->passtightid());
    }
    
    // optional double ChargedEmEnergyFraction = 40 [default = 0];
    if (has_chargedemenergyfraction()) {
      total_size += 2 + 8;
    }
    
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional double ChargedHadronEnergyFraction = 41 [default = 0];
    if (has_chargedhadronenergyfraction()) {
      total_size += 2 + 8;
    }
    
    // optional double ChargedMuEnergyFraction = 42 [default = 0];
    if (has_chargedmuenergyfraction()) {
      total_size += 2 + 8;
    }
    
    // optional double ElectronEnergyFraction = 43 [default = 0];
    if (has_electronenergyfraction()) {
      total_size += 2 + 8;
    }
    
    // optional double MuonEnergyFraction = 44 [default = 0];
    if (has_muonenergyfraction()) {
      total_size += 2 + 8;
    }
    
    // optional double NeutralEmEnergyFraction = 45 [default = 0];
    if (has_neutralemenergyfraction()) {
      total_size += 2 + 8;
    }
    
    // optional double NeutralHadronEnergyFraction = 46 [default = 0];
    if (has_neutralhadronenergyfraction()) {
      total_size += 2 + 8;
    }
    
    // optional double PhotonEnergyFraction = 47 [default = 0];
    if (has_photonenergyfraction()) {
      total_size += 2 + 8;
    }
    
    // optional int32 ChargedHadronMultiplicity = 48 [default = 0];
    if (has_chargedhadronmultiplicity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chargedhadronmultiplicity());
    }
    
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional int32 ChargedMultiplicity = 49 [default = 0];
    if (has_chargedmultiplicity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chargedmultiplicity());
    }
    
    // optional int32 ElectronMultiplicity = 50 [default = 0];
    if (has_electronmultiplicity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->electronmultiplicity());
    }
    
    // optional int32 MuonMultiplicity = 51 [default = 0];
    if (has_muonmultiplicity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->muonmultiplicity());
    }
    
    // optional int32 NeutralHadronMultiplicity = 52 [default = 0];
    if (has_neutralhadronmultiplicity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->neutralhadronmultiplicity());
    }
    
    // optional int32 NeutralMultiplicity = 53 [default = 0];
    if (has_neutralmultiplicity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->neutralmultiplicity());
    }
    
    // optional int32 PhotonMultiplicity = 54 [default = 0];
    if (has_photonmultiplicity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->photonmultiplicity());
    }
    
    // optional int32 NConstituents = 55 [default = 0];
    if (has_nconstituents()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nconstituents());
    }
    
    // optional double ChargedEmEnergyFractionRAW = 56 [default = 0];
    if (has_chargedemenergyfractionraw()) {
      total_size += 2 + 8;
    }
    
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional double ChargedHadronEnergyFractionRAW = 57 [default = 0];
    if (has_chargedhadronenergyfractionraw()) {
      total_size += 2 + 8;
    }
    
    // optional double NeutralEmEnergyFractionRAW = 58 [default = 0];
    if (has_neutralemenergyfractionraw()) {
      total_size += 2 + 8;
    }
    
    // optional double NeutralHadronEnergyFractionRAW = 59 [default = 0];
    if (has_neutralhadronenergyfractionraw()) {
      total_size += 2 + 8;
    }
    
    // optional double BestVertexTrackAssociationFactor = 60 [default = 0];
    if (has_bestvertextrackassociationfactor()) {
      total_size += 2 + 8;
    }
    
    // optional double ClosestVertexWeighted3DSeparation = 61 [default = 0];
    if (has_closestvertexweighted3dseparation()) {
      total_size += 2 + 8;
    }
    
    // optional double ClosestVertexWeightedXYSeparation = 62 [default = 0];
    if (has_closestvertexweightedxyseparation()) {
      total_size += 2 + 8;
    }
    
    // optional double ClosestVertexWeightedZSeparation = 63 [default = 0];
    if (has_closestvertexweightedzseparation()) {
      total_size += 2 + 8;
    }
    
    // optional int32 BestVertexTrackAssociationIndex = 64 [default = 0];
    if (has_bestvertextrackassociationindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bestvertextrackassociationindex());
    }
    
  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    // optional int32 ClosestVertex3DIndex = 65 [default = 0];
    if (has_closestvertex3dindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->closestvertex3dindex());
    }
    
    // optional int32 ClosestVertexXYIndex = 66 [default = 0];
    if (has_closestvertexxyindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->closestvertexxyindex());
    }
    
    // optional int32 ClosestVertexZIndex = 67 [default = 0];
    if (has_closestvertexzindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->closestvertexzindex());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Jet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Jet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Jet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Jet::MergeFrom(const Jet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_energy()) {
      set_energy(from.energy());
    }
    if (from.has_px()) {
      set_px(from.px());
    }
    if (from.has_py()) {
      set_py(from.py());
    }
    if (from.has_pz()) {
      set_pz(from.pz());
    }
    if (from.has_charge()) {
      set_charge(from.charge());
    }
    if (from.has_mass()) {
      set_mass(from.mass());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_eta()) {
      set_eta(from.eta());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_phi()) {
      set_phi(from.phi());
    }
    if (from.has_pt()) {
      set_pt(from.pt());
    }
    if (from.has_ptraw()) {
      set_ptraw(from.ptraw());
    }
    if (from.has_energyraw()) {
      set_energyraw(from.energyraw());
    }
    if (from.has_partonflavour()) {
      set_partonflavour(from.partonflavour());
    }
    if (from.has_jecunc()) {
      set_jecunc(from.jecunc());
    }
    if (from.has_l2l3resjec()) {
      set_l2l3resjec(from.l2l3resjec());
    }
    if (from.has_l3absjec()) {
      set_l3absjec(from.l3absjec());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_l2reljec()) {
      set_l2reljec(from.l2reljec());
    }
    if (from.has_l1offjec()) {
      set_l1offjec(from.l1offjec());
    }
    if (from.has_emf()) {
      set_emf(from.emf());
    }
    if (from.has_resemf()) {
      set_resemf(from.resemf());
    }
    if (from.has_hadf()) {
      set_hadf(from.hadf());
    }
    if (from.has_n90hits()) {
      set_n90hits(from.n90hits());
    }
    if (from.has_fhpd()) {
      set_fhpd(from.fhpd());
    }
    if (from.has_frbx()) {
      set_frbx(from.frbx());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_sigmaeta()) {
      set_sigmaeta(from.sigmaeta());
    }
    if (from.has_sigmaphi()) {
      set_sigmaphi(from.sigmaphi());
    }
    if (from.has_trackcountinghigheffbtag()) {
      set_trackcountinghigheffbtag(from.trackcountinghigheffbtag());
    }
    if (from.has_trackcountinghighpurbtag()) {
      set_trackcountinghighpurbtag(from.trackcountinghighpurbtag());
    }
    if (from.has_simplesecondaryvertexhigheffbtag()) {
      set_simplesecondaryvertexhigheffbtag(from.simplesecondaryvertexhigheffbtag());
    }
    if (from.has_simplesecondaryvertexhighpurbtag()) {
      set_simplesecondaryvertexhighpurbtag(from.simplesecondaryvertexhighpurbtag());
    }
    if (from.has_jetprobabilitybtag()) {
      set_jetprobabilitybtag(from.jetprobabilitybtag());
    }
    if (from.has_jetbprobabilitybtag()) {
      set_jetbprobabilitybtag(from.jetbprobabilitybtag());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_softelectronbjettag()) {
      set_softelectronbjettag(from.softelectronbjettag());
    }
    if (from.has_softmuonbjettag()) {
      set_softmuonbjettag(from.softmuonbjettag());
    }
    if (from.has_softmuonnoipbjettag()) {
      set_softmuonnoipbjettag(from.softmuonnoipbjettag());
    }
    if (from.has_combinedsvbjettag()) {
      set_combinedsvbjettag(from.combinedsvbjettag());
    }
    if (from.has_combinedsvmvabjettag()) {
      set_combinedsvmvabjettag(from.combinedsvmvabjettag());
    }
    if (from.has_passlooseid()) {
      set_passlooseid(from.passlooseid());
    }
    if (from.has_passtightid()) {
      set_passtightid(from.passtightid());
    }
    if (from.has_chargedemenergyfraction()) {
      set_chargedemenergyfraction(from.chargedemenergyfraction());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_chargedhadronenergyfraction()) {
      set_chargedhadronenergyfraction(from.chargedhadronenergyfraction());
    }
    if (from.has_chargedmuenergyfraction()) {
      set_chargedmuenergyfraction(from.chargedmuenergyfraction());
    }
    if (from.has_electronenergyfraction()) {
      set_electronenergyfraction(from.electronenergyfraction());
    }
    if (from.has_muonenergyfraction()) {
      set_muonenergyfraction(from.muonenergyfraction());
    }
    if (from.has_neutralemenergyfraction()) {
      set_neutralemenergyfraction(from.neutralemenergyfraction());
    }
    if (from.has_neutralhadronenergyfraction()) {
      set_neutralhadronenergyfraction(from.neutralhadronenergyfraction());
    }
    if (from.has_photonenergyfraction()) {
      set_photonenergyfraction(from.photonenergyfraction());
    }
    if (from.has_chargedhadronmultiplicity()) {
      set_chargedhadronmultiplicity(from.chargedhadronmultiplicity());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_chargedmultiplicity()) {
      set_chargedmultiplicity(from.chargedmultiplicity());
    }
    if (from.has_electronmultiplicity()) {
      set_electronmultiplicity(from.electronmultiplicity());
    }
    if (from.has_muonmultiplicity()) {
      set_muonmultiplicity(from.muonmultiplicity());
    }
    if (from.has_neutralhadronmultiplicity()) {
      set_neutralhadronmultiplicity(from.neutralhadronmultiplicity());
    }
    if (from.has_neutralmultiplicity()) {
      set_neutralmultiplicity(from.neutralmultiplicity());
    }
    if (from.has_photonmultiplicity()) {
      set_photonmultiplicity(from.photonmultiplicity());
    }
    if (from.has_nconstituents()) {
      set_nconstituents(from.nconstituents());
    }
    if (from.has_chargedemenergyfractionraw()) {
      set_chargedemenergyfractionraw(from.chargedemenergyfractionraw());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_chargedhadronenergyfractionraw()) {
      set_chargedhadronenergyfractionraw(from.chargedhadronenergyfractionraw());
    }
    if (from.has_neutralemenergyfractionraw()) {
      set_neutralemenergyfractionraw(from.neutralemenergyfractionraw());
    }
    if (from.has_neutralhadronenergyfractionraw()) {
      set_neutralhadronenergyfractionraw(from.neutralhadronenergyfractionraw());
    }
    if (from.has_bestvertextrackassociationfactor()) {
      set_bestvertextrackassociationfactor(from.bestvertextrackassociationfactor());
    }
    if (from.has_closestvertexweighted3dseparation()) {
      set_closestvertexweighted3dseparation(from.closestvertexweighted3dseparation());
    }
    if (from.has_closestvertexweightedxyseparation()) {
      set_closestvertexweightedxyseparation(from.closestvertexweightedxyseparation());
    }
    if (from.has_closestvertexweightedzseparation()) {
      set_closestvertexweightedzseparation(from.closestvertexweightedzseparation());
    }
    if (from.has_bestvertextrackassociationindex()) {
      set_bestvertextrackassociationindex(from.bestvertextrackassociationindex());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from.has_closestvertex3dindex()) {
      set_closestvertex3dindex(from.closestvertex3dindex());
    }
    if (from.has_closestvertexxyindex()) {
      set_closestvertexxyindex(from.closestvertexxyindex());
    }
    if (from.has_closestvertexzindex()) {
      set_closestvertexzindex(from.closestvertexzindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Jet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Jet::CopyFrom(const Jet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Jet::IsInitialized() const {
  
  return true;
}

void Jet::Swap(Jet* other) {
  if (other != this) {
    std::swap(energy_, other->energy_);
    std::swap(px_, other->px_);
    std::swap(py_, other->py_);
    std::swap(pz_, other->pz_);
    std::swap(charge_, other->charge_);
    std::swap(mass_, other->mass_);
    std::swap(type_, other->type_);
    std::swap(eta_, other->eta_);
    std::swap(phi_, other->phi_);
    std::swap(pt_, other->pt_);
    std::swap(ptraw_, other->ptraw_);
    std::swap(energyraw_, other->energyraw_);
    std::swap(partonflavour_, other->partonflavour_);
    std::swap(jecunc_, other->jecunc_);
    std::swap(l2l3resjec_, other->l2l3resjec_);
    std::swap(l3absjec_, other->l3absjec_);
    std::swap(l2reljec_, other->l2reljec_);
    std::swap(l1offjec_, other->l1offjec_);
    std::swap(emf_, other->emf_);
    std::swap(resemf_, other->resemf_);
    std::swap(hadf_, other->hadf_);
    std::swap(n90hits_, other->n90hits_);
    std::swap(fhpd_, other->fhpd_);
    std::swap(frbx_, other->frbx_);
    std::swap(sigmaeta_, other->sigmaeta_);
    std::swap(sigmaphi_, other->sigmaphi_);
    std::swap(trackcountinghigheffbtag_, other->trackcountinghigheffbtag_);
    std::swap(trackcountinghighpurbtag_, other->trackcountinghighpurbtag_);
    std::swap(simplesecondaryvertexhigheffbtag_, other->simplesecondaryvertexhigheffbtag_);
    std::swap(simplesecondaryvertexhighpurbtag_, other->simplesecondaryvertexhighpurbtag_);
    std::swap(jetprobabilitybtag_, other->jetprobabilitybtag_);
    std::swap(jetbprobabilitybtag_, other->jetbprobabilitybtag_);
    std::swap(softelectronbjettag_, other->softelectronbjettag_);
    std::swap(softmuonbjettag_, other->softmuonbjettag_);
    std::swap(softmuonnoipbjettag_, other->softmuonnoipbjettag_);
    std::swap(combinedsvbjettag_, other->combinedsvbjettag_);
    std::swap(combinedsvmvabjettag_, other->combinedsvmvabjettag_);
    std::swap(passlooseid_, other->passlooseid_);
    std::swap(passtightid_, other->passtightid_);
    std::swap(chargedemenergyfraction_, other->chargedemenergyfraction_);
    std::swap(chargedhadronenergyfraction_, other->chargedhadronenergyfraction_);
    std::swap(chargedmuenergyfraction_, other->chargedmuenergyfraction_);
    std::swap(electronenergyfraction_, other->electronenergyfraction_);
    std::swap(muonenergyfraction_, other->muonenergyfraction_);
    std::swap(neutralemenergyfraction_, other->neutralemenergyfraction_);
    std::swap(neutralhadronenergyfraction_, other->neutralhadronenergyfraction_);
    std::swap(photonenergyfraction_, other->photonenergyfraction_);
    std::swap(chargedhadronmultiplicity_, other->chargedhadronmultiplicity_);
    std::swap(chargedmultiplicity_, other->chargedmultiplicity_);
    std::swap(electronmultiplicity_, other->electronmultiplicity_);
    std::swap(muonmultiplicity_, other->muonmultiplicity_);
    std::swap(neutralhadronmultiplicity_, other->neutralhadronmultiplicity_);
    std::swap(neutralmultiplicity_, other->neutralmultiplicity_);
    std::swap(photonmultiplicity_, other->photonmultiplicity_);
    std::swap(nconstituents_, other->nconstituents_);
    std::swap(chargedemenergyfractionraw_, other->chargedemenergyfractionraw_);
    std::swap(chargedhadronenergyfractionraw_, other->chargedhadronenergyfractionraw_);
    std::swap(neutralemenergyfractionraw_, other->neutralemenergyfractionraw_);
    std::swap(neutralhadronenergyfractionraw_, other->neutralhadronenergyfractionraw_);
    std::swap(bestvertextrackassociationfactor_, other->bestvertextrackassociationfactor_);
    std::swap(closestvertexweighted3dseparation_, other->closestvertexweighted3dseparation_);
    std::swap(closestvertexweightedxyseparation_, other->closestvertexweightedxyseparation_);
    std::swap(closestvertexweightedzseparation_, other->closestvertexweightedzseparation_);
    std::swap(bestvertextrackassociationindex_, other->bestvertextrackassociationindex_);
    std::swap(closestvertex3dindex_, other->closestvertex3dindex_);
    std::swap(closestvertexxyindex_, other->closestvertexxyindex_);
    std::swap(closestvertexzindex_, other->closestvertexzindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Jet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Jet_descriptor_;
  metadata.reflection = Jet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GenJet::kEnergyFieldNumber;
const int GenJet::kPxFieldNumber;
const int GenJet::kPyFieldNumber;
const int GenJet::kPzFieldNumber;
const int GenJet::kChargeFieldNumber;
const int GenJet::kMassFieldNumber;
const int GenJet::kEtaFieldNumber;
const int GenJet::kPhiFieldNumber;
const int GenJet::kPtFieldNumber;
const int GenJet::kEMFFieldNumber;
const int GenJet::kHADFFieldNumber;
#endif  // !_MSC_VER

GenJet::GenJet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GenJet::InitAsDefaultInstance() {
}

GenJet::GenJet(const GenJet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GenJet::SharedCtor() {
  _cached_size_ = 0;
  energy_ = 0;
  px_ = 0;
  py_ = 0;
  pz_ = 0;
  charge_ = 0;
  mass_ = 0;
  eta_ = 0;
  phi_ = 0;
  pt_ = 0;
  emf_ = 0;
  hadf_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GenJet::~GenJet() {
  SharedDtor();
}

void GenJet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GenJet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GenJet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GenJet_descriptor_;
}

const GenJet& GenJet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EventCollection_2eproto();  return *default_instance_;
}

GenJet* GenJet::default_instance_ = NULL;

GenJet* GenJet::New() const {
  return new GenJet;
}

void GenJet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    energy_ = 0;
    px_ = 0;
    py_ = 0;
    pz_ = 0;
    charge_ = 0;
    mass_ = 0;
    eta_ = 0;
    phi_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    pt_ = 0;
    emf_ = 0;
    hadf_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GenJet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double Energy = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &energy_)));
          set_has_energy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_Px;
        break;
      }
      
      // optional double Px = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Px:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &px_)));
          set_has_px();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_Py;
        break;
      }
      
      // optional double Py = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Py:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &py_)));
          set_has_py();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_Pz;
        break;
      }
      
      // optional double Pz = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Pz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pz_)));
          set_has_pz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_Charge;
        break;
      }
      
      // optional double Charge = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Charge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &charge_)));
          set_has_charge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_Mass;
        break;
      }
      
      // optional double Mass = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Mass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mass_)));
          set_has_mass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_Eta;
        break;
      }
      
      // optional double Eta = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Eta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &eta_)));
          set_has_eta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_Phi;
        break;
      }
      
      // optional double Phi = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Phi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &phi_)));
          set_has_phi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_Pt;
        break;
      }
      
      // optional double Pt = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Pt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pt_)));
          set_has_pt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_EMF;
        break;
      }
      
      // optional double EMF = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_EMF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &emf_)));
          set_has_emf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_HADF;
        break;
      }
      
      // optional double HADF = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_HADF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hadf_)));
          set_has_hadf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GenJet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double Energy = 1 [default = 0];
  if (has_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->energy(), output);
  }
  
  // optional double Px = 2 [default = 0];
  if (has_px()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->px(), output);
  }
  
  // optional double Py = 3 [default = 0];
  if (has_py()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->py(), output);
  }
  
  // optional double Pz = 4 [default = 0];
  if (has_pz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->pz(), output);
  }
  
  // optional double Charge = 5 [default = 0];
  if (has_charge()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->charge(), output);
  }
  
  // optional double Mass = 6 [default = 0];
  if (has_mass()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->mass(), output);
  }
  
  // optional double Eta = 7 [default = 0];
  if (has_eta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->eta(), output);
  }
  
  // optional double Phi = 8 [default = 0];
  if (has_phi()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->phi(), output);
  }
  
  // optional double Pt = 9 [default = 0];
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->pt(), output);
  }
  
  // optional double EMF = 10 [default = 0];
  if (has_emf()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->emf(), output);
  }
  
  // optional double HADF = 11 [default = 0];
  if (has_hadf()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->hadf(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GenJet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double Energy = 1 [default = 0];
  if (has_energy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->energy(), target);
  }
  
  // optional double Px = 2 [default = 0];
  if (has_px()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->px(), target);
  }
  
  // optional double Py = 3 [default = 0];
  if (has_py()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->py(), target);
  }
  
  // optional double Pz = 4 [default = 0];
  if (has_pz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->pz(), target);
  }
  
  // optional double Charge = 5 [default = 0];
  if (has_charge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->charge(), target);
  }
  
  // optional double Mass = 6 [default = 0];
  if (has_mass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->mass(), target);
  }
  
  // optional double Eta = 7 [default = 0];
  if (has_eta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->eta(), target);
  }
  
  // optional double Phi = 8 [default = 0];
  if (has_phi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->phi(), target);
  }
  
  // optional double Pt = 9 [default = 0];
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->pt(), target);
  }
  
  // optional double EMF = 10 [default = 0];
  if (has_emf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->emf(), target);
  }
  
  // optional double HADF = 11 [default = 0];
  if (has_hadf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->hadf(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GenJet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double Energy = 1 [default = 0];
    if (has_energy()) {
      total_size += 1 + 8;
    }
    
    // optional double Px = 2 [default = 0];
    if (has_px()) {
      total_size += 1 + 8;
    }
    
    // optional double Py = 3 [default = 0];
    if (has_py()) {
      total_size += 1 + 8;
    }
    
    // optional double Pz = 4 [default = 0];
    if (has_pz()) {
      total_size += 1 + 8;
    }
    
    // optional double Charge = 5 [default = 0];
    if (has_charge()) {
      total_size += 1 + 8;
    }
    
    // optional double Mass = 6 [default = 0];
    if (has_mass()) {
      total_size += 1 + 8;
    }
    
    // optional double Eta = 7 [default = 0];
    if (has_eta()) {
      total_size += 1 + 8;
    }
    
    // optional double Phi = 8 [default = 0];
    if (has_phi()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double Pt = 9 [default = 0];
    if (has_pt()) {
      total_size += 1 + 8;
    }
    
    // optional double EMF = 10 [default = 0];
    if (has_emf()) {
      total_size += 1 + 8;
    }
    
    // optional double HADF = 11 [default = 0];
    if (has_hadf()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GenJet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GenJet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GenJet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GenJet::MergeFrom(const GenJet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_energy()) {
      set_energy(from.energy());
    }
    if (from.has_px()) {
      set_px(from.px());
    }
    if (from.has_py()) {
      set_py(from.py());
    }
    if (from.has_pz()) {
      set_pz(from.pz());
    }
    if (from.has_charge()) {
      set_charge(from.charge());
    }
    if (from.has_mass()) {
      set_mass(from.mass());
    }
    if (from.has_eta()) {
      set_eta(from.eta());
    }
    if (from.has_phi()) {
      set_phi(from.phi());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pt()) {
      set_pt(from.pt());
    }
    if (from.has_emf()) {
      set_emf(from.emf());
    }
    if (from.has_hadf()) {
      set_hadf(from.hadf());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GenJet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenJet::CopyFrom(const GenJet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenJet::IsInitialized() const {
  
  return true;
}

void GenJet::Swap(GenJet* other) {
  if (other != this) {
    std::swap(energy_, other->energy_);
    std::swap(px_, other->px_);
    std::swap(py_, other->py_);
    std::swap(pz_, other->pz_);
    std::swap(charge_, other->charge_);
    std::swap(mass_, other->mass_);
    std::swap(eta_, other->eta_);
    std::swap(phi_, other->phi_);
    std::swap(pt_, other->pt_);
    std::swap(emf_, other->emf_);
    std::swap(hadf_, other->hadf_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GenJet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GenJet_descriptor_;
  metadata.reflection = GenJet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GenParticle::kEnergyFieldNumber;
const int GenParticle::kPxFieldNumber;
const int GenParticle::kPyFieldNumber;
const int GenParticle::kPzFieldNumber;
const int GenParticle::kChargeFieldNumber;
const int GenParticle::kMassFieldNumber;
const int GenParticle::kEtaFieldNumber;
const int GenParticle::kPhiFieldNumber;
const int GenParticle::kPtFieldNumber;
const int GenParticle::kPdgIdFieldNumber;
const int GenParticle::kVXFieldNumber;
const int GenParticle::kVYFieldNumber;
const int GenParticle::kVZFieldNumber;
const int GenParticle::kNumDaughtFieldNumber;
const int GenParticle::kStatusFieldNumber;
const int GenParticle::kMotherIndexFieldNumber;
#endif  // !_MSC_VER

GenParticle::GenParticle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GenParticle::InitAsDefaultInstance() {
}

GenParticle::GenParticle(const GenParticle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GenParticle::SharedCtor() {
  _cached_size_ = 0;
  energy_ = 0;
  px_ = 0;
  py_ = 0;
  pz_ = 0;
  charge_ = 0;
  mass_ = 0;
  eta_ = 0;
  phi_ = 0;
  pt_ = 0;
  pdgid_ = 0;
  vx_ = 0;
  vy_ = 0;
  vz_ = 0;
  numdaught_ = 0;
  status_ = 0;
  motherindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GenParticle::~GenParticle() {
  SharedDtor();
}

void GenParticle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GenParticle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GenParticle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GenParticle_descriptor_;
}

const GenParticle& GenParticle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EventCollection_2eproto();  return *default_instance_;
}

GenParticle* GenParticle::default_instance_ = NULL;

GenParticle* GenParticle::New() const {
  return new GenParticle;
}

void GenParticle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    energy_ = 0;
    px_ = 0;
    py_ = 0;
    pz_ = 0;
    charge_ = 0;
    mass_ = 0;
    eta_ = 0;
    phi_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    pt_ = 0;
    pdgid_ = 0;
    vx_ = 0;
    vy_ = 0;
    vz_ = 0;
    numdaught_ = 0;
    status_ = 0;
    motherindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GenParticle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double Energy = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &energy_)));
          set_has_energy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_Px;
        break;
      }
      
      // optional double Px = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Px:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &px_)));
          set_has_px();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_Py;
        break;
      }
      
      // optional double Py = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Py:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &py_)));
          set_has_py();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_Pz;
        break;
      }
      
      // optional double Pz = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Pz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pz_)));
          set_has_pz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_Charge;
        break;
      }
      
      // optional double Charge = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Charge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &charge_)));
          set_has_charge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_Mass;
        break;
      }
      
      // optional double Mass = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Mass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mass_)));
          set_has_mass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_Eta;
        break;
      }
      
      // optional double Eta = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Eta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &eta_)));
          set_has_eta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_Phi;
        break;
      }
      
      // optional double Phi = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Phi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &phi_)));
          set_has_phi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_Pt;
        break;
      }
      
      // optional double Pt = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Pt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pt_)));
          set_has_pt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_PdgId;
        break;
      }
      
      // optional int32 PdgId = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PdgId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pdgid_)));
          set_has_pdgid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_VX;
        break;
      }
      
      // optional double VX = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_VX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vx_)));
          set_has_vx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_VY;
        break;
      }
      
      // optional double VY = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_VY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vy_)));
          set_has_vy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_VZ;
        break;
      }
      
      // optional double VZ = 13 [default = 0];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_VZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vz_)));
          set_has_vz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_NumDaught;
        break;
      }
      
      // optional int32 NumDaught = 14 [default = 0];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NumDaught:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numdaught_)));
          set_has_numdaught();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_Status;
        break;
      }
      
      // optional int32 Status = 15 [default = 0];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_MotherIndex;
        break;
      }
      
      // optional int32 MotherIndex = 16 [default = 0];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MotherIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &motherindex_)));
          set_has_motherindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GenParticle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double Energy = 1 [default = 0];
  if (has_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->energy(), output);
  }
  
  // optional double Px = 2 [default = 0];
  if (has_px()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->px(), output);
  }
  
  // optional double Py = 3 [default = 0];
  if (has_py()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->py(), output);
  }
  
  // optional double Pz = 4 [default = 0];
  if (has_pz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->pz(), output);
  }
  
  // optional double Charge = 5 [default = 0];
  if (has_charge()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->charge(), output);
  }
  
  // optional double Mass = 6 [default = 0];
  if (has_mass()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->mass(), output);
  }
  
  // optional double Eta = 7 [default = 0];
  if (has_eta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->eta(), output);
  }
  
  // optional double Phi = 8 [default = 0];
  if (has_phi()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->phi(), output);
  }
  
  // optional double Pt = 9 [default = 0];
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->pt(), output);
  }
  
  // optional int32 PdgId = 10 [default = 0];
  if (has_pdgid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->pdgid(), output);
  }
  
  // optional double VX = 11 [default = 0];
  if (has_vx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->vx(), output);
  }
  
  // optional double VY = 12 [default = 0];
  if (has_vy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->vy(), output);
  }
  
  // optional double VZ = 13 [default = 0];
  if (has_vz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->vz(), output);
  }
  
  // optional int32 NumDaught = 14 [default = 0];
  if (has_numdaught()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->numdaught(), output);
  }
  
  // optional int32 Status = 15 [default = 0];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->status(), output);
  }
  
  // optional int32 MotherIndex = 16 [default = 0];
  if (has_motherindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->motherindex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GenParticle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double Energy = 1 [default = 0];
  if (has_energy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->energy(), target);
  }
  
  // optional double Px = 2 [default = 0];
  if (has_px()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->px(), target);
  }
  
  // optional double Py = 3 [default = 0];
  if (has_py()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->py(), target);
  }
  
  // optional double Pz = 4 [default = 0];
  if (has_pz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->pz(), target);
  }
  
  // optional double Charge = 5 [default = 0];
  if (has_charge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->charge(), target);
  }
  
  // optional double Mass = 6 [default = 0];
  if (has_mass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->mass(), target);
  }
  
  // optional double Eta = 7 [default = 0];
  if (has_eta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->eta(), target);
  }
  
  // optional double Phi = 8 [default = 0];
  if (has_phi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->phi(), target);
  }
  
  // optional double Pt = 9 [default = 0];
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->pt(), target);
  }
  
  // optional int32 PdgId = 10 [default = 0];
  if (has_pdgid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->pdgid(), target);
  }
  
  // optional double VX = 11 [default = 0];
  if (has_vx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->vx(), target);
  }
  
  // optional double VY = 12 [default = 0];
  if (has_vy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->vy(), target);
  }
  
  // optional double VZ = 13 [default = 0];
  if (has_vz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->vz(), target);
  }
  
  // optional int32 NumDaught = 14 [default = 0];
  if (has_numdaught()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->numdaught(), target);
  }
  
  // optional int32 Status = 15 [default = 0];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->status(), target);
  }
  
  // optional int32 MotherIndex = 16 [default = 0];
  if (has_motherindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->motherindex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GenParticle::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double Energy = 1 [default = 0];
    if (has_energy()) {
      total_size += 1 + 8;
    }
    
    // optional double Px = 2 [default = 0];
    if (has_px()) {
      total_size += 1 + 8;
    }
    
    // optional double Py = 3 [default = 0];
    if (has_py()) {
      total_size += 1 + 8;
    }
    
    // optional double Pz = 4 [default = 0];
    if (has_pz()) {
      total_size += 1 + 8;
    }
    
    // optional double Charge = 5 [default = 0];
    if (has_charge()) {
      total_size += 1 + 8;
    }
    
    // optional double Mass = 6 [default = 0];
    if (has_mass()) {
      total_size += 1 + 8;
    }
    
    // optional double Eta = 7 [default = 0];
    if (has_eta()) {
      total_size += 1 + 8;
    }
    
    // optional double Phi = 8 [default = 0];
    if (has_phi()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double Pt = 9 [default = 0];
    if (has_pt()) {
      total_size += 1 + 8;
    }
    
    // optional int32 PdgId = 10 [default = 0];
    if (has_pdgid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pdgid());
    }
    
    // optional double VX = 11 [default = 0];
    if (has_vx()) {
      total_size += 1 + 8;
    }
    
    // optional double VY = 12 [default = 0];
    if (has_vy()) {
      total_size += 1 + 8;
    }
    
    // optional double VZ = 13 [default = 0];
    if (has_vz()) {
      total_size += 1 + 8;
    }
    
    // optional int32 NumDaught = 14 [default = 0];
    if (has_numdaught()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numdaught());
    }
    
    // optional int32 Status = 15 [default = 0];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }
    
    // optional int32 MotherIndex = 16 [default = 0];
    if (has_motherindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->motherindex());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GenParticle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GenParticle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GenParticle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GenParticle::MergeFrom(const GenParticle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_energy()) {
      set_energy(from.energy());
    }
    if (from.has_px()) {
      set_px(from.px());
    }
    if (from.has_py()) {
      set_py(from.py());
    }
    if (from.has_pz()) {
      set_pz(from.pz());
    }
    if (from.has_charge()) {
      set_charge(from.charge());
    }
    if (from.has_mass()) {
      set_mass(from.mass());
    }
    if (from.has_eta()) {
      set_eta(from.eta());
    }
    if (from.has_phi()) {
      set_phi(from.phi());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pt()) {
      set_pt(from.pt());
    }
    if (from.has_pdgid()) {
      set_pdgid(from.pdgid());
    }
    if (from.has_vx()) {
      set_vx(from.vx());
    }
    if (from.has_vy()) {
      set_vy(from.vy());
    }
    if (from.has_vz()) {
      set_vz(from.vz());
    }
    if (from.has_numdaught()) {
      set_numdaught(from.numdaught());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_motherindex()) {
      set_motherindex(from.motherindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GenParticle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenParticle::CopyFrom(const GenParticle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenParticle::IsInitialized() const {
  
  return true;
}

void GenParticle::Swap(GenParticle* other) {
  if (other != this) {
    std::swap(energy_, other->energy_);
    std::swap(px_, other->px_);
    std::swap(py_, other->py_);
    std::swap(pz_, other->pz_);
    std::swap(charge_, other->charge_);
    std::swap(mass_, other->mass_);
    std::swap(eta_, other->eta_);
    std::swap(phi_, other->phi_);
    std::swap(pt_, other->pt_);
    std::swap(pdgid_, other->pdgid_);
    std::swap(vx_, other->vx_);
    std::swap(vy_, other->vy_);
    std::swap(vz_, other->vz_);
    std::swap(numdaught_, other->numdaught_);
    std::swap(status_, other->status_);
    std::swap(motherindex_, other->motherindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GenParticle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GenParticle_descriptor_;
  metadata.reflection = GenParticle_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Electron_ElectronAlgorithm_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Electron_ElectronAlgorithm_descriptor_;
}
bool Electron_ElectronAlgorithm_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Electron_ElectronAlgorithm Electron::Calo;
const Electron_ElectronAlgorithm Electron::ParticleFlow;
const Electron_ElectronAlgorithm Electron::ElectronAlgorithm_MIN;
const Electron_ElectronAlgorithm Electron::ElectronAlgorithm_MAX;
const int Electron::ElectronAlgorithm_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Electron_GSFTrack::kD0FieldNumber;
const int Electron_GSFTrack::kEtaFieldNumber;
const int Electron_GSFTrack::kPhiFieldNumber;
const int Electron_GSFTrack::kThetaFieldNumber;
const int Electron_GSFTrack::kChargeFieldNumber;
const int Electron_GSFTrack::kPtFieldNumber;
#endif  // !_MSC_VER

Electron_GSFTrack::Electron_GSFTrack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Electron_GSFTrack::InitAsDefaultInstance() {
}

Electron_GSFTrack::Electron_GSFTrack(const Electron_GSFTrack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Electron_GSFTrack::SharedCtor() {
  _cached_size_ = 0;
  d0_ = 0;
  eta_ = 0;
  phi_ = 0;
  theta_ = 0;
  charge_ = 0;
  pt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Electron_GSFTrack::~Electron_GSFTrack() {
  SharedDtor();
}

void Electron_GSFTrack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Electron_GSFTrack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Electron_GSFTrack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Electron_GSFTrack_descriptor_;
}

const Electron_GSFTrack& Electron_GSFTrack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EventCollection_2eproto();  return *default_instance_;
}

Electron_GSFTrack* Electron_GSFTrack::default_instance_ = NULL;

Electron_GSFTrack* Electron_GSFTrack::New() const {
  return new Electron_GSFTrack;
}

void Electron_GSFTrack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    d0_ = 0;
    eta_ = 0;
    phi_ = 0;
    theta_ = 0;
    charge_ = 0;
    pt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Electron_GSFTrack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double d0 = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &d0_)));
          set_has_d0();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_Eta;
        break;
      }
      
      // optional double Eta = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Eta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &eta_)));
          set_has_eta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_Phi;
        break;
      }
      
      // optional double Phi = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Phi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &phi_)));
          set_has_phi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_Theta;
        break;
      }
      
      // optional double Theta = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Theta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &theta_)));
          set_has_theta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Charge;
        break;
      }
      
      // optional int32 Charge = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Charge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &charge_)));
          set_has_charge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_Pt;
        break;
      }
      
      // optional double Pt = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Pt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pt_)));
          set_has_pt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Electron_GSFTrack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double d0 = 1 [default = 0];
  if (has_d0()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->d0(), output);
  }
  
  // optional double Eta = 2 [default = 0];
  if (has_eta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->eta(), output);
  }
  
  // optional double Phi = 3 [default = 0];
  if (has_phi()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->phi(), output);
  }
  
  // optional double Theta = 4 [default = 0];
  if (has_theta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->theta(), output);
  }
  
  // optional int32 Charge = 5 [default = 0];
  if (has_charge()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->charge(), output);
  }
  
  // optional double Pt = 6 [default = 0];
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->pt(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Electron_GSFTrack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double d0 = 1 [default = 0];
  if (has_d0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->d0(), target);
  }
  
  // optional double Eta = 2 [default = 0];
  if (has_eta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->eta(), target);
  }
  
  // optional double Phi = 3 [default = 0];
  if (has_phi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->phi(), target);
  }
  
  // optional double Theta = 4 [default = 0];
  if (has_theta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->theta(), target);
  }
  
  // optional int32 Charge = 5 [default = 0];
  if (has_charge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->charge(), target);
  }
  
  // optional double Pt = 6 [default = 0];
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->pt(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Electron_GSFTrack::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double d0 = 1 [default = 0];
    if (has_d0()) {
      total_size += 1 + 8;
    }
    
    // optional double Eta = 2 [default = 0];
    if (has_eta()) {
      total_size += 1 + 8;
    }
    
    // optional double Phi = 3 [default = 0];
    if (has_phi()) {
      total_size += 1 + 8;
    }
    
    // optional double Theta = 4 [default = 0];
    if (has_theta()) {
      total_size += 1 + 8;
    }
    
    // optional int32 Charge = 5 [default = 0];
    if (has_charge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->charge());
    }
    
    // optional double Pt = 6 [default = 0];
    if (has_pt()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Electron_GSFTrack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Electron_GSFTrack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Electron_GSFTrack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Electron_GSFTrack::MergeFrom(const Electron_GSFTrack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_d0()) {
      set_d0(from.d0());
    }
    if (from.has_eta()) {
      set_eta(from.eta());
    }
    if (from.has_phi()) {
      set_phi(from.phi());
    }
    if (from.has_theta()) {
      set_theta(from.theta());
    }
    if (from.has_charge()) {
      set_charge(from.charge());
    }
    if (from.has_pt()) {
      set_pt(from.pt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Electron_GSFTrack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Electron_GSFTrack::CopyFrom(const Electron_GSFTrack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Electron_GSFTrack::IsInitialized() const {
  
  return true;
}

void Electron_GSFTrack::Swap(Electron_GSFTrack* other) {
  if (other != this) {
    std::swap(d0_, other->d0_);
    std::swap(eta_, other->eta_);
    std::swap(phi_, other->phi_);
    std::swap(theta_, other->theta_);
    std::swap(charge_, other->charge_);
    std::swap(pt_, other->pt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Electron_GSFTrack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Electron_GSFTrack_descriptor_;
  metadata.reflection = Electron_GSFTrack_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Electron::kEnergyFieldNumber;
const int Electron::kPxFieldNumber;
const int Electron::kPyFieldNumber;
const int Electron::kPzFieldNumber;
const int Electron::kChargeFieldNumber;
const int Electron::kMassFieldNumber;
const int Electron::kTypeFieldNumber;
const int Electron::kEtaFieldNumber;
const int Electron::kPhiFieldNumber;
const int Electron::kPtFieldNumber;
const int Electron::kCaloEnergyFieldNumber;
const int Electron::kHoEFieldNumber;
const int Electron::kESeedClusterOverPoutFieldNumber;
const int Electron::kEoverPFieldNumber;
const int Electron::kFbremFieldNumber;
const int Electron::kSigmaEtaEtaFieldNumber;
const int Electron::kSigmaIEtaIEtaFieldNumber;
const int Electron::kDeltaPhiTrkSCFieldNumber;
const int Electron::kDeltaEtaTrkSCFieldNumber;
const int Electron::kTrkIso03FieldNumber;
const int Electron::kEcalIso03FieldNumber;
const int Electron::kHcalIso03FieldNumber;
const int Electron::kTrkIsoFieldNumber;
const int Electron::kEcalIsoFieldNumber;
const int Electron::kHcalIsoFieldNumber;
const int Electron::kDBFieldNumber;
const int Electron::kClosestCtfTrackRefFieldNumber;
const int Electron::kShFracInnerHitsFieldNumber;
const int Electron::kTrackFieldNumber;
const int Electron::kEcalIsoHeepFieldNumber;
const int Electron::kHcalIsoD1HeepFieldNumber;
const int Electron::kHcalIsoD2HeepFieldNumber;
const int Electron::kTrkIsoHeepFieldNumber;
const int Electron::kMissingHitsFieldNumber;
const int Electron::kDistFieldNumber;
const int Electron::kDCotThetaFieldNumber;
const int Electron::kSCEtaFieldNumber;
const int Electron::kSCPhiFieldNumber;
const int Electron::kSCPtFieldNumber;
const int Electron::kSCRawEnergyFieldNumber;
const int Electron::kVtxIndexFieldNumber;
const int Electron::kVtxDistXYFieldNumber;
const int Electron::kVtxDistZFieldNumber;
const int Electron::kVertexXFieldNumber;
const int Electron::kVertexYFieldNumber;
const int Electron::kVertexZFieldNumber;
const int Electron::kPassIDFieldNumber;
const int Electron::kPfChargedHadronIsoFieldNumber;
const int Electron::kPfNeutralHadronIsoFieldNumber;
const int Electron::kPFGammaIsoFieldNumber;
#endif  // !_MSC_VER

Electron::Electron()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Electron::InitAsDefaultInstance() {
}

Electron::Electron(const Electron& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Electron::SharedCtor() {
  _cached_size_ = 0;
  energy_ = 0;
  px_ = 0;
  py_ = 0;
  pz_ = 0;
  charge_ = 0;
  mass_ = 0;
  type_ = 1;
  eta_ = 0;
  phi_ = 0;
  pt_ = 0;
  caloenergy_ = 0;
  hoe_ = 0;
  eseedclusteroverpout_ = 0;
  eoverp_ = 0;
  fbrem_ = 0;
  sigmaetaeta_ = 0;
  sigmaietaieta_ = 0;
  deltaphitrksc_ = 0;
  deltaetatrksc_ = 0;
  trkiso03_ = 0;
  ecaliso03_ = 0;
  hcaliso03_ = 0;
  trkiso_ = 0;
  ecaliso_ = 0;
  hcaliso_ = 0;
  db_ = 0;
  closestctftrackref_ = 0;
  shfracinnerhits_ = 0;
  ecalisoheep_ = 0;
  hcalisod1heep_ = 0;
  hcalisod2heep_ = 0;
  trkisoheep_ = 0;
  missinghits_ = 0;
  dist_ = 0;
  dcottheta_ = 0;
  sceta_ = 0;
  scphi_ = 0;
  scpt_ = 0;
  scrawenergy_ = 0;
  vtxindex_ = 0;
  vtxdistxy_ = 0;
  vtxdistz_ = 0;
  vertexx_ = 0;
  vertexy_ = 0;
  vertexz_ = 0;
  passid_ = 0;
  pfchargedhadroniso_ = 0;
  pfneutralhadroniso_ = 0;
  pfgammaiso_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Electron::~Electron() {
  SharedDtor();
}

void Electron::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Electron::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Electron::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Electron_descriptor_;
}

const Electron& Electron::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EventCollection_2eproto();  return *default_instance_;
}

Electron* Electron::default_instance_ = NULL;

Electron* Electron::New() const {
  return new Electron;
}

void Electron::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    energy_ = 0;
    px_ = 0;
    py_ = 0;
    pz_ = 0;
    charge_ = 0;
    mass_ = 0;
    type_ = 1;
    eta_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    phi_ = 0;
    pt_ = 0;
    caloenergy_ = 0;
    hoe_ = 0;
    eseedclusteroverpout_ = 0;
    eoverp_ = 0;
    fbrem_ = 0;
    sigmaetaeta_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    sigmaietaieta_ = 0;
    deltaphitrksc_ = 0;
    deltaetatrksc_ = 0;
    trkiso03_ = 0;
    ecaliso03_ = 0;
    hcaliso03_ = 0;
    trkiso_ = 0;
    ecaliso_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    hcaliso_ = 0;
    db_ = 0;
    closestctftrackref_ = 0;
    shfracinnerhits_ = 0;
    ecalisoheep_ = 0;
    hcalisod1heep_ = 0;
    hcalisod2heep_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    trkisoheep_ = 0;
    missinghits_ = 0;
    dist_ = 0;
    dcottheta_ = 0;
    sceta_ = 0;
    scphi_ = 0;
    scpt_ = 0;
    scrawenergy_ = 0;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    vtxindex_ = 0;
    vtxdistxy_ = 0;
    vtxdistz_ = 0;
    vertexx_ = 0;
    vertexy_ = 0;
    vertexz_ = 0;
    passid_ = 0;
    pfchargedhadroniso_ = 0;
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    pfneutralhadroniso_ = 0;
    pfgammaiso_ = 0;
  }
  track_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Electron::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double Energy = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &energy_)));
          set_has_energy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_Px;
        break;
      }
      
      // optional double Px = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Px:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &px_)));
          set_has_px();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_Py;
        break;
      }
      
      // optional double Py = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Py:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &py_)));
          set_has_py();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_Pz;
        break;
      }
      
      // optional double Pz = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Pz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pz_)));
          set_has_pz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_Charge;
        break;
      }
      
      // optional double Charge = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Charge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &charge_)));
          set_has_charge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_Mass;
        break;
      }
      
      // optional int32 Mass = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Mass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mass_)));
          set_has_mass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_type;
        break;
      }
      
      // optional .HEP.Electron.ElectronAlgorithm type = 7 [default = ParticleFlow];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HEP::Electron_ElectronAlgorithm_IsValid(value)) {
            set_type(static_cast< ::HEP::Electron_ElectronAlgorithm >(value));
          } else {
            mutable_unknown_fields()->AddVarint(7, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_Eta;
        break;
      }
      
      // optional double Eta = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Eta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &eta_)));
          set_has_eta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_Phi;
        break;
      }
      
      // optional double Phi = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Phi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &phi_)));
          set_has_phi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_Pt;
        break;
      }
      
      // optional double Pt = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Pt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pt_)));
          set_has_pt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_CaloEnergy;
        break;
      }
      
      // optional double CaloEnergy = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_CaloEnergy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &caloenergy_)));
          set_has_caloenergy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_HoE;
        break;
      }
      
      // optional double HoE = 13 [default = 0];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_HoE:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hoe_)));
          set_has_hoe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_eSeedClusterOverPout;
        break;
      }
      
      // optional double eSeedClusterOverPout = 14 [default = 0];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_eSeedClusterOverPout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &eseedclusteroverpout_)));
          set_has_eseedclusteroverpout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_EoverP;
        break;
      }
      
      // optional double EoverP = 15 [default = 0];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_EoverP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &eoverp_)));
          set_has_eoverp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_fbrem;
        break;
      }
      
      // optional double fbrem = 16 [default = 0];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_fbrem:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &fbrem_)));
          set_has_fbrem();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(137)) goto parse_SigmaEtaEta;
        break;
      }
      
      // optional double SigmaEtaEta = 17 [default = 0];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_SigmaEtaEta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sigmaetaeta_)));
          set_has_sigmaetaeta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(145)) goto parse_SigmaIEtaIEta;
        break;
      }
      
      // optional double SigmaIEtaIEta = 18 [default = 0];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_SigmaIEtaIEta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sigmaietaieta_)));
          set_has_sigmaietaieta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(153)) goto parse_DeltaPhiTrkSC;
        break;
      }
      
      // optional double DeltaPhiTrkSC = 19 [default = 0];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_DeltaPhiTrkSC:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &deltaphitrksc_)));
          set_has_deltaphitrksc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(161)) goto parse_DeltaEtaTrkSC;
        break;
      }
      
      // optional double DeltaEtaTrkSC = 20 [default = 0];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_DeltaEtaTrkSC:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &deltaetatrksc_)));
          set_has_deltaetatrksc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(169)) goto parse_TrkIso03;
        break;
      }
      
      // optional double TrkIso03 = 21 [default = 0];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_TrkIso03:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &trkiso03_)));
          set_has_trkiso03();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(177)) goto parse_EcalIso03;
        break;
      }
      
      // optional double EcalIso03 = 22 [default = 0];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_EcalIso03:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ecaliso03_)));
          set_has_ecaliso03();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(185)) goto parse_HcalIso03;
        break;
      }
      
      // optional double HcalIso03 = 23 [default = 0];
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_HcalIso03:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hcaliso03_)));
          set_has_hcaliso03();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(193)) goto parse_TrkIso;
        break;
      }
      
      // optional double TrkIso = 24 [default = 0];
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_TrkIso:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &trkiso_)));
          set_has_trkiso();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(201)) goto parse_EcalIso;
        break;
      }
      
      // optional double EcalIso = 25 [default = 0];
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_EcalIso:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ecaliso_)));
          set_has_ecaliso();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(209)) goto parse_HcalIso;
        break;
      }
      
      // optional double HcalIso = 26 [default = 0];
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_HcalIso:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hcaliso_)));
          set_has_hcaliso();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(217)) goto parse_dB;
        break;
      }
      
      // optional double dB = 27 [default = 0];
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &db_)));
          set_has_db();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_closestCtfTrackRef;
        break;
      }
      
      // optional int32 closestCtfTrackRef = 28 [default = 0];
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_closestCtfTrackRef:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &closestctftrackref_)));
          set_has_closestctftrackref();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(233)) goto parse_shFracInnerHits;
        break;
      }
      
      // optional double shFracInnerHits = 29 [default = 0];
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_shFracInnerHits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &shfracinnerhits_)));
          set_has_shfracinnerhits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_track;
        break;
      }
      
      // repeated .HEP.Electron.GSFTrack track = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_track:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_track()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_track;
        if (input->ExpectTag(249)) goto parse_EcalIsoHeep;
        break;
      }
      
      // optional double EcalIsoHeep = 31 [default = 0];
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_EcalIsoHeep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ecalisoheep_)));
          set_has_ecalisoheep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(257)) goto parse_HcalIsoD1Heep;
        break;
      }
      
      // optional double HcalIsoD1Heep = 32 [default = 0];
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_HcalIsoD1Heep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hcalisod1heep_)));
          set_has_hcalisod1heep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(265)) goto parse_HcalIsoD2Heep;
        break;
      }
      
      // optional double HcalIsoD2Heep = 33 [default = 0];
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_HcalIsoD2Heep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hcalisod2heep_)));
          set_has_hcalisod2heep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(273)) goto parse_TrkIsoHeep;
        break;
      }
      
      // optional double TrkIsoHeep = 34 [default = 0];
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_TrkIsoHeep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &trkisoheep_)));
          set_has_trkisoheep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_MissingHits;
        break;
      }
      
      // optional int32 MissingHits = 35 [default = 0];
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MissingHits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &missinghits_)));
          set_has_missinghits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(289)) goto parse_Dist;
        break;
      }
      
      // optional double Dist = 36 [default = 0];
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Dist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dist_)));
          set_has_dist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(297)) goto parse_DCotTheta;
        break;
      }
      
      // optional double DCotTheta = 37 [default = 0];
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_DCotTheta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dcottheta_)));
          set_has_dcottheta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(305)) goto parse_SCEta;
        break;
      }
      
      // optional double SCEta = 38 [default = 0];
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_SCEta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sceta_)));
          set_has_sceta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(313)) goto parse_SCPhi;
        break;
      }
      
      // optional double SCPhi = 39 [default = 0];
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_SCPhi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &scphi_)));
          set_has_scphi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(321)) goto parse_SCPt;
        break;
      }
      
      // optional double SCPt = 40 [default = 0];
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_SCPt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &scpt_)));
          set_has_scpt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(329)) goto parse_SCRawEnergy;
        break;
      }
      
      // optional double SCRawEnergy = 41 [default = 0];
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_SCRawEnergy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &scrawenergy_)));
          set_has_scrawenergy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_VtxIndex;
        break;
      }
      
      // optional int32 VtxIndex = 42 [default = 0];
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VtxIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vtxindex_)));
          set_has_vtxindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(345)) goto parse_VtxDistXY;
        break;
      }
      
      // optional double VtxDistXY = 43 [default = 0];
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_VtxDistXY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vtxdistxy_)));
          set_has_vtxdistxy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(353)) goto parse_VtxDistZ;
        break;
      }
      
      // optional double VtxDistZ = 44 [default = 0];
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_VtxDistZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vtxdistz_)));
          set_has_vtxdistz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(361)) goto parse_VertexX;
        break;
      }
      
      // optional double VertexX = 45 [default = 0];
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_VertexX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vertexx_)));
          set_has_vertexx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(369)) goto parse_VertexY;
        break;
      }
      
      // optional double VertexY = 46 [default = 0];
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_VertexY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vertexy_)));
          set_has_vertexy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(377)) goto parse_VertexZ;
        break;
      }
      
      // optional double VertexZ = 47 [default = 0];
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_VertexZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vertexz_)));
          set_has_vertexz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(384)) goto parse_PassID;
        break;
      }
      
      // optional int32 PassID = 48 [default = 0];
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PassID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &passid_)));
          set_has_passid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(393)) goto parse_PfChargedHadronIso;
        break;
      }
      
      // optional double PfChargedHadronIso = 49 [default = 0];
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PfChargedHadronIso:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pfchargedhadroniso_)));
          set_has_pfchargedhadroniso();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(401)) goto parse_PfNeutralHadronIso;
        break;
      }
      
      // optional double PfNeutralHadronIso = 50 [default = 0];
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PfNeutralHadronIso:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pfneutralhadroniso_)));
          set_has_pfneutralhadroniso();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(409)) goto parse_PFGammaIso;
        break;
      }
      
      // optional double PFGammaIso = 51 [default = 0];
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PFGammaIso:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pfgammaiso_)));
          set_has_pfgammaiso();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Electron::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double Energy = 1 [default = 0];
  if (has_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->energy(), output);
  }
  
  // optional double Px = 2 [default = 0];
  if (has_px()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->px(), output);
  }
  
  // optional double Py = 3 [default = 0];
  if (has_py()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->py(), output);
  }
  
  // optional double Pz = 4 [default = 0];
  if (has_pz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->pz(), output);
  }
  
  // optional double Charge = 5 [default = 0];
  if (has_charge()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->charge(), output);
  }
  
  // optional int32 Mass = 6 [default = 0];
  if (has_mass()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->mass(), output);
  }
  
  // optional .HEP.Electron.ElectronAlgorithm type = 7 [default = ParticleFlow];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->type(), output);
  }
  
  // optional double Eta = 8 [default = 0];
  if (has_eta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->eta(), output);
  }
  
  // optional double Phi = 9 [default = 0];
  if (has_phi()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->phi(), output);
  }
  
  // optional double Pt = 10 [default = 0];
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->pt(), output);
  }
  
  // optional double CaloEnergy = 12 [default = 0];
  if (has_caloenergy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->caloenergy(), output);
  }
  
  // optional double HoE = 13 [default = 0];
  if (has_hoe()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->hoe(), output);
  }
  
  // optional double eSeedClusterOverPout = 14 [default = 0];
  if (has_eseedclusteroverpout()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->eseedclusteroverpout(), output);
  }
  
  // optional double EoverP = 15 [default = 0];
  if (has_eoverp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->eoverp(), output);
  }
  
  // optional double fbrem = 16 [default = 0];
  if (has_fbrem()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->fbrem(), output);
  }
  
  // optional double SigmaEtaEta = 17 [default = 0];
  if (has_sigmaetaeta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->sigmaetaeta(), output);
  }
  
  // optional double SigmaIEtaIEta = 18 [default = 0];
  if (has_sigmaietaieta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->sigmaietaieta(), output);
  }
  
  // optional double DeltaPhiTrkSC = 19 [default = 0];
  if (has_deltaphitrksc()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->deltaphitrksc(), output);
  }
  
  // optional double DeltaEtaTrkSC = 20 [default = 0];
  if (has_deltaetatrksc()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->deltaetatrksc(), output);
  }
  
  // optional double TrkIso03 = 21 [default = 0];
  if (has_trkiso03()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->trkiso03(), output);
  }
  
  // optional double EcalIso03 = 22 [default = 0];
  if (has_ecaliso03()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->ecaliso03(), output);
  }
  
  // optional double HcalIso03 = 23 [default = 0];
  if (has_hcaliso03()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->hcaliso03(), output);
  }
  
  // optional double TrkIso = 24 [default = 0];
  if (has_trkiso()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->trkiso(), output);
  }
  
  // optional double EcalIso = 25 [default = 0];
  if (has_ecaliso()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->ecaliso(), output);
  }
  
  // optional double HcalIso = 26 [default = 0];
  if (has_hcaliso()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->hcaliso(), output);
  }
  
  // optional double dB = 27 [default = 0];
  if (has_db()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->db(), output);
  }
  
  // optional int32 closestCtfTrackRef = 28 [default = 0];
  if (has_closestctftrackref()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->closestctftrackref(), output);
  }
  
  // optional double shFracInnerHits = 29 [default = 0];
  if (has_shfracinnerhits()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->shfracinnerhits(), output);
  }
  
  // repeated .HEP.Electron.GSFTrack track = 30;
  for (int i = 0; i < this->track_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->track(i), output);
  }
  
  // optional double EcalIsoHeep = 31 [default = 0];
  if (has_ecalisoheep()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(31, this->ecalisoheep(), output);
  }
  
  // optional double HcalIsoD1Heep = 32 [default = 0];
  if (has_hcalisod1heep()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(32, this->hcalisod1heep(), output);
  }
  
  // optional double HcalIsoD2Heep = 33 [default = 0];
  if (has_hcalisod2heep()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(33, this->hcalisod2heep(), output);
  }
  
  // optional double TrkIsoHeep = 34 [default = 0];
  if (has_trkisoheep()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(34, this->trkisoheep(), output);
  }
  
  // optional int32 MissingHits = 35 [default = 0];
  if (has_missinghits()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->missinghits(), output);
  }
  
  // optional double Dist = 36 [default = 0];
  if (has_dist()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(36, this->dist(), output);
  }
  
  // optional double DCotTheta = 37 [default = 0];
  if (has_dcottheta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(37, this->dcottheta(), output);
  }
  
  // optional double SCEta = 38 [default = 0];
  if (has_sceta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(38, this->sceta(), output);
  }
  
  // optional double SCPhi = 39 [default = 0];
  if (has_scphi()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(39, this->scphi(), output);
  }
  
  // optional double SCPt = 40 [default = 0];
  if (has_scpt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(40, this->scpt(), output);
  }
  
  // optional double SCRawEnergy = 41 [default = 0];
  if (has_scrawenergy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(41, this->scrawenergy(), output);
  }
  
  // optional int32 VtxIndex = 42 [default = 0];
  if (has_vtxindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(42, this->vtxindex(), output);
  }
  
  // optional double VtxDistXY = 43 [default = 0];
  if (has_vtxdistxy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(43, this->vtxdistxy(), output);
  }
  
  // optional double VtxDistZ = 44 [default = 0];
  if (has_vtxdistz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(44, this->vtxdistz(), output);
  }
  
  // optional double VertexX = 45 [default = 0];
  if (has_vertexx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(45, this->vertexx(), output);
  }
  
  // optional double VertexY = 46 [default = 0];
  if (has_vertexy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(46, this->vertexy(), output);
  }
  
  // optional double VertexZ = 47 [default = 0];
  if (has_vertexz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(47, this->vertexz(), output);
  }
  
  // optional int32 PassID = 48 [default = 0];
  if (has_passid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(48, this->passid(), output);
  }
  
  // optional double PfChargedHadronIso = 49 [default = 0];
  if (has_pfchargedhadroniso()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(49, this->pfchargedhadroniso(), output);
  }
  
  // optional double PfNeutralHadronIso = 50 [default = 0];
  if (has_pfneutralhadroniso()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(50, this->pfneutralhadroniso(), output);
  }
  
  // optional double PFGammaIso = 51 [default = 0];
  if (has_pfgammaiso()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(51, this->pfgammaiso(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Electron::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double Energy = 1 [default = 0];
  if (has_energy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->energy(), target);
  }
  
  // optional double Px = 2 [default = 0];
  if (has_px()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->px(), target);
  }
  
  // optional double Py = 3 [default = 0];
  if (has_py()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->py(), target);
  }
  
  // optional double Pz = 4 [default = 0];
  if (has_pz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->pz(), target);
  }
  
  // optional double Charge = 5 [default = 0];
  if (has_charge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->charge(), target);
  }
  
  // optional int32 Mass = 6 [default = 0];
  if (has_mass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->mass(), target);
  }
  
  // optional .HEP.Electron.ElectronAlgorithm type = 7 [default = ParticleFlow];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->type(), target);
  }
  
  // optional double Eta = 8 [default = 0];
  if (has_eta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->eta(), target);
  }
  
  // optional double Phi = 9 [default = 0];
  if (has_phi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->phi(), target);
  }
  
  // optional double Pt = 10 [default = 0];
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->pt(), target);
  }
  
  // optional double CaloEnergy = 12 [default = 0];
  if (has_caloenergy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->caloenergy(), target);
  }
  
  // optional double HoE = 13 [default = 0];
  if (has_hoe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->hoe(), target);
  }
  
  // optional double eSeedClusterOverPout = 14 [default = 0];
  if (has_eseedclusteroverpout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->eseedclusteroverpout(), target);
  }
  
  // optional double EoverP = 15 [default = 0];
  if (has_eoverp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->eoverp(), target);
  }
  
  // optional double fbrem = 16 [default = 0];
  if (has_fbrem()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->fbrem(), target);
  }
  
  // optional double SigmaEtaEta = 17 [default = 0];
  if (has_sigmaetaeta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->sigmaetaeta(), target);
  }
  
  // optional double SigmaIEtaIEta = 18 [default = 0];
  if (has_sigmaietaieta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->sigmaietaieta(), target);
  }
  
  // optional double DeltaPhiTrkSC = 19 [default = 0];
  if (has_deltaphitrksc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->deltaphitrksc(), target);
  }
  
  // optional double DeltaEtaTrkSC = 20 [default = 0];
  if (has_deltaetatrksc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->deltaetatrksc(), target);
  }
  
  // optional double TrkIso03 = 21 [default = 0];
  if (has_trkiso03()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->trkiso03(), target);
  }
  
  // optional double EcalIso03 = 22 [default = 0];
  if (has_ecaliso03()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->ecaliso03(), target);
  }
  
  // optional double HcalIso03 = 23 [default = 0];
  if (has_hcaliso03()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->hcaliso03(), target);
  }
  
  // optional double TrkIso = 24 [default = 0];
  if (has_trkiso()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->trkiso(), target);
  }
  
  // optional double EcalIso = 25 [default = 0];
  if (has_ecaliso()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->ecaliso(), target);
  }
  
  // optional double HcalIso = 26 [default = 0];
  if (has_hcaliso()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->hcaliso(), target);
  }
  
  // optional double dB = 27 [default = 0];
  if (has_db()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->db(), target);
  }
  
  // optional int32 closestCtfTrackRef = 28 [default = 0];
  if (has_closestctftrackref()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->closestctftrackref(), target);
  }
  
  // optional double shFracInnerHits = 29 [default = 0];
  if (has_shfracinnerhits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->shfracinnerhits(), target);
  }
  
  // repeated .HEP.Electron.GSFTrack track = 30;
  for (int i = 0; i < this->track_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->track(i), target);
  }
  
  // optional double EcalIsoHeep = 31 [default = 0];
  if (has_ecalisoheep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(31, this->ecalisoheep(), target);
  }
  
  // optional double HcalIsoD1Heep = 32 [default = 0];
  if (has_hcalisod1heep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(32, this->hcalisod1heep(), target);
  }
  
  // optional double HcalIsoD2Heep = 33 [default = 0];
  if (has_hcalisod2heep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(33, this->hcalisod2heep(), target);
  }
  
  // optional double TrkIsoHeep = 34 [default = 0];
  if (has_trkisoheep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(34, this->trkisoheep(), target);
  }
  
  // optional int32 MissingHits = 35 [default = 0];
  if (has_missinghits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->missinghits(), target);
  }
  
  // optional double Dist = 36 [default = 0];
  if (has_dist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(36, this->dist(), target);
  }
  
  // optional double DCotTheta = 37 [default = 0];
  if (has_dcottheta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(37, this->dcottheta(), target);
  }
  
  // optional double SCEta = 38 [default = 0];
  if (has_sceta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(38, this->sceta(), target);
  }
  
  // optional double SCPhi = 39 [default = 0];
  if (has_scphi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(39, this->scphi(), target);
  }
  
  // optional double SCPt = 40 [default = 0];
  if (has_scpt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(40, this->scpt(), target);
  }
  
  // optional double SCRawEnergy = 41 [default = 0];
  if (has_scrawenergy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(41, this->scrawenergy(), target);
  }
  
  // optional int32 VtxIndex = 42 [default = 0];
  if (has_vtxindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(42, this->vtxindex(), target);
  }
  
  // optional double VtxDistXY = 43 [default = 0];
  if (has_vtxdistxy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(43, this->vtxdistxy(), target);
  }
  
  // optional double VtxDistZ = 44 [default = 0];
  if (has_vtxdistz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(44, this->vtxdistz(), target);
  }
  
  // optional double VertexX = 45 [default = 0];
  if (has_vertexx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(45, this->vertexx(), target);
  }
  
  // optional double VertexY = 46 [default = 0];
  if (has_vertexy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(46, this->vertexy(), target);
  }
  
  // optional double VertexZ = 47 [default = 0];
  if (has_vertexz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(47, this->vertexz(), target);
  }
  
  // optional int32 PassID = 48 [default = 0];
  if (has_passid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(48, this->passid(), target);
  }
  
  // optional double PfChargedHadronIso = 49 [default = 0];
  if (has_pfchargedhadroniso()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(49, this->pfchargedhadroniso(), target);
  }
  
  // optional double PfNeutralHadronIso = 50 [default = 0];
  if (has_pfneutralhadroniso()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(50, this->pfneutralhadroniso(), target);
  }
  
  // optional double PFGammaIso = 51 [default = 0];
  if (has_pfgammaiso()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(51, this->pfgammaiso(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Electron::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double Energy = 1 [default = 0];
    if (has_energy()) {
      total_size += 1 + 8;
    }
    
    // optional double Px = 2 [default = 0];
    if (has_px()) {
      total_size += 1 + 8;
    }
    
    // optional double Py = 3 [default = 0];
    if (has_py()) {
      total_size += 1 + 8;
    }
    
    // optional double Pz = 4 [default = 0];
    if (has_pz()) {
      total_size += 1 + 8;
    }
    
    // optional double Charge = 5 [default = 0];
    if (has_charge()) {
      total_size += 1 + 8;
    }
    
    // optional int32 Mass = 6 [default = 0];
    if (has_mass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mass());
    }
    
    // optional .HEP.Electron.ElectronAlgorithm type = 7 [default = ParticleFlow];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional double Eta = 8 [default = 0];
    if (has_eta()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double Phi = 9 [default = 0];
    if (has_phi()) {
      total_size += 1 + 8;
    }
    
    // optional double Pt = 10 [default = 0];
    if (has_pt()) {
      total_size += 1 + 8;
    }
    
    // optional double CaloEnergy = 12 [default = 0];
    if (has_caloenergy()) {
      total_size += 1 + 8;
    }
    
    // optional double HoE = 13 [default = 0];
    if (has_hoe()) {
      total_size += 1 + 8;
    }
    
    // optional double eSeedClusterOverPout = 14 [default = 0];
    if (has_eseedclusteroverpout()) {
      total_size += 1 + 8;
    }
    
    // optional double EoverP = 15 [default = 0];
    if (has_eoverp()) {
      total_size += 1 + 8;
    }
    
    // optional double fbrem = 16 [default = 0];
    if (has_fbrem()) {
      total_size += 2 + 8;
    }
    
    // optional double SigmaEtaEta = 17 [default = 0];
    if (has_sigmaetaeta()) {
      total_size += 2 + 8;
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional double SigmaIEtaIEta = 18 [default = 0];
    if (has_sigmaietaieta()) {
      total_size += 2 + 8;
    }
    
    // optional double DeltaPhiTrkSC = 19 [default = 0];
    if (has_deltaphitrksc()) {
      total_size += 2 + 8;
    }
    
    // optional double DeltaEtaTrkSC = 20 [default = 0];
    if (has_deltaetatrksc()) {
      total_size += 2 + 8;
    }
    
    // optional double TrkIso03 = 21 [default = 0];
    if (has_trkiso03()) {
      total_size += 2 + 8;
    }
    
    // optional double EcalIso03 = 22 [default = 0];
    if (has_ecaliso03()) {
      total_size += 2 + 8;
    }
    
    // optional double HcalIso03 = 23 [default = 0];
    if (has_hcaliso03()) {
      total_size += 2 + 8;
    }
    
    // optional double TrkIso = 24 [default = 0];
    if (has_trkiso()) {
      total_size += 2 + 8;
    }
    
    // optional double EcalIso = 25 [default = 0];
    if (has_ecaliso()) {
      total_size += 2 + 8;
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional double HcalIso = 26 [default = 0];
    if (has_hcaliso()) {
      total_size += 2 + 8;
    }
    
    // optional double dB = 27 [default = 0];
    if (has_db()) {
      total_size += 2 + 8;
    }
    
    // optional int32 closestCtfTrackRef = 28 [default = 0];
    if (has_closestctftrackref()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->closestctftrackref());
    }
    
    // optional double shFracInnerHits = 29 [default = 0];
    if (has_shfracinnerhits()) {
      total_size += 2 + 8;
    }
    
    // optional double EcalIsoHeep = 31 [default = 0];
    if (has_ecalisoheep()) {
      total_size += 2 + 8;
    }
    
    // optional double HcalIsoD1Heep = 32 [default = 0];
    if (has_hcalisod1heep()) {
      total_size += 2 + 8;
    }
    
    // optional double HcalIsoD2Heep = 33 [default = 0];
    if (has_hcalisod2heep()) {
      total_size += 2 + 8;
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional double TrkIsoHeep = 34 [default = 0];
    if (has_trkisoheep()) {
      total_size += 2 + 8;
    }
    
    // optional int32 MissingHits = 35 [default = 0];
    if (has_missinghits()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->missinghits());
    }
    
    // optional double Dist = 36 [default = 0];
    if (has_dist()) {
      total_size += 2 + 8;
    }
    
    // optional double DCotTheta = 37 [default = 0];
    if (has_dcottheta()) {
      total_size += 2 + 8;
    }
    
    // optional double SCEta = 38 [default = 0];
    if (has_sceta()) {
      total_size += 2 + 8;
    }
    
    // optional double SCPhi = 39 [default = 0];
    if (has_scphi()) {
      total_size += 2 + 8;
    }
    
    // optional double SCPt = 40 [default = 0];
    if (has_scpt()) {
      total_size += 2 + 8;
    }
    
    // optional double SCRawEnergy = 41 [default = 0];
    if (has_scrawenergy()) {
      total_size += 2 + 8;
    }
    
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional int32 VtxIndex = 42 [default = 0];
    if (has_vtxindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vtxindex());
    }
    
    // optional double VtxDistXY = 43 [default = 0];
    if (has_vtxdistxy()) {
      total_size += 2 + 8;
    }
    
    // optional double VtxDistZ = 44 [default = 0];
    if (has_vtxdistz()) {
      total_size += 2 + 8;
    }
    
    // optional double VertexX = 45 [default = 0];
    if (has_vertexx()) {
      total_size += 2 + 8;
    }
    
    // optional double VertexY = 46 [default = 0];
    if (has_vertexy()) {
      total_size += 2 + 8;
    }
    
    // optional double VertexZ = 47 [default = 0];
    if (has_vertexz()) {
      total_size += 2 + 8;
    }
    
    // optional int32 PassID = 48 [default = 0];
    if (has_passid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->passid());
    }
    
    // optional double PfChargedHadronIso = 49 [default = 0];
    if (has_pfchargedhadroniso()) {
      total_size += 2 + 8;
    }
    
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional double PfNeutralHadronIso = 50 [default = 0];
    if (has_pfneutralhadroniso()) {
      total_size += 2 + 8;
    }
    
    // optional double PFGammaIso = 51 [default = 0];
    if (has_pfgammaiso()) {
      total_size += 2 + 8;
    }
    
  }
  // repeated .HEP.Electron.GSFTrack track = 30;
  total_size += 2 * this->track_size();
  for (int i = 0; i < this->track_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->track(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Electron::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Electron* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Electron*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Electron::MergeFrom(const Electron& from) {
  GOOGLE_CHECK_NE(&from, this);
  track_.MergeFrom(from.track_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_energy()) {
      set_energy(from.energy());
    }
    if (from.has_px()) {
      set_px(from.px());
    }
    if (from.has_py()) {
      set_py(from.py());
    }
    if (from.has_pz()) {
      set_pz(from.pz());
    }
    if (from.has_charge()) {
      set_charge(from.charge());
    }
    if (from.has_mass()) {
      set_mass(from.mass());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_eta()) {
      set_eta(from.eta());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_phi()) {
      set_phi(from.phi());
    }
    if (from.has_pt()) {
      set_pt(from.pt());
    }
    if (from.has_caloenergy()) {
      set_caloenergy(from.caloenergy());
    }
    if (from.has_hoe()) {
      set_hoe(from.hoe());
    }
    if (from.has_eseedclusteroverpout()) {
      set_eseedclusteroverpout(from.eseedclusteroverpout());
    }
    if (from.has_eoverp()) {
      set_eoverp(from.eoverp());
    }
    if (from.has_fbrem()) {
      set_fbrem(from.fbrem());
    }
    if (from.has_sigmaetaeta()) {
      set_sigmaetaeta(from.sigmaetaeta());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_sigmaietaieta()) {
      set_sigmaietaieta(from.sigmaietaieta());
    }
    if (from.has_deltaphitrksc()) {
      set_deltaphitrksc(from.deltaphitrksc());
    }
    if (from.has_deltaetatrksc()) {
      set_deltaetatrksc(from.deltaetatrksc());
    }
    if (from.has_trkiso03()) {
      set_trkiso03(from.trkiso03());
    }
    if (from.has_ecaliso03()) {
      set_ecaliso03(from.ecaliso03());
    }
    if (from.has_hcaliso03()) {
      set_hcaliso03(from.hcaliso03());
    }
    if (from.has_trkiso()) {
      set_trkiso(from.trkiso());
    }
    if (from.has_ecaliso()) {
      set_ecaliso(from.ecaliso());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_hcaliso()) {
      set_hcaliso(from.hcaliso());
    }
    if (from.has_db()) {
      set_db(from.db());
    }
    if (from.has_closestctftrackref()) {
      set_closestctftrackref(from.closestctftrackref());
    }
    if (from.has_shfracinnerhits()) {
      set_shfracinnerhits(from.shfracinnerhits());
    }
    if (from.has_ecalisoheep()) {
      set_ecalisoheep(from.ecalisoheep());
    }
    if (from.has_hcalisod1heep()) {
      set_hcalisod1heep(from.hcalisod1heep());
    }
    if (from.has_hcalisod2heep()) {
      set_hcalisod2heep(from.hcalisod2heep());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_trkisoheep()) {
      set_trkisoheep(from.trkisoheep());
    }
    if (from.has_missinghits()) {
      set_missinghits(from.missinghits());
    }
    if (from.has_dist()) {
      set_dist(from.dist());
    }
    if (from.has_dcottheta()) {
      set_dcottheta(from.dcottheta());
    }
    if (from.has_sceta()) {
      set_sceta(from.sceta());
    }
    if (from.has_scphi()) {
      set_scphi(from.scphi());
    }
    if (from.has_scpt()) {
      set_scpt(from.scpt());
    }
    if (from.has_scrawenergy()) {
      set_scrawenergy(from.scrawenergy());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_vtxindex()) {
      set_vtxindex(from.vtxindex());
    }
    if (from.has_vtxdistxy()) {
      set_vtxdistxy(from.vtxdistxy());
    }
    if (from.has_vtxdistz()) {
      set_vtxdistz(from.vtxdistz());
    }
    if (from.has_vertexx()) {
      set_vertexx(from.vertexx());
    }
    if (from.has_vertexy()) {
      set_vertexy(from.vertexy());
    }
    if (from.has_vertexz()) {
      set_vertexz(from.vertexz());
    }
    if (from.has_passid()) {
      set_passid(from.passid());
    }
    if (from.has_pfchargedhadroniso()) {
      set_pfchargedhadroniso(from.pfchargedhadroniso());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_pfneutralhadroniso()) {
      set_pfneutralhadroniso(from.pfneutralhadroniso());
    }
    if (from.has_pfgammaiso()) {
      set_pfgammaiso(from.pfgammaiso());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Electron::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Electron::CopyFrom(const Electron& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Electron::IsInitialized() const {
  
  return true;
}

void Electron::Swap(Electron* other) {
  if (other != this) {
    std::swap(energy_, other->energy_);
    std::swap(px_, other->px_);
    std::swap(py_, other->py_);
    std::swap(pz_, other->pz_);
    std::swap(charge_, other->charge_);
    std::swap(mass_, other->mass_);
    std::swap(type_, other->type_);
    std::swap(eta_, other->eta_);
    std::swap(phi_, other->phi_);
    std::swap(pt_, other->pt_);
    std::swap(caloenergy_, other->caloenergy_);
    std::swap(hoe_, other->hoe_);
    std::swap(eseedclusteroverpout_, other->eseedclusteroverpout_);
    std::swap(eoverp_, other->eoverp_);
    std::swap(fbrem_, other->fbrem_);
    std::swap(sigmaetaeta_, other->sigmaetaeta_);
    std::swap(sigmaietaieta_, other->sigmaietaieta_);
    std::swap(deltaphitrksc_, other->deltaphitrksc_);
    std::swap(deltaetatrksc_, other->deltaetatrksc_);
    std::swap(trkiso03_, other->trkiso03_);
    std::swap(ecaliso03_, other->ecaliso03_);
    std::swap(hcaliso03_, other->hcaliso03_);
    std::swap(trkiso_, other->trkiso_);
    std::swap(ecaliso_, other->ecaliso_);
    std::swap(hcaliso_, other->hcaliso_);
    std::swap(db_, other->db_);
    std::swap(closestctftrackref_, other->closestctftrackref_);
    std::swap(shfracinnerhits_, other->shfracinnerhits_);
    track_.Swap(&other->track_);
    std::swap(ecalisoheep_, other->ecalisoheep_);
    std::swap(hcalisod1heep_, other->hcalisod1heep_);
    std::swap(hcalisod2heep_, other->hcalisod2heep_);
    std::swap(trkisoheep_, other->trkisoheep_);
    std::swap(missinghits_, other->missinghits_);
    std::swap(dist_, other->dist_);
    std::swap(dcottheta_, other->dcottheta_);
    std::swap(sceta_, other->sceta_);
    std::swap(scphi_, other->scphi_);
    std::swap(scpt_, other->scpt_);
    std::swap(scrawenergy_, other->scrawenergy_);
    std::swap(vtxindex_, other->vtxindex_);
    std::swap(vtxdistxy_, other->vtxdistxy_);
    std::swap(vtxdistz_, other->vtxdistz_);
    std::swap(vertexx_, other->vertexx_);
    std::swap(vertexy_, other->vertexy_);
    std::swap(vertexz_, other->vertexz_);
    std::swap(passid_, other->passid_);
    std::swap(pfchargedhadroniso_, other->pfchargedhadroniso_);
    std::swap(pfneutralhadroniso_, other->pfneutralhadroniso_);
    std::swap(pfgammaiso_, other->pfgammaiso_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Electron::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Electron_descriptor_;
  metadata.reflection = Electron_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Muon_MuonAlgorithm_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Muon_MuonAlgorithm_descriptor_;
}
bool Muon_MuonAlgorithm_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Muon_MuonAlgorithm Muon::Default;
const Muon_MuonAlgorithm Muon::ParticleFlow;
const Muon_MuonAlgorithm Muon::MuonAlgorithm_MIN;
const Muon_MuonAlgorithm Muon::MuonAlgorithm_MAX;
const int Muon::MuonAlgorithm_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Muon::kEnergyFieldNumber;
const int Muon::kPxFieldNumber;
const int Muon::kPyFieldNumber;
const int Muon::kPzFieldNumber;
const int Muon::kChargeFieldNumber;
const int Muon::kMassFieldNumber;
const int Muon::kTrkIso03FieldNumber;
const int Muon::kEcalIso03FieldNumber;
const int Muon::kHcalIso03FieldNumber;
const int Muon::kIsGoodGlobalMuonFieldNumber;
const int Muon::kPfChargedHadronIsoFieldNumber;
const int Muon::kPfNeutralHadronIsoFieldNumber;
const int Muon::kPFGammaIsoFieldNumber;
const int Muon::kEtaFieldNumber;
const int Muon::kPhiFieldNumber;
const int Muon::kPtFieldNumber;
const int Muon::kPFieldNumber;
const int Muon::kTrkHitsFieldNumber;
const int Muon::kTrkD0FieldNumber;
const int Muon::kTrkD0ErrorFieldNumber;
const int Muon::kTrkDzFieldNumber;
const int Muon::kTrkDzErrorFieldNumber;
const int Muon::kGlobalChi2FieldNumber;
const int Muon::kTrkIsoFieldNumber;
const int Muon::kEcalIsoFieldNumber;
const int Muon::kHcalIsoFieldNumber;
const int Muon::kHOIsoFieldNumber;
const int Muon::kVtxIndexFieldNumber;
const int Muon::kVtxDistXYFieldNumber;
const int Muon::kVtxDistZFieldNumber;
const int Muon::kCocktailEtaFieldNumber;
const int Muon::kCocktailPhiFieldNumber;
const int Muon::kCocktailPtFieldNumber;
const int Muon::kCocktailPFieldNumber;
const int Muon::kCocktailChargeFieldNumber;
const int Muon::kCocktailTrkHitsFieldNumber;
const int Muon::kCocktailTrkD0FieldNumber;
const int Muon::kCocktailTrkD0ErrorFieldNumber;
const int Muon::kCocktailTrkDzFieldNumber;
const int Muon::kCocktailTrkDzErrorFieldNumber;
const int Muon::kCocktailGlobalChi2FieldNumber;
const int Muon::kTypeFieldNumber;
#endif  // !_MSC_VER

Muon::Muon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Muon::InitAsDefaultInstance() {
}

Muon::Muon(const Muon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Muon::SharedCtor() {
  _cached_size_ = 0;
  energy_ = 0;
  px_ = 0;
  py_ = 0;
  pz_ = 0;
  charge_ = 0;
  mass_ = 0;
  trkiso03_ = 0;
  ecaliso03_ = 0;
  hcaliso03_ = 0;
  isgoodglobalmuon_ = 0;
  pfchargedhadroniso_ = 0;
  pfneutralhadroniso_ = 0;
  pfgammaiso_ = 0;
  eta_ = 0;
  phi_ = 0;
  pt_ = 0;
  p_ = 0;
  trkhits_ = 0;
  trkd0_ = 0;
  trkd0error_ = 0;
  trkdz_ = 0;
  trkdzerror_ = 0;
  globalchi2_ = 0;
  trkiso_ = 0;
  ecaliso_ = 0;
  hcaliso_ = 0;
  hoiso_ = 0;
  vtxindex_ = 0;
  vtxdistxy_ = 0;
  vtxdistz_ = 0;
  cocktaileta_ = 0;
  cocktailphi_ = 0;
  cocktailpt_ = 0;
  cocktailp_ = 0;
  cocktailcharge_ = 0;
  cocktailtrkhits_ = 0;
  cocktailtrkd0_ = 0;
  cocktailtrkd0error_ = 0;
  cocktailtrkdz_ = 0;
  cocktailtrkdzerror_ = 0;
  cocktailglobalchi2_ = 0;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Muon::~Muon() {
  SharedDtor();
}

void Muon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Muon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Muon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Muon_descriptor_;
}

const Muon& Muon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EventCollection_2eproto();  return *default_instance_;
}

Muon* Muon::default_instance_ = NULL;

Muon* Muon::New() const {
  return new Muon;
}

void Muon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    energy_ = 0;
    px_ = 0;
    py_ = 0;
    pz_ = 0;
    charge_ = 0;
    mass_ = 0;
    trkiso03_ = 0;
    ecaliso03_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    hcaliso03_ = 0;
    isgoodglobalmuon_ = 0;
    pfchargedhadroniso_ = 0;
    pfneutralhadroniso_ = 0;
    pfgammaiso_ = 0;
    eta_ = 0;
    phi_ = 0;
    pt_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    p_ = 0;
    trkhits_ = 0;
    trkd0_ = 0;
    trkd0error_ = 0;
    trkdz_ = 0;
    trkdzerror_ = 0;
    globalchi2_ = 0;
    trkiso_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    ecaliso_ = 0;
    hcaliso_ = 0;
    hoiso_ = 0;
    vtxindex_ = 0;
    vtxdistxy_ = 0;
    vtxdistz_ = 0;
    cocktaileta_ = 0;
    cocktailphi_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    cocktailpt_ = 0;
    cocktailp_ = 0;
    cocktailcharge_ = 0;
    cocktailtrkhits_ = 0;
    cocktailtrkd0_ = 0;
    cocktailtrkd0error_ = 0;
    cocktailtrkdz_ = 0;
    cocktailtrkdzerror_ = 0;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    cocktailglobalchi2_ = 0;
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Muon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double Energy = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &energy_)));
          set_has_energy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_Px;
        break;
      }
      
      // optional double Px = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Px:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &px_)));
          set_has_px();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_Py;
        break;
      }
      
      // optional double Py = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Py:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &py_)));
          set_has_py();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_Pz;
        break;
      }
      
      // optional double Pz = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Pz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pz_)));
          set_has_pz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Charge;
        break;
      }
      
      // optional int32 Charge = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Charge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &charge_)));
          set_has_charge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_Mass;
        break;
      }
      
      // optional double Mass = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Mass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mass_)));
          set_has_mass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_TrkIso03;
        break;
      }
      
      // optional double TrkIso03 = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_TrkIso03:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &trkiso03_)));
          set_has_trkiso03();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_EcalIso03;
        break;
      }
      
      // optional double EcalIso03 = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_EcalIso03:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ecaliso03_)));
          set_has_ecaliso03();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_HcalIso03;
        break;
      }
      
      // optional double HcalIso03 = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_HcalIso03:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hcaliso03_)));
          set_has_hcaliso03();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_isGoodGlobalMuon;
        break;
      }
      
      // optional int32 isGoodGlobalMuon = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isGoodGlobalMuon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isgoodglobalmuon_)));
          set_has_isgoodglobalmuon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_PfChargedHadronIso;
        break;
      }
      
      // optional double PfChargedHadronIso = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PfChargedHadronIso:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pfchargedhadroniso_)));
          set_has_pfchargedhadroniso();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_PfNeutralHadronIso;
        break;
      }
      
      // optional double PfNeutralHadronIso = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PfNeutralHadronIso:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pfneutralhadroniso_)));
          set_has_pfneutralhadroniso();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_PFGammaIso;
        break;
      }
      
      // optional double PFGammaIso = 13 [default = 0];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PFGammaIso:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pfgammaiso_)));
          set_has_pfgammaiso();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_Eta;
        break;
      }
      
      // optional double Eta = 14 [default = 0];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Eta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &eta_)));
          set_has_eta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_Phi;
        break;
      }
      
      // optional double Phi = 15 [default = 0];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Phi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &phi_)));
          set_has_phi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_Pt;
        break;
      }
      
      // optional double Pt = 16 [default = 0];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Pt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pt_)));
          set_has_pt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(137)) goto parse_P;
        break;
      }
      
      // optional double P = 17 [default = 0];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_P:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &p_)));
          set_has_p();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_TrkHits;
        break;
      }
      
      // optional int32 TrkHits = 18 [default = 0];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TrkHits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trkhits_)));
          set_has_trkhits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(153)) goto parse_TrkD0;
        break;
      }
      
      // optional double TrkD0 = 19 [default = 0];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_TrkD0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &trkd0_)));
          set_has_trkd0();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(161)) goto parse_TrkD0Error;
        break;
      }
      
      // optional double TrkD0Error = 20 [default = 0];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_TrkD0Error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &trkd0error_)));
          set_has_trkd0error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(169)) goto parse_TrkDz;
        break;
      }
      
      // optional double TrkDz = 21 [default = 0];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_TrkDz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &trkdz_)));
          set_has_trkdz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(177)) goto parse_TrkDzError;
        break;
      }
      
      // optional double TrkDzError = 22 [default = 0];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_TrkDzError:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &trkdzerror_)));
          set_has_trkdzerror();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(185)) goto parse_GlobalChi2;
        break;
      }
      
      // optional double GlobalChi2 = 23 [default = 0];
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_GlobalChi2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &globalchi2_)));
          set_has_globalchi2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(193)) goto parse_TrkIso;
        break;
      }
      
      // optional double TrkIso = 24 [default = 0];
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_TrkIso:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &trkiso_)));
          set_has_trkiso();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(201)) goto parse_EcalIso;
        break;
      }
      
      // optional double EcalIso = 25 [default = 0];
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_EcalIso:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ecaliso_)));
          set_has_ecaliso();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(209)) goto parse_HcalIso;
        break;
      }
      
      // optional double HcalIso = 26 [default = 0];
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_HcalIso:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hcaliso_)));
          set_has_hcaliso();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(217)) goto parse_HOIso;
        break;
      }
      
      // optional double HOIso = 27 [default = 0];
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_HOIso:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hoiso_)));
          set_has_hoiso();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_VtxIndex;
        break;
      }
      
      // optional int32 VtxIndex = 28 [default = 0];
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VtxIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vtxindex_)));
          set_has_vtxindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(233)) goto parse_VtxDistXY;
        break;
      }
      
      // optional double VtxDistXY = 29 [default = 0];
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_VtxDistXY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vtxdistxy_)));
          set_has_vtxdistxy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(241)) goto parse_VtxDistZ;
        break;
      }
      
      // optional double VtxDistZ = 30 [default = 0];
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_VtxDistZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vtxdistz_)));
          set_has_vtxdistz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(249)) goto parse_CocktailEta;
        break;
      }
      
      // optional double CocktailEta = 31 [default = 0];
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_CocktailEta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cocktaileta_)));
          set_has_cocktaileta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(257)) goto parse_CocktailPhi;
        break;
      }
      
      // optional double CocktailPhi = 32 [default = 0];
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_CocktailPhi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cocktailphi_)));
          set_has_cocktailphi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(265)) goto parse_CocktailPt;
        break;
      }
      
      // optional double CocktailPt = 33 [default = 0];
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_CocktailPt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cocktailpt_)));
          set_has_cocktailpt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(273)) goto parse_CocktailP;
        break;
      }
      
      // optional double CocktailP = 34 [default = 0];
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_CocktailP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cocktailp_)));
          set_has_cocktailp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_CocktailCharge;
        break;
      }
      
      // optional int32 CocktailCharge = 35 [default = 0];
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CocktailCharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cocktailcharge_)));
          set_has_cocktailcharge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_CocktailTrkHits;
        break;
      }
      
      // optional int32 CocktailTrkHits = 36 [default = 0];
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CocktailTrkHits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cocktailtrkhits_)));
          set_has_cocktailtrkhits();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(297)) goto parse_CocktailTrkD0;
        break;
      }
      
      // optional double CocktailTrkD0 = 37 [default = 0];
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_CocktailTrkD0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cocktailtrkd0_)));
          set_has_cocktailtrkd0();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(305)) goto parse_CocktailTrkD0Error;
        break;
      }
      
      // optional double CocktailTrkD0Error = 38 [default = 0];
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_CocktailTrkD0Error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cocktailtrkd0error_)));
          set_has_cocktailtrkd0error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(313)) goto parse_CocktailTrkDz;
        break;
      }
      
      // optional double CocktailTrkDz = 39 [default = 0];
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_CocktailTrkDz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cocktailtrkdz_)));
          set_has_cocktailtrkdz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(321)) goto parse_CocktailTrkDzError;
        break;
      }
      
      // optional double CocktailTrkDzError = 40 [default = 0];
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_CocktailTrkDzError:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cocktailtrkdzerror_)));
          set_has_cocktailtrkdzerror();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(329)) goto parse_CocktailGlobalChi2;
        break;
      }
      
      // optional double CocktailGlobalChi2 = 41 [default = 0];
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_CocktailGlobalChi2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cocktailglobalchi2_)));
          set_has_cocktailglobalchi2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_type;
        break;
      }
      
      // optional .HEP.Muon.MuonAlgorithm type = 42 [default = ParticleFlow];
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HEP::Muon_MuonAlgorithm_IsValid(value)) {
            set_type(static_cast< ::HEP::Muon_MuonAlgorithm >(value));
          } else {
            mutable_unknown_fields()->AddVarint(42, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Muon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double Energy = 1 [default = 0];
  if (has_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->energy(), output);
  }
  
  // optional double Px = 2 [default = 0];
  if (has_px()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->px(), output);
  }
  
  // optional double Py = 3 [default = 0];
  if (has_py()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->py(), output);
  }
  
  // optional double Pz = 4 [default = 0];
  if (has_pz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->pz(), output);
  }
  
  // optional int32 Charge = 5 [default = 0];
  if (has_charge()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->charge(), output);
  }
  
  // optional double Mass = 6 [default = 0];
  if (has_mass()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->mass(), output);
  }
  
  // optional double TrkIso03 = 7 [default = 0];
  if (has_trkiso03()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->trkiso03(), output);
  }
  
  // optional double EcalIso03 = 8 [default = 0];
  if (has_ecaliso03()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->ecaliso03(), output);
  }
  
  // optional double HcalIso03 = 9 [default = 0];
  if (has_hcaliso03()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->hcaliso03(), output);
  }
  
  // optional int32 isGoodGlobalMuon = 10 [default = 0];
  if (has_isgoodglobalmuon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->isgoodglobalmuon(), output);
  }
  
  // optional double PfChargedHadronIso = 11 [default = 0];
  if (has_pfchargedhadroniso()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->pfchargedhadroniso(), output);
  }
  
  // optional double PfNeutralHadronIso = 12 [default = 0];
  if (has_pfneutralhadroniso()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->pfneutralhadroniso(), output);
  }
  
  // optional double PFGammaIso = 13 [default = 0];
  if (has_pfgammaiso()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->pfgammaiso(), output);
  }
  
  // optional double Eta = 14 [default = 0];
  if (has_eta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->eta(), output);
  }
  
  // optional double Phi = 15 [default = 0];
  if (has_phi()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->phi(), output);
  }
  
  // optional double Pt = 16 [default = 0];
  if (has_pt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->pt(), output);
  }
  
  // optional double P = 17 [default = 0];
  if (has_p()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->p(), output);
  }
  
  // optional int32 TrkHits = 18 [default = 0];
  if (has_trkhits()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->trkhits(), output);
  }
  
  // optional double TrkD0 = 19 [default = 0];
  if (has_trkd0()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->trkd0(), output);
  }
  
  // optional double TrkD0Error = 20 [default = 0];
  if (has_trkd0error()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->trkd0error(), output);
  }
  
  // optional double TrkDz = 21 [default = 0];
  if (has_trkdz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->trkdz(), output);
  }
  
  // optional double TrkDzError = 22 [default = 0];
  if (has_trkdzerror()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->trkdzerror(), output);
  }
  
  // optional double GlobalChi2 = 23 [default = 0];
  if (has_globalchi2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->globalchi2(), output);
  }
  
  // optional double TrkIso = 24 [default = 0];
  if (has_trkiso()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->trkiso(), output);
  }
  
  // optional double EcalIso = 25 [default = 0];
  if (has_ecaliso()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->ecaliso(), output);
  }
  
  // optional double HcalIso = 26 [default = 0];
  if (has_hcaliso()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(26, this->hcaliso(), output);
  }
  
  // optional double HOIso = 27 [default = 0];
  if (has_hoiso()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(27, this->hoiso(), output);
  }
  
  // optional int32 VtxIndex = 28 [default = 0];
  if (has_vtxindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->vtxindex(), output);
  }
  
  // optional double VtxDistXY = 29 [default = 0];
  if (has_vtxdistxy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->vtxdistxy(), output);
  }
  
  // optional double VtxDistZ = 30 [default = 0];
  if (has_vtxdistz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->vtxdistz(), output);
  }
  
  // optional double CocktailEta = 31 [default = 0];
  if (has_cocktaileta()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(31, this->cocktaileta(), output);
  }
  
  // optional double CocktailPhi = 32 [default = 0];
  if (has_cocktailphi()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(32, this->cocktailphi(), output);
  }
  
  // optional double CocktailPt = 33 [default = 0];
  if (has_cocktailpt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(33, this->cocktailpt(), output);
  }
  
  // optional double CocktailP = 34 [default = 0];
  if (has_cocktailp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(34, this->cocktailp(), output);
  }
  
  // optional int32 CocktailCharge = 35 [default = 0];
  if (has_cocktailcharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->cocktailcharge(), output);
  }
  
  // optional int32 CocktailTrkHits = 36 [default = 0];
  if (has_cocktailtrkhits()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->cocktailtrkhits(), output);
  }
  
  // optional double CocktailTrkD0 = 37 [default = 0];
  if (has_cocktailtrkd0()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(37, this->cocktailtrkd0(), output);
  }
  
  // optional double CocktailTrkD0Error = 38 [default = 0];
  if (has_cocktailtrkd0error()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(38, this->cocktailtrkd0error(), output);
  }
  
  // optional double CocktailTrkDz = 39 [default = 0];
  if (has_cocktailtrkdz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(39, this->cocktailtrkdz(), output);
  }
  
  // optional double CocktailTrkDzError = 40 [default = 0];
  if (has_cocktailtrkdzerror()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(40, this->cocktailtrkdzerror(), output);
  }
  
  // optional double CocktailGlobalChi2 = 41 [default = 0];
  if (has_cocktailglobalchi2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(41, this->cocktailglobalchi2(), output);
  }
  
  // optional .HEP.Muon.MuonAlgorithm type = 42 [default = ParticleFlow];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      42, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Muon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double Energy = 1 [default = 0];
  if (has_energy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->energy(), target);
  }
  
  // optional double Px = 2 [default = 0];
  if (has_px()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->px(), target);
  }
  
  // optional double Py = 3 [default = 0];
  if (has_py()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->py(), target);
  }
  
  // optional double Pz = 4 [default = 0];
  if (has_pz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->pz(), target);
  }
  
  // optional int32 Charge = 5 [default = 0];
  if (has_charge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->charge(), target);
  }
  
  // optional double Mass = 6 [default = 0];
  if (has_mass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->mass(), target);
  }
  
  // optional double TrkIso03 = 7 [default = 0];
  if (has_trkiso03()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->trkiso03(), target);
  }
  
  // optional double EcalIso03 = 8 [default = 0];
  if (has_ecaliso03()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->ecaliso03(), target);
  }
  
  // optional double HcalIso03 = 9 [default = 0];
  if (has_hcaliso03()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->hcaliso03(), target);
  }
  
  // optional int32 isGoodGlobalMuon = 10 [default = 0];
  if (has_isgoodglobalmuon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->isgoodglobalmuon(), target);
  }
  
  // optional double PfChargedHadronIso = 11 [default = 0];
  if (has_pfchargedhadroniso()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->pfchargedhadroniso(), target);
  }
  
  // optional double PfNeutralHadronIso = 12 [default = 0];
  if (has_pfneutralhadroniso()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->pfneutralhadroniso(), target);
  }
  
  // optional double PFGammaIso = 13 [default = 0];
  if (has_pfgammaiso()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->pfgammaiso(), target);
  }
  
  // optional double Eta = 14 [default = 0];
  if (has_eta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->eta(), target);
  }
  
  // optional double Phi = 15 [default = 0];
  if (has_phi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->phi(), target);
  }
  
  // optional double Pt = 16 [default = 0];
  if (has_pt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->pt(), target);
  }
  
  // optional double P = 17 [default = 0];
  if (has_p()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->p(), target);
  }
  
  // optional int32 TrkHits = 18 [default = 0];
  if (has_trkhits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->trkhits(), target);
  }
  
  // optional double TrkD0 = 19 [default = 0];
  if (has_trkd0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->trkd0(), target);
  }
  
  // optional double TrkD0Error = 20 [default = 0];
  if (has_trkd0error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->trkd0error(), target);
  }
  
  // optional double TrkDz = 21 [default = 0];
  if (has_trkdz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->trkdz(), target);
  }
  
  // optional double TrkDzError = 22 [default = 0];
  if (has_trkdzerror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->trkdzerror(), target);
  }
  
  // optional double GlobalChi2 = 23 [default = 0];
  if (has_globalchi2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->globalchi2(), target);
  }
  
  // optional double TrkIso = 24 [default = 0];
  if (has_trkiso()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(24, this->trkiso(), target);
  }
  
  // optional double EcalIso = 25 [default = 0];
  if (has_ecaliso()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->ecaliso(), target);
  }
  
  // optional double HcalIso = 26 [default = 0];
  if (has_hcaliso()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(26, this->hcaliso(), target);
  }
  
  // optional double HOIso = 27 [default = 0];
  if (has_hoiso()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(27, this->hoiso(), target);
  }
  
  // optional int32 VtxIndex = 28 [default = 0];
  if (has_vtxindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->vtxindex(), target);
  }
  
  // optional double VtxDistXY = 29 [default = 0];
  if (has_vtxdistxy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(29, this->vtxdistxy(), target);
  }
  
  // optional double VtxDistZ = 30 [default = 0];
  if (has_vtxdistz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(30, this->vtxdistz(), target);
  }
  
  // optional double CocktailEta = 31 [default = 0];
  if (has_cocktaileta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(31, this->cocktaileta(), target);
  }
  
  // optional double CocktailPhi = 32 [default = 0];
  if (has_cocktailphi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(32, this->cocktailphi(), target);
  }
  
  // optional double CocktailPt = 33 [default = 0];
  if (has_cocktailpt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(33, this->cocktailpt(), target);
  }
  
  // optional double CocktailP = 34 [default = 0];
  if (has_cocktailp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(34, this->cocktailp(), target);
  }
  
  // optional int32 CocktailCharge = 35 [default = 0];
  if (has_cocktailcharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->cocktailcharge(), target);
  }
  
  // optional int32 CocktailTrkHits = 36 [default = 0];
  if (has_cocktailtrkhits()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->cocktailtrkhits(), target);
  }
  
  // optional double CocktailTrkD0 = 37 [default = 0];
  if (has_cocktailtrkd0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(37, this->cocktailtrkd0(), target);
  }
  
  // optional double CocktailTrkD0Error = 38 [default = 0];
  if (has_cocktailtrkd0error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(38, this->cocktailtrkd0error(), target);
  }
  
  // optional double CocktailTrkDz = 39 [default = 0];
  if (has_cocktailtrkdz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(39, this->cocktailtrkdz(), target);
  }
  
  // optional double CocktailTrkDzError = 40 [default = 0];
  if (has_cocktailtrkdzerror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(40, this->cocktailtrkdzerror(), target);
  }
  
  // optional double CocktailGlobalChi2 = 41 [default = 0];
  if (has_cocktailglobalchi2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(41, this->cocktailglobalchi2(), target);
  }
  
  // optional .HEP.Muon.MuonAlgorithm type = 42 [default = ParticleFlow];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      42, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Muon::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double Energy = 1 [default = 0];
    if (has_energy()) {
      total_size += 1 + 8;
    }
    
    // optional double Px = 2 [default = 0];
    if (has_px()) {
      total_size += 1 + 8;
    }
    
    // optional double Py = 3 [default = 0];
    if (has_py()) {
      total_size += 1 + 8;
    }
    
    // optional double Pz = 4 [default = 0];
    if (has_pz()) {
      total_size += 1 + 8;
    }
    
    // optional int32 Charge = 5 [default = 0];
    if (has_charge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->charge());
    }
    
    // optional double Mass = 6 [default = 0];
    if (has_mass()) {
      total_size += 1 + 8;
    }
    
    // optional double TrkIso03 = 7 [default = 0];
    if (has_trkiso03()) {
      total_size += 1 + 8;
    }
    
    // optional double EcalIso03 = 8 [default = 0];
    if (has_ecaliso03()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double HcalIso03 = 9 [default = 0];
    if (has_hcaliso03()) {
      total_size += 1 + 8;
    }
    
    // optional int32 isGoodGlobalMuon = 10 [default = 0];
    if (has_isgoodglobalmuon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isgoodglobalmuon());
    }
    
    // optional double PfChargedHadronIso = 11 [default = 0];
    if (has_pfchargedhadroniso()) {
      total_size += 1 + 8;
    }
    
    // optional double PfNeutralHadronIso = 12 [default = 0];
    if (has_pfneutralhadroniso()) {
      total_size += 1 + 8;
    }
    
    // optional double PFGammaIso = 13 [default = 0];
    if (has_pfgammaiso()) {
      total_size += 1 + 8;
    }
    
    // optional double Eta = 14 [default = 0];
    if (has_eta()) {
      total_size += 1 + 8;
    }
    
    // optional double Phi = 15 [default = 0];
    if (has_phi()) {
      total_size += 1 + 8;
    }
    
    // optional double Pt = 16 [default = 0];
    if (has_pt()) {
      total_size += 2 + 8;
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional double P = 17 [default = 0];
    if (has_p()) {
      total_size += 2 + 8;
    }
    
    // optional int32 TrkHits = 18 [default = 0];
    if (has_trkhits()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trkhits());
    }
    
    // optional double TrkD0 = 19 [default = 0];
    if (has_trkd0()) {
      total_size += 2 + 8;
    }
    
    // optional double TrkD0Error = 20 [default = 0];
    if (has_trkd0error()) {
      total_size += 2 + 8;
    }
    
    // optional double TrkDz = 21 [default = 0];
    if (has_trkdz()) {
      total_size += 2 + 8;
    }
    
    // optional double TrkDzError = 22 [default = 0];
    if (has_trkdzerror()) {
      total_size += 2 + 8;
    }
    
    // optional double GlobalChi2 = 23 [default = 0];
    if (has_globalchi2()) {
      total_size += 2 + 8;
    }
    
    // optional double TrkIso = 24 [default = 0];
    if (has_trkiso()) {
      total_size += 2 + 8;
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional double EcalIso = 25 [default = 0];
    if (has_ecaliso()) {
      total_size += 2 + 8;
    }
    
    // optional double HcalIso = 26 [default = 0];
    if (has_hcaliso()) {
      total_size += 2 + 8;
    }
    
    // optional double HOIso = 27 [default = 0];
    if (has_hoiso()) {
      total_size += 2 + 8;
    }
    
    // optional int32 VtxIndex = 28 [default = 0];
    if (has_vtxindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vtxindex());
    }
    
    // optional double VtxDistXY = 29 [default = 0];
    if (has_vtxdistxy()) {
      total_size += 2 + 8;
    }
    
    // optional double VtxDistZ = 30 [default = 0];
    if (has_vtxdistz()) {
      total_size += 2 + 8;
    }
    
    // optional double CocktailEta = 31 [default = 0];
    if (has_cocktaileta()) {
      total_size += 2 + 8;
    }
    
    // optional double CocktailPhi = 32 [default = 0];
    if (has_cocktailphi()) {
      total_size += 2 + 8;
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional double CocktailPt = 33 [default = 0];
    if (has_cocktailpt()) {
      total_size += 2 + 8;
    }
    
    // optional double CocktailP = 34 [default = 0];
    if (has_cocktailp()) {
      total_size += 2 + 8;
    }
    
    // optional int32 CocktailCharge = 35 [default = 0];
    if (has_cocktailcharge()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cocktailcharge());
    }
    
    // optional int32 CocktailTrkHits = 36 [default = 0];
    if (has_cocktailtrkhits()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cocktailtrkhits());
    }
    
    // optional double CocktailTrkD0 = 37 [default = 0];
    if (has_cocktailtrkd0()) {
      total_size += 2 + 8;
    }
    
    // optional double CocktailTrkD0Error = 38 [default = 0];
    if (has_cocktailtrkd0error()) {
      total_size += 2 + 8;
    }
    
    // optional double CocktailTrkDz = 39 [default = 0];
    if (has_cocktailtrkdz()) {
      total_size += 2 + 8;
    }
    
    // optional double CocktailTrkDzError = 40 [default = 0];
    if (has_cocktailtrkdzerror()) {
      total_size += 2 + 8;
    }
    
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional double CocktailGlobalChi2 = 41 [default = 0];
    if (has_cocktailglobalchi2()) {
      total_size += 2 + 8;
    }
    
    // optional .HEP.Muon.MuonAlgorithm type = 42 [default = ParticleFlow];
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Muon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Muon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Muon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Muon::MergeFrom(const Muon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_energy()) {
      set_energy(from.energy());
    }
    if (from.has_px()) {
      set_px(from.px());
    }
    if (from.has_py()) {
      set_py(from.py());
    }
    if (from.has_pz()) {
      set_pz(from.pz());
    }
    if (from.has_charge()) {
      set_charge(from.charge());
    }
    if (from.has_mass()) {
      set_mass(from.mass());
    }
    if (from.has_trkiso03()) {
      set_trkiso03(from.trkiso03());
    }
    if (from.has_ecaliso03()) {
      set_ecaliso03(from.ecaliso03());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_hcaliso03()) {
      set_hcaliso03(from.hcaliso03());
    }
    if (from.has_isgoodglobalmuon()) {
      set_isgoodglobalmuon(from.isgoodglobalmuon());
    }
    if (from.has_pfchargedhadroniso()) {
      set_pfchargedhadroniso(from.pfchargedhadroniso());
    }
    if (from.has_pfneutralhadroniso()) {
      set_pfneutralhadroniso(from.pfneutralhadroniso());
    }
    if (from.has_pfgammaiso()) {
      set_pfgammaiso(from.pfgammaiso());
    }
    if (from.has_eta()) {
      set_eta(from.eta());
    }
    if (from.has_phi()) {
      set_phi(from.phi());
    }
    if (from.has_pt()) {
      set_pt(from.pt());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_p()) {
      set_p(from.p());
    }
    if (from.has_trkhits()) {
      set_trkhits(from.trkhits());
    }
    if (from.has_trkd0()) {
      set_trkd0(from.trkd0());
    }
    if (from.has_trkd0error()) {
      set_trkd0error(from.trkd0error());
    }
    if (from.has_trkdz()) {
      set_trkdz(from.trkdz());
    }
    if (from.has_trkdzerror()) {
      set_trkdzerror(from.trkdzerror());
    }
    if (from.has_globalchi2()) {
      set_globalchi2(from.globalchi2());
    }
    if (from.has_trkiso()) {
      set_trkiso(from.trkiso());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_ecaliso()) {
      set_ecaliso(from.ecaliso());
    }
    if (from.has_hcaliso()) {
      set_hcaliso(from.hcaliso());
    }
    if (from.has_hoiso()) {
      set_hoiso(from.hoiso());
    }
    if (from.has_vtxindex()) {
      set_vtxindex(from.vtxindex());
    }
    if (from.has_vtxdistxy()) {
      set_vtxdistxy(from.vtxdistxy());
    }
    if (from.has_vtxdistz()) {
      set_vtxdistz(from.vtxdistz());
    }
    if (from.has_cocktaileta()) {
      set_cocktaileta(from.cocktaileta());
    }
    if (from.has_cocktailphi()) {
      set_cocktailphi(from.cocktailphi());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_cocktailpt()) {
      set_cocktailpt(from.cocktailpt());
    }
    if (from.has_cocktailp()) {
      set_cocktailp(from.cocktailp());
    }
    if (from.has_cocktailcharge()) {
      set_cocktailcharge(from.cocktailcharge());
    }
    if (from.has_cocktailtrkhits()) {
      set_cocktailtrkhits(from.cocktailtrkhits());
    }
    if (from.has_cocktailtrkd0()) {
      set_cocktailtrkd0(from.cocktailtrkd0());
    }
    if (from.has_cocktailtrkd0error()) {
      set_cocktailtrkd0error(from.cocktailtrkd0error());
    }
    if (from.has_cocktailtrkdz()) {
      set_cocktailtrkdz(from.cocktailtrkdz());
    }
    if (from.has_cocktailtrkdzerror()) {
      set_cocktailtrkdzerror(from.cocktailtrkdzerror());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_cocktailglobalchi2()) {
      set_cocktailglobalchi2(from.cocktailglobalchi2());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Muon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Muon::CopyFrom(const Muon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Muon::IsInitialized() const {
  
  return true;
}

void Muon::Swap(Muon* other) {
  if (other != this) {
    std::swap(energy_, other->energy_);
    std::swap(px_, other->px_);
    std::swap(py_, other->py_);
    std::swap(pz_, other->pz_);
    std::swap(charge_, other->charge_);
    std::swap(mass_, other->mass_);
    std::swap(trkiso03_, other->trkiso03_);
    std::swap(ecaliso03_, other->ecaliso03_);
    std::swap(hcaliso03_, other->hcaliso03_);
    std::swap(isgoodglobalmuon_, other->isgoodglobalmuon_);
    std::swap(pfchargedhadroniso_, other->pfchargedhadroniso_);
    std::swap(pfneutralhadroniso_, other->pfneutralhadroniso_);
    std::swap(pfgammaiso_, other->pfgammaiso_);
    std::swap(eta_, other->eta_);
    std::swap(phi_, other->phi_);
    std::swap(pt_, other->pt_);
    std::swap(p_, other->p_);
    std::swap(trkhits_, other->trkhits_);
    std::swap(trkd0_, other->trkd0_);
    std::swap(trkd0error_, other->trkd0error_);
    std::swap(trkdz_, other->trkdz_);
    std::swap(trkdzerror_, other->trkdzerror_);
    std::swap(globalchi2_, other->globalchi2_);
    std::swap(trkiso_, other->trkiso_);
    std::swap(ecaliso_, other->ecaliso_);
    std::swap(hcaliso_, other->hcaliso_);
    std::swap(hoiso_, other->hoiso_);
    std::swap(vtxindex_, other->vtxindex_);
    std::swap(vtxdistxy_, other->vtxdistxy_);
    std::swap(vtxdistz_, other->vtxdistz_);
    std::swap(cocktaileta_, other->cocktaileta_);
    std::swap(cocktailphi_, other->cocktailphi_);
    std::swap(cocktailpt_, other->cocktailpt_);
    std::swap(cocktailp_, other->cocktailp_);
    std::swap(cocktailcharge_, other->cocktailcharge_);
    std::swap(cocktailtrkhits_, other->cocktailtrkhits_);
    std::swap(cocktailtrkd0_, other->cocktailtrkd0_);
    std::swap(cocktailtrkd0error_, other->cocktailtrkd0error_);
    std::swap(cocktailtrkdz_, other->cocktailtrkdz_);
    std::swap(cocktailtrkdzerror_, other->cocktailtrkdzerror_);
    std::swap(cocktailglobalchi2_, other->cocktailglobalchi2_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Muon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Muon_descriptor_;
  metadata.reflection = Muon_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* MET_METAlgorithm_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MET_METAlgorithm_descriptor_;
}
bool MET_METAlgorithm_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const MET_METAlgorithm MET::Calo;
const MET_METAlgorithm MET::ParticleFlow;
const MET_METAlgorithm MET::METAlgorithm_MIN;
const MET_METAlgorithm MET::METAlgorithm_MAX;
const int MET::METAlgorithm_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int MET::kExFieldNumber;
const int MET::kEyFieldNumber;
const int MET::kETFieldNumber;
const int MET::kPhiFieldNumber;
const int MET::kSumETFieldNumber;
const int MET::kSignificanceFieldNumber;
const int MET::kETUncorrFieldNumber;
const int MET::kPhiUncorrFieldNumber;
const int MET::kSumETUncorrFieldNumber;
const int MET::kTypeFieldNumber;
#endif  // !_MSC_VER

MET::MET()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MET::InitAsDefaultInstance() {
}

MET::MET(const MET& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MET::SharedCtor() {
  _cached_size_ = 0;
  ex_ = 0;
  ey_ = 0;
  et_ = 0;
  phi_ = 0;
  sumet_ = 0;
  significance_ = 0;
  etuncorr_ = 0;
  phiuncorr_ = 0;
  sumetuncorr_ = 0;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MET::~MET() {
  SharedDtor();
}

void MET::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MET::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MET::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MET_descriptor_;
}

const MET& MET::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EventCollection_2eproto();  return *default_instance_;
}

MET* MET::default_instance_ = NULL;

MET* MET::New() const {
  return new MET;
}

void MET::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ex_ = 0;
    ey_ = 0;
    et_ = 0;
    phi_ = 0;
    sumet_ = 0;
    significance_ = 0;
    etuncorr_ = 0;
    phiuncorr_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    sumetuncorr_ = 0;
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MET::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double Ex = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ex_)));
          set_has_ex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_Ey;
        break;
      }
      
      // optional double Ey = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Ey:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ey_)));
          set_has_ey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_ET;
        break;
      }
      
      // optional double ET = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ET:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &et_)));
          set_has_et();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_Phi;
        break;
      }
      
      // optional double Phi = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Phi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &phi_)));
          set_has_phi();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_SumET;
        break;
      }
      
      // optional double SumET = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_SumET:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sumet_)));
          set_has_sumet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_Significance;
        break;
      }
      
      // optional double Significance = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Significance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &significance_)));
          set_has_significance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_ETUncorr;
        break;
      }
      
      // optional double ETUncorr = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ETUncorr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &etuncorr_)));
          set_has_etuncorr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_PhiUncorr;
        break;
      }
      
      // optional double PhiUncorr = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PhiUncorr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &phiuncorr_)));
          set_has_phiuncorr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_SumETUncorr;
        break;
      }
      
      // optional double SumETUncorr = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_SumETUncorr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sumetuncorr_)));
          set_has_sumetuncorr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_type;
        break;
      }
      
      // optional .HEP.MET.METAlgorithm type = 10 [default = ParticleFlow];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::HEP::MET_METAlgorithm_IsValid(value)) {
            set_type(static_cast< ::HEP::MET_METAlgorithm >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MET::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double Ex = 1 [default = 0];
  if (has_ex()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->ex(), output);
  }
  
  // optional double Ey = 2 [default = 0];
  if (has_ey()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->ey(), output);
  }
  
  // optional double ET = 3 [default = 0];
  if (has_et()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->et(), output);
  }
  
  // optional double Phi = 4 [default = 0];
  if (has_phi()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->phi(), output);
  }
  
  // optional double SumET = 5 [default = 0];
  if (has_sumet()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->sumet(), output);
  }
  
  // optional double Significance = 6 [default = 0];
  if (has_significance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->significance(), output);
  }
  
  // optional double ETUncorr = 7 [default = 0];
  if (has_etuncorr()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->etuncorr(), output);
  }
  
  // optional double PhiUncorr = 8 [default = 0];
  if (has_phiuncorr()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->phiuncorr(), output);
  }
  
  // optional double SumETUncorr = 9 [default = 0];
  if (has_sumetuncorr()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->sumetuncorr(), output);
  }
  
  // optional .HEP.MET.METAlgorithm type = 10 [default = ParticleFlow];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MET::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double Ex = 1 [default = 0];
  if (has_ex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->ex(), target);
  }
  
  // optional double Ey = 2 [default = 0];
  if (has_ey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->ey(), target);
  }
  
  // optional double ET = 3 [default = 0];
  if (has_et()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->et(), target);
  }
  
  // optional double Phi = 4 [default = 0];
  if (has_phi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->phi(), target);
  }
  
  // optional double SumET = 5 [default = 0];
  if (has_sumet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->sumet(), target);
  }
  
  // optional double Significance = 6 [default = 0];
  if (has_significance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->significance(), target);
  }
  
  // optional double ETUncorr = 7 [default = 0];
  if (has_etuncorr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->etuncorr(), target);
  }
  
  // optional double PhiUncorr = 8 [default = 0];
  if (has_phiuncorr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->phiuncorr(), target);
  }
  
  // optional double SumETUncorr = 9 [default = 0];
  if (has_sumetuncorr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->sumetuncorr(), target);
  }
  
  // optional .HEP.MET.METAlgorithm type = 10 [default = ParticleFlow];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MET::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double Ex = 1 [default = 0];
    if (has_ex()) {
      total_size += 1 + 8;
    }
    
    // optional double Ey = 2 [default = 0];
    if (has_ey()) {
      total_size += 1 + 8;
    }
    
    // optional double ET = 3 [default = 0];
    if (has_et()) {
      total_size += 1 + 8;
    }
    
    // optional double Phi = 4 [default = 0];
    if (has_phi()) {
      total_size += 1 + 8;
    }
    
    // optional double SumET = 5 [default = 0];
    if (has_sumet()) {
      total_size += 1 + 8;
    }
    
    // optional double Significance = 6 [default = 0];
    if (has_significance()) {
      total_size += 1 + 8;
    }
    
    // optional double ETUncorr = 7 [default = 0];
    if (has_etuncorr()) {
      total_size += 1 + 8;
    }
    
    // optional double PhiUncorr = 8 [default = 0];
    if (has_phiuncorr()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double SumETUncorr = 9 [default = 0];
    if (has_sumetuncorr()) {
      total_size += 1 + 8;
    }
    
    // optional .HEP.MET.METAlgorithm type = 10 [default = ParticleFlow];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MET::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MET* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MET*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MET::MergeFrom(const MET& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ex()) {
      set_ex(from.ex());
    }
    if (from.has_ey()) {
      set_ey(from.ey());
    }
    if (from.has_et()) {
      set_et(from.et());
    }
    if (from.has_phi()) {
      set_phi(from.phi());
    }
    if (from.has_sumet()) {
      set_sumet(from.sumet());
    }
    if (from.has_significance()) {
      set_significance(from.significance());
    }
    if (from.has_etuncorr()) {
      set_etuncorr(from.etuncorr());
    }
    if (from.has_phiuncorr()) {
      set_phiuncorr(from.phiuncorr());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sumetuncorr()) {
      set_sumetuncorr(from.sumetuncorr());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MET::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MET::CopyFrom(const MET& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MET::IsInitialized() const {
  
  return true;
}

void MET::Swap(MET* other) {
  if (other != this) {
    std::swap(ex_, other->ex_);
    std::swap(ey_, other->ey_);
    std::swap(et_, other->et_);
    std::swap(phi_, other->phi_);
    std::swap(sumet_, other->sumet_);
    std::swap(significance_, other->significance_);
    std::swap(etuncorr_, other->etuncorr_);
    std::swap(phiuncorr_, other->phiuncorr_);
    std::swap(sumetuncorr_, other->sumetuncorr_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MET::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MET_descriptor_;
  metadata.reflection = MET_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Vertex::kXFieldNumber;
const int Vertex::kYFieldNumber;
const int Vertex::kZFieldNumber;
const int Vertex::kXErrFieldNumber;
const int Vertex::kYErrFieldNumber;
const int Vertex::kZErrFieldNumber;
const int Vertex::kRhoFieldNumber;
const int Vertex::kChi2FieldNumber;
const int Vertex::kNDFFieldNumber;
const int Vertex::kNTracksFieldNumber;
const int Vertex::kNTracksW05FieldNumber;
const int Vertex::kIsFakeFieldNumber;
#endif  // !_MSC_VER

Vertex::Vertex()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Vertex::InitAsDefaultInstance() {
}

Vertex::Vertex(const Vertex& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Vertex::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  xerr_ = 0;
  yerr_ = 0;
  zerr_ = 0;
  rho_ = 0;
  chi2_ = 0;
  ndf_ = 0;
  ntracks_ = 0;
  ntracksw05_ = 0;
  isfake_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vertex::~Vertex() {
  SharedDtor();
}

void Vertex::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vertex::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vertex::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vertex_descriptor_;
}

const Vertex& Vertex::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EventCollection_2eproto();  return *default_instance_;
}

Vertex* Vertex::default_instance_ = NULL;

Vertex* Vertex::New() const {
  return new Vertex;
}

void Vertex::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
    xerr_ = 0;
    yerr_ = 0;
    zerr_ = 0;
    rho_ = 0;
    chi2_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    ndf_ = 0;
    ntracks_ = 0;
    ntracksw05_ = 0;
    isfake_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vertex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double X = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_Y;
        break;
      }
      
      // optional double Y = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_Z;
        break;
      }
      
      // optional double Z = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_XErr;
        break;
      }
      
      // optional double XErr = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_XErr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xerr_)));
          set_has_xerr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_YErr;
        break;
      }
      
      // optional double YErr = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_YErr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yerr_)));
          set_has_yerr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_ZErr;
        break;
      }
      
      // optional double ZErr = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_ZErr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &zerr_)));
          set_has_zerr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_Rho;
        break;
      }
      
      // optional double Rho = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Rho:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rho_)));
          set_has_rho();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_Chi2;
        break;
      }
      
      // optional double Chi2 = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Chi2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &chi2_)));
          set_has_chi2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_NDF;
        break;
      }
      
      // optional double NDF = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_NDF:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ndf_)));
          set_has_ndf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_NTracks;
        break;
      }
      
      // optional int32 NTracks = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NTracks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ntracks_)));
          set_has_ntracks();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_NTracksW05;
        break;
      }
      
      // optional int32 NTracksW05 = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NTracksW05:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ntracksw05_)));
          set_has_ntracksw05();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_IsFake;
        break;
      }
      
      // optional int32 IsFake = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsFake:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isfake_)));
          set_has_isfake();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Vertex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double X = 1 [default = 0];
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }
  
  // optional double Y = 2 [default = 0];
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }
  
  // optional double Z = 3 [default = 0];
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }
  
  // optional double XErr = 4 [default = 0];
  if (has_xerr()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->xerr(), output);
  }
  
  // optional double YErr = 5 [default = 0];
  if (has_yerr()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->yerr(), output);
  }
  
  // optional double ZErr = 6 [default = 0];
  if (has_zerr()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->zerr(), output);
  }
  
  // optional double Rho = 7 [default = 0];
  if (has_rho()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->rho(), output);
  }
  
  // optional double Chi2 = 8 [default = 0];
  if (has_chi2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->chi2(), output);
  }
  
  // optional double NDF = 9 [default = 0];
  if (has_ndf()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->ndf(), output);
  }
  
  // optional int32 NTracks = 10 [default = 0];
  if (has_ntracks()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->ntracks(), output);
  }
  
  // optional int32 NTracksW05 = 11 [default = 0];
  if (has_ntracksw05()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->ntracksw05(), output);
  }
  
  // optional int32 IsFake = 12 [default = 0];
  if (has_isfake()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->isfake(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Vertex::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double X = 1 [default = 0];
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }
  
  // optional double Y = 2 [default = 0];
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }
  
  // optional double Z = 3 [default = 0];
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }
  
  // optional double XErr = 4 [default = 0];
  if (has_xerr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->xerr(), target);
  }
  
  // optional double YErr = 5 [default = 0];
  if (has_yerr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->yerr(), target);
  }
  
  // optional double ZErr = 6 [default = 0];
  if (has_zerr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->zerr(), target);
  }
  
  // optional double Rho = 7 [default = 0];
  if (has_rho()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->rho(), target);
  }
  
  // optional double Chi2 = 8 [default = 0];
  if (has_chi2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->chi2(), target);
  }
  
  // optional double NDF = 9 [default = 0];
  if (has_ndf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->ndf(), target);
  }
  
  // optional int32 NTracks = 10 [default = 0];
  if (has_ntracks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->ntracks(), target);
  }
  
  // optional int32 NTracksW05 = 11 [default = 0];
  if (has_ntracksw05()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->ntracksw05(), target);
  }
  
  // optional int32 IsFake = 12 [default = 0];
  if (has_isfake()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->isfake(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Vertex::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double X = 1 [default = 0];
    if (has_x()) {
      total_size += 1 + 8;
    }
    
    // optional double Y = 2 [default = 0];
    if (has_y()) {
      total_size += 1 + 8;
    }
    
    // optional double Z = 3 [default = 0];
    if (has_z()) {
      total_size += 1 + 8;
    }
    
    // optional double XErr = 4 [default = 0];
    if (has_xerr()) {
      total_size += 1 + 8;
    }
    
    // optional double YErr = 5 [default = 0];
    if (has_yerr()) {
      total_size += 1 + 8;
    }
    
    // optional double ZErr = 6 [default = 0];
    if (has_zerr()) {
      total_size += 1 + 8;
    }
    
    // optional double Rho = 7 [default = 0];
    if (has_rho()) {
      total_size += 1 + 8;
    }
    
    // optional double Chi2 = 8 [default = 0];
    if (has_chi2()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double NDF = 9 [default = 0];
    if (has_ndf()) {
      total_size += 1 + 8;
    }
    
    // optional int32 NTracks = 10 [default = 0];
    if (has_ntracks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ntracks());
    }
    
    // optional int32 NTracksW05 = 11 [default = 0];
    if (has_ntracksw05()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ntracksw05());
    }
    
    // optional int32 IsFake = 12 [default = 0];
    if (has_isfake()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isfake());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vertex::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vertex* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vertex*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vertex::MergeFrom(const Vertex& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_xerr()) {
      set_xerr(from.xerr());
    }
    if (from.has_yerr()) {
      set_yerr(from.yerr());
    }
    if (from.has_zerr()) {
      set_zerr(from.zerr());
    }
    if (from.has_rho()) {
      set_rho(from.rho());
    }
    if (from.has_chi2()) {
      set_chi2(from.chi2());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ndf()) {
      set_ndf(from.ndf());
    }
    if (from.has_ntracks()) {
      set_ntracks(from.ntracks());
    }
    if (from.has_ntracksw05()) {
      set_ntracksw05(from.ntracksw05());
    }
    if (from.has_isfake()) {
      set_isfake(from.isfake());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vertex::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vertex::CopyFrom(const Vertex& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vertex::IsInitialized() const {
  
  return true;
}

void Vertex::Swap(Vertex* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(xerr_, other->xerr_);
    std::swap(yerr_, other->yerr_);
    std::swap(zerr_, other->zerr_);
    std::swap(rho_, other->rho_);
    std::swap(chi2_, other->chi2_);
    std::swap(ndf_, other->ndf_);
    std::swap(ntracks_, other->ntracks_);
    std::swap(ntracksw05_, other->ntracksw05_);
    std::swap(isfake_, other->isfake_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vertex::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vertex_descriptor_;
  metadata.reflection = Vertex_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BeamSpot::kWidthXFieldNumber;
const int BeamSpot::kWidthXErrorFieldNumber;
const int BeamSpot::kWidthYFieldNumber;
const int BeamSpot::kWidthYErrorFieldNumber;
const int BeamSpot::kX0FieldNumber;
const int BeamSpot::kX0ErrorFieldNumber;
const int BeamSpot::kY0FieldNumber;
const int BeamSpot::kY0ErrorFieldNumber;
const int BeamSpot::kZ0FieldNumber;
const int BeamSpot::kZ0ErrorFieldNumber;
const int BeamSpot::kDxdzFieldNumber;
const int BeamSpot::kDxdzErrorFieldNumber;
const int BeamSpot::kDydzFieldNumber;
const int BeamSpot::kDydzErrorFieldNumber;
const int BeamSpot::kSigmaZFieldNumber;
const int BeamSpot::kSigmaZErrorFieldNumber;
#endif  // !_MSC_VER

BeamSpot::BeamSpot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BeamSpot::InitAsDefaultInstance() {
}

BeamSpot::BeamSpot(const BeamSpot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BeamSpot::SharedCtor() {
  _cached_size_ = 0;
  widthx_ = 0;
  widthxerror_ = 0;
  widthy_ = 0;
  widthyerror_ = 0;
  x0_ = 0;
  x0error_ = 0;
  y0_ = 0;
  y0error_ = 0;
  z0_ = 0;
  z0error_ = 0;
  dxdz_ = 0;
  dxdzerror_ = 0;
  dydz_ = 0;
  dydzerror_ = 0;
  sigmaz_ = 0;
  sigmazerror_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BeamSpot::~BeamSpot() {
  SharedDtor();
}

void BeamSpot::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BeamSpot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BeamSpot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BeamSpot_descriptor_;
}

const BeamSpot& BeamSpot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EventCollection_2eproto();  return *default_instance_;
}

BeamSpot* BeamSpot::default_instance_ = NULL;

BeamSpot* BeamSpot::New() const {
  return new BeamSpot;
}

void BeamSpot::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    widthx_ = 0;
    widthxerror_ = 0;
    widthy_ = 0;
    widthyerror_ = 0;
    x0_ = 0;
    x0error_ = 0;
    y0_ = 0;
    y0error_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    z0_ = 0;
    z0error_ = 0;
    dxdz_ = 0;
    dxdzerror_ = 0;
    dydz_ = 0;
    dydzerror_ = 0;
    sigmaz_ = 0;
    sigmazerror_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BeamSpot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double WidthX = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &widthx_)));
          set_has_widthx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_WidthXError;
        break;
      }
      
      // optional double WidthXError = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_WidthXError:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &widthxerror_)));
          set_has_widthxerror();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_WidthY;
        break;
      }
      
      // optional double WidthY = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_WidthY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &widthy_)));
          set_has_widthy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_WidthYError;
        break;
      }
      
      // optional double WidthYError = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_WidthYError:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &widthyerror_)));
          set_has_widthyerror();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_X0;
        break;
      }
      
      // optional double X0 = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_X0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x0_)));
          set_has_x0();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_X0Error;
        break;
      }
      
      // optional double X0Error = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_X0Error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x0error_)));
          set_has_x0error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_Y0;
        break;
      }
      
      // optional double Y0 = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Y0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y0_)));
          set_has_y0();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_Y0Error;
        break;
      }
      
      // optional double Y0Error = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Y0Error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y0error_)));
          set_has_y0error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(73)) goto parse_Z0;
        break;
      }
      
      // optional double Z0 = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Z0:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z0_)));
          set_has_z0();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(81)) goto parse_Z0Error;
        break;
      }
      
      // optional double Z0Error = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Z0Error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z0error_)));
          set_has_z0error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(89)) goto parse_dxdz;
        break;
      }
      
      // optional double dxdz = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dxdz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dxdz_)));
          set_has_dxdz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_dxdzError;
        break;
      }
      
      // optional double dxdzError = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dxdzError:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dxdzerror_)));
          set_has_dxdzerror();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(105)) goto parse_dydz;
        break;
      }
      
      // optional double dydz = 13 [default = 0];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dydz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dydz_)));
          set_has_dydz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_dydzError;
        break;
      }
      
      // optional double dydzError = 14 [default = 0];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dydzError:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dydzerror_)));
          set_has_dydzerror();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(121)) goto parse_sigmaZ;
        break;
      }
      
      // optional double sigmaZ = 15 [default = 0];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_sigmaZ:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sigmaz_)));
          set_has_sigmaz();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(129)) goto parse_sigmaZError;
        break;
      }
      
      // optional double sigmaZError = 16 [default = 0];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_sigmaZError:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sigmazerror_)));
          set_has_sigmazerror();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BeamSpot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double WidthX = 1 [default = 0];
  if (has_widthx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->widthx(), output);
  }
  
  // optional double WidthXError = 2 [default = 0];
  if (has_widthxerror()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->widthxerror(), output);
  }
  
  // optional double WidthY = 3 [default = 0];
  if (has_widthy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->widthy(), output);
  }
  
  // optional double WidthYError = 4 [default = 0];
  if (has_widthyerror()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->widthyerror(), output);
  }
  
  // optional double X0 = 5 [default = 0];
  if (has_x0()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->x0(), output);
  }
  
  // optional double X0Error = 6 [default = 0];
  if (has_x0error()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->x0error(), output);
  }
  
  // optional double Y0 = 7 [default = 0];
  if (has_y0()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->y0(), output);
  }
  
  // optional double Y0Error = 8 [default = 0];
  if (has_y0error()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->y0error(), output);
  }
  
  // optional double Z0 = 9 [default = 0];
  if (has_z0()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->z0(), output);
  }
  
  // optional double Z0Error = 10 [default = 0];
  if (has_z0error()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->z0error(), output);
  }
  
  // optional double dxdz = 11 [default = 0];
  if (has_dxdz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->dxdz(), output);
  }
  
  // optional double dxdzError = 12 [default = 0];
  if (has_dxdzerror()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->dxdzerror(), output);
  }
  
  // optional double dydz = 13 [default = 0];
  if (has_dydz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->dydz(), output);
  }
  
  // optional double dydzError = 14 [default = 0];
  if (has_dydzerror()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->dydzerror(), output);
  }
  
  // optional double sigmaZ = 15 [default = 0];
  if (has_sigmaz()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->sigmaz(), output);
  }
  
  // optional double sigmaZError = 16 [default = 0];
  if (has_sigmazerror()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->sigmazerror(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BeamSpot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double WidthX = 1 [default = 0];
  if (has_widthx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->widthx(), target);
  }
  
  // optional double WidthXError = 2 [default = 0];
  if (has_widthxerror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->widthxerror(), target);
  }
  
  // optional double WidthY = 3 [default = 0];
  if (has_widthy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->widthy(), target);
  }
  
  // optional double WidthYError = 4 [default = 0];
  if (has_widthyerror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->widthyerror(), target);
  }
  
  // optional double X0 = 5 [default = 0];
  if (has_x0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->x0(), target);
  }
  
  // optional double X0Error = 6 [default = 0];
  if (has_x0error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->x0error(), target);
  }
  
  // optional double Y0 = 7 [default = 0];
  if (has_y0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->y0(), target);
  }
  
  // optional double Y0Error = 8 [default = 0];
  if (has_y0error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->y0error(), target);
  }
  
  // optional double Z0 = 9 [default = 0];
  if (has_z0()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->z0(), target);
  }
  
  // optional double Z0Error = 10 [default = 0];
  if (has_z0error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->z0error(), target);
  }
  
  // optional double dxdz = 11 [default = 0];
  if (has_dxdz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->dxdz(), target);
  }
  
  // optional double dxdzError = 12 [default = 0];
  if (has_dxdzerror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->dxdzerror(), target);
  }
  
  // optional double dydz = 13 [default = 0];
  if (has_dydz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->dydz(), target);
  }
  
  // optional double dydzError = 14 [default = 0];
  if (has_dydzerror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->dydzerror(), target);
  }
  
  // optional double sigmaZ = 15 [default = 0];
  if (has_sigmaz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->sigmaz(), target);
  }
  
  // optional double sigmaZError = 16 [default = 0];
  if (has_sigmazerror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->sigmazerror(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BeamSpot::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double WidthX = 1 [default = 0];
    if (has_widthx()) {
      total_size += 1 + 8;
    }
    
    // optional double WidthXError = 2 [default = 0];
    if (has_widthxerror()) {
      total_size += 1 + 8;
    }
    
    // optional double WidthY = 3 [default = 0];
    if (has_widthy()) {
      total_size += 1 + 8;
    }
    
    // optional double WidthYError = 4 [default = 0];
    if (has_widthyerror()) {
      total_size += 1 + 8;
    }
    
    // optional double X0 = 5 [default = 0];
    if (has_x0()) {
      total_size += 1 + 8;
    }
    
    // optional double X0Error = 6 [default = 0];
    if (has_x0error()) {
      total_size += 1 + 8;
    }
    
    // optional double Y0 = 7 [default = 0];
    if (has_y0()) {
      total_size += 1 + 8;
    }
    
    // optional double Y0Error = 8 [default = 0];
    if (has_y0error()) {
      total_size += 1 + 8;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double Z0 = 9 [default = 0];
    if (has_z0()) {
      total_size += 1 + 8;
    }
    
    // optional double Z0Error = 10 [default = 0];
    if (has_z0error()) {
      total_size += 1 + 8;
    }
    
    // optional double dxdz = 11 [default = 0];
    if (has_dxdz()) {
      total_size += 1 + 8;
    }
    
    // optional double dxdzError = 12 [default = 0];
    if (has_dxdzerror()) {
      total_size += 1 + 8;
    }
    
    // optional double dydz = 13 [default = 0];
    if (has_dydz()) {
      total_size += 1 + 8;
    }
    
    // optional double dydzError = 14 [default = 0];
    if (has_dydzerror()) {
      total_size += 1 + 8;
    }
    
    // optional double sigmaZ = 15 [default = 0];
    if (has_sigmaz()) {
      total_size += 1 + 8;
    }
    
    // optional double sigmaZError = 16 [default = 0];
    if (has_sigmazerror()) {
      total_size += 2 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BeamSpot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BeamSpot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BeamSpot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BeamSpot::MergeFrom(const BeamSpot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_widthx()) {
      set_widthx(from.widthx());
    }
    if (from.has_widthxerror()) {
      set_widthxerror(from.widthxerror());
    }
    if (from.has_widthy()) {
      set_widthy(from.widthy());
    }
    if (from.has_widthyerror()) {
      set_widthyerror(from.widthyerror());
    }
    if (from.has_x0()) {
      set_x0(from.x0());
    }
    if (from.has_x0error()) {
      set_x0error(from.x0error());
    }
    if (from.has_y0()) {
      set_y0(from.y0());
    }
    if (from.has_y0error()) {
      set_y0error(from.y0error());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_z0()) {
      set_z0(from.z0());
    }
    if (from.has_z0error()) {
      set_z0error(from.z0error());
    }
    if (from.has_dxdz()) {
      set_dxdz(from.dxdz());
    }
    if (from.has_dxdzerror()) {
      set_dxdzerror(from.dxdzerror());
    }
    if (from.has_dydz()) {
      set_dydz(from.dydz());
    }
    if (from.has_dydzerror()) {
      set_dydzerror(from.dydzerror());
    }
    if (from.has_sigmaz()) {
      set_sigmaz(from.sigmaz());
    }
    if (from.has_sigmazerror()) {
      set_sigmazerror(from.sigmazerror());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BeamSpot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeamSpot::CopyFrom(const BeamSpot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeamSpot::IsInitialized() const {
  
  return true;
}

void BeamSpot::Swap(BeamSpot* other) {
  if (other != this) {
    std::swap(widthx_, other->widthx_);
    std::swap(widthxerror_, other->widthxerror_);
    std::swap(widthy_, other->widthy_);
    std::swap(widthyerror_, other->widthyerror_);
    std::swap(x0_, other->x0_);
    std::swap(x0error_, other->x0error_);
    std::swap(y0_, other->y0_);
    std::swap(y0error_, other->y0error_);
    std::swap(z0_, other->z0_);
    std::swap(z0error_, other->z0error_);
    std::swap(dxdz_, other->dxdz_);
    std::swap(dxdzerror_, other->dxdzerror_);
    std::swap(dydz_, other->dydz_);
    std::swap(dydzerror_, other->dydzerror_);
    std::swap(sigmaz_, other->sigmaz_);
    std::swap(sigmazerror_, other->sigmazerror_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BeamSpot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BeamSpot_descriptor_;
  metadata.reflection = BeamSpot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Trigger::kL1PhysBitsFieldNumber;
const int Trigger::kL1TechBitsFieldNumber;
const int Trigger::kHLTBitsFieldNumber;
const int Trigger::kHLTResultsFieldNumber;
const int Trigger::kHLTResultsOtherFieldNumber;
const int Trigger::kHLTPrescalesFieldNumber;
const int Trigger::kHLTPrescalesOtherFieldNumber;
const int Trigger::kHLTNamesFieldNumber;
#endif  // !_MSC_VER

Trigger::Trigger()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Trigger::InitAsDefaultInstance() {
}

Trigger::Trigger(const Trigger& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Trigger::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Trigger::~Trigger() {
  SharedDtor();
}

void Trigger::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Trigger::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Trigger::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Trigger_descriptor_;
}

const Trigger& Trigger::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EventCollection_2eproto();  return *default_instance_;
}

Trigger* Trigger::default_instance_ = NULL;

Trigger* Trigger::New() const {
  return new Trigger;
}

void Trigger::Clear() {
  l1physbits_.Clear();
  l1techbits_.Clear();
  hltbits_.Clear();
  hltresults_.Clear();
  hltresultsother_.Clear();
  hltprescales_.Clear();
  hltprescalesother_.Clear();
  hltnames_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Trigger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 L1PhysBits = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_L1PhysBits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_l1physbits())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_l1physbits())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_L1PhysBits;
        if (input->ExpectTag(16)) goto parse_L1TechBits;
        break;
      }
      
      // repeated int32 L1TechBits = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_L1TechBits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_l1techbits())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_l1techbits())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_L1TechBits;
        if (input->ExpectTag(24)) goto parse_HLTBits;
        break;
      }
      
      // repeated int32 HLTBits = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HLTBits:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_hltbits())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_hltbits())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_HLTBits;
        if (input->ExpectTag(32)) goto parse_HLTResults;
        break;
      }
      
      // repeated int32 HLTResults = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HLTResults:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_hltresults())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_hltresults())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_HLTResults;
        if (input->ExpectTag(40)) goto parse_HLTResultsOther;
        break;
      }
      
      // repeated int32 HLTResultsOther = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HLTResultsOther:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_hltresultsother())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_hltresultsother())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_HLTResultsOther;
        if (input->ExpectTag(48)) goto parse_HLTPrescales;
        break;
      }
      
      // repeated int32 HLTPrescales = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HLTPrescales:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_hltprescales())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_hltprescales())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_HLTPrescales;
        if (input->ExpectTag(56)) goto parse_HLTPrescalesOther;
        break;
      }
      
      // repeated int32 HLTPrescalesOther = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HLTPrescalesOther:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_hltprescalesother())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_hltprescalesother())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_HLTPrescalesOther;
        if (input->ExpectTag(66)) goto parse_HLTNames;
        break;
      }
      
      // repeated string HLTNames = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HLTNames:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_hltnames()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hltnames(0).data(), this->hltnames(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_HLTNames;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Trigger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 L1PhysBits = 1;
  for (int i = 0; i < this->l1physbits_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->l1physbits(i), output);
  }
  
  // repeated int32 L1TechBits = 2;
  for (int i = 0; i < this->l1techbits_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->l1techbits(i), output);
  }
  
  // repeated int32 HLTBits = 3;
  for (int i = 0; i < this->hltbits_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->hltbits(i), output);
  }
  
  // repeated int32 HLTResults = 4;
  for (int i = 0; i < this->hltresults_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->hltresults(i), output);
  }
  
  // repeated int32 HLTResultsOther = 5;
  for (int i = 0; i < this->hltresultsother_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->hltresultsother(i), output);
  }
  
  // repeated int32 HLTPrescales = 6;
  for (int i = 0; i < this->hltprescales_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->hltprescales(i), output);
  }
  
  // repeated int32 HLTPrescalesOther = 7;
  for (int i = 0; i < this->hltprescalesother_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->hltprescalesother(i), output);
  }
  
  // repeated string HLTNames = 8;
  for (int i = 0; i < this->hltnames_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->hltnames(i).data(), this->hltnames(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->hltnames(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Trigger::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 L1PhysBits = 1;
  for (int i = 0; i < this->l1physbits_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->l1physbits(i), target);
  }
  
  // repeated int32 L1TechBits = 2;
  for (int i = 0; i < this->l1techbits_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->l1techbits(i), target);
  }
  
  // repeated int32 HLTBits = 3;
  for (int i = 0; i < this->hltbits_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->hltbits(i), target);
  }
  
  // repeated int32 HLTResults = 4;
  for (int i = 0; i < this->hltresults_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->hltresults(i), target);
  }
  
  // repeated int32 HLTResultsOther = 5;
  for (int i = 0; i < this->hltresultsother_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->hltresultsother(i), target);
  }
  
  // repeated int32 HLTPrescales = 6;
  for (int i = 0; i < this->hltprescales_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->hltprescales(i), target);
  }
  
  // repeated int32 HLTPrescalesOther = 7;
  for (int i = 0; i < this->hltprescalesother_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->hltprescalesother(i), target);
  }
  
  // repeated string HLTNames = 8;
  for (int i = 0; i < this->hltnames_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hltnames(i).data(), this->hltnames(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->hltnames(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Trigger::ByteSize() const {
  int total_size = 0;
  
  // repeated int32 L1PhysBits = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->l1physbits_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->l1physbits(i));
    }
    total_size += 1 * this->l1physbits_size() + data_size;
  }
  
  // repeated int32 L1TechBits = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->l1techbits_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->l1techbits(i));
    }
    total_size += 1 * this->l1techbits_size() + data_size;
  }
  
  // repeated int32 HLTBits = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->hltbits_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->hltbits(i));
    }
    total_size += 1 * this->hltbits_size() + data_size;
  }
  
  // repeated int32 HLTResults = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->hltresults_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->hltresults(i));
    }
    total_size += 1 * this->hltresults_size() + data_size;
  }
  
  // repeated int32 HLTResultsOther = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->hltresultsother_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->hltresultsother(i));
    }
    total_size += 1 * this->hltresultsother_size() + data_size;
  }
  
  // repeated int32 HLTPrescales = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->hltprescales_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->hltprescales(i));
    }
    total_size += 1 * this->hltprescales_size() + data_size;
  }
  
  // repeated int32 HLTPrescalesOther = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->hltprescalesother_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->hltprescalesother(i));
    }
    total_size += 1 * this->hltprescalesother_size() + data_size;
  }
  
  // repeated string HLTNames = 8;
  total_size += 1 * this->hltnames_size();
  for (int i = 0; i < this->hltnames_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->hltnames(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Trigger::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Trigger* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Trigger*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Trigger::MergeFrom(const Trigger& from) {
  GOOGLE_CHECK_NE(&from, this);
  l1physbits_.MergeFrom(from.l1physbits_);
  l1techbits_.MergeFrom(from.l1techbits_);
  hltbits_.MergeFrom(from.hltbits_);
  hltresults_.MergeFrom(from.hltresults_);
  hltresultsother_.MergeFrom(from.hltresultsother_);
  hltprescales_.MergeFrom(from.hltprescales_);
  hltprescalesother_.MergeFrom(from.hltprescalesother_);
  hltnames_.MergeFrom(from.hltnames_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Trigger::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trigger::CopyFrom(const Trigger& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trigger::IsInitialized() const {
  
  return true;
}

void Trigger::Swap(Trigger* other) {
  if (other != this) {
    l1physbits_.Swap(&other->l1physbits_);
    l1techbits_.Swap(&other->l1techbits_);
    hltbits_.Swap(&other->hltbits_);
    hltresults_.Swap(&other->hltresults_);
    hltresultsother_.Swap(&other->hltresultsother_);
    hltprescales_.Swap(&other->hltprescales_);
    hltprescalesother_.Swap(&other->hltprescalesother_);
    hltnames_.Swap(&other->hltnames_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Trigger::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Trigger_descriptor_;
  metadata.reflection = Trigger_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Event::kGoodPatJetsFieldNumber;
const int Event::kGoodPatJetsPFlowFieldNumber;
const int Event::kGoodPatJetsCA8PFFieldNumber;
const int Event::kSelectedPatElectronsFieldNumber;
const int Event::kSelectedPatElectronsLoosePFlowFieldNumber;
const int Event::kPatMETsFieldNumber;
const int Event::kPatMETsPFlowFieldNumber;
const int Event::kSelectedPatMuonsFieldNumber;
const int Event::kSelectedPatMuonsLoosePFlowFieldNumber;
const int Event::kGoodOfflinePrimaryVerticesFieldNumber;
const int Event::kBeamSpotFieldNumber;
const int Event::kMagneticFieldFieldNumber;
const int Event::kRunFieldNumber;
const int Event::kNumberFieldNumber;
const int Event::kBunchFieldNumber;
const int Event::kLumiSectionFieldNumber;
const int Event::kOrbitFieldNumber;
const int Event::kTimeFieldNumber;
const int Event::kIsDataFieldNumber;
const int Event::kRhoFieldNumber;
const int Event::kTriggerFieldNumber;
#endif  // !_MSC_VER

Event::Event()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Event::InitAsDefaultInstance() {
}

Event::Event(const Event& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Event::SharedCtor() {
  _cached_size_ = 0;
  magneticfield_ = 0;
  run_ = 0u;
  number_ = 0u;
  bunch_ = 0u;
  lumisection_ = 0u;
  orbit_ = 0u;
  time_ = 0;
  isdata_ = false;
  rho_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Event::~Event() {
  SharedDtor();
}

void Event::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Event::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Event_descriptor_;
}

const Event& Event::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EventCollection_2eproto();  return *default_instance_;
}

Event* Event::default_instance_ = NULL;

Event* Event::New() const {
  return new Event;
}

void Event::Clear() {
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    magneticfield_ = 0;
    run_ = 0u;
    number_ = 0u;
    bunch_ = 0u;
    lumisection_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    orbit_ = 0u;
    time_ = 0;
    isdata_ = false;
    rho_ = 0;
  }
  goodpatjets_.Clear();
  goodpatjetspflow_.Clear();
  goodpatjetsca8pf_.Clear();
  selectedpatelectrons_.Clear();
  selectedpatelectronsloosepflow_.Clear();
  patmets_.Clear();
  patmetspflow_.Clear();
  selectedpatmuons_.Clear();
  selectedpatmuonsloosepflow_.Clear();
  goodofflineprimaryvertices_.Clear();
  beamspot_.Clear();
  trigger_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .HEP.Jet goodPatJets = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_goodPatJets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goodpatjets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_goodPatJets;
        if (input->ExpectTag(18)) goto parse_goodPatJetsPFlow;
        break;
      }
      
      // repeated .HEP.Jet goodPatJetsPFlow = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_goodPatJetsPFlow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goodpatjetspflow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_goodPatJetsPFlow;
        if (input->ExpectTag(26)) goto parse_goodPatJetsCA8PF;
        break;
      }
      
      // repeated .HEP.Jet goodPatJetsCA8PF = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_goodPatJetsCA8PF:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goodpatjetsca8pf()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_goodPatJetsCA8PF;
        if (input->ExpectTag(34)) goto parse_selectedPatElectrons;
        break;
      }
      
      // repeated .HEP.Electron selectedPatElectrons = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selectedPatElectrons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_selectedpatelectrons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_selectedPatElectrons;
        if (input->ExpectTag(42)) goto parse_selectedPatElectronsLoosePFlow;
        break;
      }
      
      // repeated .HEP.Electron selectedPatElectronsLoosePFlow = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selectedPatElectronsLoosePFlow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_selectedpatelectronsloosepflow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_selectedPatElectronsLoosePFlow;
        if (input->ExpectTag(50)) goto parse_patMETs;
        break;
      }
      
      // repeated .HEP.MET patMETs = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_patMETs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_patmets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_patMETs;
        if (input->ExpectTag(58)) goto parse_patMETsPFlow;
        break;
      }
      
      // repeated .HEP.MET patMETsPFlow = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_patMETsPFlow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_patmetspflow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_patMETsPFlow;
        if (input->ExpectTag(66)) goto parse_selectedPatMuons;
        break;
      }
      
      // repeated .HEP.Muon selectedPatMuons = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selectedPatMuons:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_selectedpatmuons()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_selectedPatMuons;
        if (input->ExpectTag(74)) goto parse_selectedPatMuonsLoosePFlow;
        break;
      }
      
      // repeated .HEP.Muon selectedPatMuonsLoosePFlow = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_selectedPatMuonsLoosePFlow:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_selectedpatmuonsloosepflow()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_selectedPatMuonsLoosePFlow;
        if (input->ExpectTag(82)) goto parse_goodOfflinePrimaryVertices;
        break;
      }
      
      // repeated .HEP.Vertex goodOfflinePrimaryVertices = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_goodOfflinePrimaryVertices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_goodofflineprimaryvertices()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_goodOfflinePrimaryVertices;
        if (input->ExpectTag(90)) goto parse_beamSpot;
        break;
      }
      
      // repeated .HEP.BeamSpot beamSpot = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_beamSpot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_beamspot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_beamSpot;
        if (input->ExpectTag(97)) goto parse_MagneticField;
        break;
      }
      
      // optional double MagneticField = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_MagneticField:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &magneticfield_)));
          set_has_magneticfield();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_Run;
        break;
      }
      
      // required uint32 Run = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Run:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &run_)));
          set_has_run();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_Number;
        break;
      }
      
      // required uint32 Number = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_Bunch;
        break;
      }
      
      // optional uint32 Bunch = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Bunch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bunch_)));
          set_has_bunch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_LumiSection;
        break;
      }
      
      // required uint32 LumiSection = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LumiSection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lumisection_)));
          set_has_lumisection();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_Orbit;
        break;
      }
      
      // optional uint32 Orbit = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Orbit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &orbit_)));
          set_has_orbit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(145)) goto parse_Time;
        break;
      }
      
      // optional double Time = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_Time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_isData;
        break;
      }
      
      // optional bool isData = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isData:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdata_)));
          set_has_isdata();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(161)) goto parse_rho;
        break;
      }
      
      // optional double rho = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_rho:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rho_)));
          set_has_rho();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_trigger;
        break;
      }
      
      // repeated .HEP.Trigger trigger = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trigger:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trigger()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_trigger;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .HEP.Jet goodPatJets = 1;
  for (int i = 0; i < this->goodpatjets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->goodpatjets(i), output);
  }
  
  // repeated .HEP.Jet goodPatJetsPFlow = 2;
  for (int i = 0; i < this->goodpatjetspflow_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->goodpatjetspflow(i), output);
  }
  
  // repeated .HEP.Jet goodPatJetsCA8PF = 3;
  for (int i = 0; i < this->goodpatjetsca8pf_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->goodpatjetsca8pf(i), output);
  }
  
  // repeated .HEP.Electron selectedPatElectrons = 4;
  for (int i = 0; i < this->selectedpatelectrons_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->selectedpatelectrons(i), output);
  }
  
  // repeated .HEP.Electron selectedPatElectronsLoosePFlow = 5;
  for (int i = 0; i < this->selectedpatelectronsloosepflow_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->selectedpatelectronsloosepflow(i), output);
  }
  
  // repeated .HEP.MET patMETs = 6;
  for (int i = 0; i < this->patmets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->patmets(i), output);
  }
  
  // repeated .HEP.MET patMETsPFlow = 7;
  for (int i = 0; i < this->patmetspflow_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->patmetspflow(i), output);
  }
  
  // repeated .HEP.Muon selectedPatMuons = 8;
  for (int i = 0; i < this->selectedpatmuons_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->selectedpatmuons(i), output);
  }
  
  // repeated .HEP.Muon selectedPatMuonsLoosePFlow = 9;
  for (int i = 0; i < this->selectedpatmuonsloosepflow_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->selectedpatmuonsloosepflow(i), output);
  }
  
  // repeated .HEP.Vertex goodOfflinePrimaryVertices = 10;
  for (int i = 0; i < this->goodofflineprimaryvertices_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->goodofflineprimaryvertices(i), output);
  }
  
  // repeated .HEP.BeamSpot beamSpot = 11;
  for (int i = 0; i < this->beamspot_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->beamspot(i), output);
  }
  
  // optional double MagneticField = 12;
  if (has_magneticfield()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->magneticfield(), output);
  }
  
  // required uint32 Run = 13;
  if (has_run()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->run(), output);
  }
  
  // required uint32 Number = 14;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->number(), output);
  }
  
  // optional uint32 Bunch = 15;
  if (has_bunch()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->bunch(), output);
  }
  
  // required uint32 LumiSection = 16;
  if (has_lumisection()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->lumisection(), output);
  }
  
  // optional uint32 Orbit = 17;
  if (has_orbit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->orbit(), output);
  }
  
  // optional double Time = 18;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->time(), output);
  }
  
  // optional bool isData = 19;
  if (has_isdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->isdata(), output);
  }
  
  // optional double rho = 20;
  if (has_rho()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->rho(), output);
  }
  
  // repeated .HEP.Trigger trigger = 21;
  for (int i = 0; i < this->trigger_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->trigger(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Event::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .HEP.Jet goodPatJets = 1;
  for (int i = 0; i < this->goodpatjets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->goodpatjets(i), target);
  }
  
  // repeated .HEP.Jet goodPatJetsPFlow = 2;
  for (int i = 0; i < this->goodpatjetspflow_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->goodpatjetspflow(i), target);
  }
  
  // repeated .HEP.Jet goodPatJetsCA8PF = 3;
  for (int i = 0; i < this->goodpatjetsca8pf_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->goodpatjetsca8pf(i), target);
  }
  
  // repeated .HEP.Electron selectedPatElectrons = 4;
  for (int i = 0; i < this->selectedpatelectrons_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->selectedpatelectrons(i), target);
  }
  
  // repeated .HEP.Electron selectedPatElectronsLoosePFlow = 5;
  for (int i = 0; i < this->selectedpatelectronsloosepflow_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->selectedpatelectronsloosepflow(i), target);
  }
  
  // repeated .HEP.MET patMETs = 6;
  for (int i = 0; i < this->patmets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->patmets(i), target);
  }
  
  // repeated .HEP.MET patMETsPFlow = 7;
  for (int i = 0; i < this->patmetspflow_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->patmetspflow(i), target);
  }
  
  // repeated .HEP.Muon selectedPatMuons = 8;
  for (int i = 0; i < this->selectedpatmuons_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->selectedpatmuons(i), target);
  }
  
  // repeated .HEP.Muon selectedPatMuonsLoosePFlow = 9;
  for (int i = 0; i < this->selectedpatmuonsloosepflow_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->selectedpatmuonsloosepflow(i), target);
  }
  
  // repeated .HEP.Vertex goodOfflinePrimaryVertices = 10;
  for (int i = 0; i < this->goodofflineprimaryvertices_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->goodofflineprimaryvertices(i), target);
  }
  
  // repeated .HEP.BeamSpot beamSpot = 11;
  for (int i = 0; i < this->beamspot_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->beamspot(i), target);
  }
  
  // optional double MagneticField = 12;
  if (has_magneticfield()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->magneticfield(), target);
  }
  
  // required uint32 Run = 13;
  if (has_run()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->run(), target);
  }
  
  // required uint32 Number = 14;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->number(), target);
  }
  
  // optional uint32 Bunch = 15;
  if (has_bunch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->bunch(), target);
  }
  
  // required uint32 LumiSection = 16;
  if (has_lumisection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->lumisection(), target);
  }
  
  // optional uint32 Orbit = 17;
  if (has_orbit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->orbit(), target);
  }
  
  // optional double Time = 18;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->time(), target);
  }
  
  // optional bool isData = 19;
  if (has_isdata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->isdata(), target);
  }
  
  // optional double rho = 20;
  if (has_rho()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->rho(), target);
  }
  
  // repeated .HEP.Trigger trigger = 21;
  for (int i = 0; i < this->trigger_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->trigger(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Event::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    // optional double MagneticField = 12;
    if (has_magneticfield()) {
      total_size += 1 + 8;
    }
    
    // required uint32 Run = 13;
    if (has_run()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->run());
    }
    
    // required uint32 Number = 14;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->number());
    }
    
    // optional uint32 Bunch = 15;
    if (has_bunch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bunch());
    }
    
    // required uint32 LumiSection = 16;
    if (has_lumisection()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lumisection());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 Orbit = 17;
    if (has_orbit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->orbit());
    }
    
    // optional double Time = 18;
    if (has_time()) {
      total_size += 2 + 8;
    }
    
    // optional bool isData = 19;
    if (has_isdata()) {
      total_size += 2 + 1;
    }
    
    // optional double rho = 20;
    if (has_rho()) {
      total_size += 2 + 8;
    }
    
  }
  // repeated .HEP.Jet goodPatJets = 1;
  total_size += 1 * this->goodpatjets_size();
  for (int i = 0; i < this->goodpatjets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->goodpatjets(i));
  }
  
  // repeated .HEP.Jet goodPatJetsPFlow = 2;
  total_size += 1 * this->goodpatjetspflow_size();
  for (int i = 0; i < this->goodpatjetspflow_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->goodpatjetspflow(i));
  }
  
  // repeated .HEP.Jet goodPatJetsCA8PF = 3;
  total_size += 1 * this->goodpatjetsca8pf_size();
  for (int i = 0; i < this->goodpatjetsca8pf_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->goodpatjetsca8pf(i));
  }
  
  // repeated .HEP.Electron selectedPatElectrons = 4;
  total_size += 1 * this->selectedpatelectrons_size();
  for (int i = 0; i < this->selectedpatelectrons_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->selectedpatelectrons(i));
  }
  
  // repeated .HEP.Electron selectedPatElectronsLoosePFlow = 5;
  total_size += 1 * this->selectedpatelectronsloosepflow_size();
  for (int i = 0; i < this->selectedpatelectronsloosepflow_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->selectedpatelectronsloosepflow(i));
  }
  
  // repeated .HEP.MET patMETs = 6;
  total_size += 1 * this->patmets_size();
  for (int i = 0; i < this->patmets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->patmets(i));
  }
  
  // repeated .HEP.MET patMETsPFlow = 7;
  total_size += 1 * this->patmetspflow_size();
  for (int i = 0; i < this->patmetspflow_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->patmetspflow(i));
  }
  
  // repeated .HEP.Muon selectedPatMuons = 8;
  total_size += 1 * this->selectedpatmuons_size();
  for (int i = 0; i < this->selectedpatmuons_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->selectedpatmuons(i));
  }
  
  // repeated .HEP.Muon selectedPatMuonsLoosePFlow = 9;
  total_size += 1 * this->selectedpatmuonsloosepflow_size();
  for (int i = 0; i < this->selectedpatmuonsloosepflow_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->selectedpatmuonsloosepflow(i));
  }
  
  // repeated .HEP.Vertex goodOfflinePrimaryVertices = 10;
  total_size += 1 * this->goodofflineprimaryvertices_size();
  for (int i = 0; i < this->goodofflineprimaryvertices_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->goodofflineprimaryvertices(i));
  }
  
  // repeated .HEP.BeamSpot beamSpot = 11;
  total_size += 1 * this->beamspot_size();
  for (int i = 0; i < this->beamspot_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->beamspot(i));
  }
  
  // repeated .HEP.Trigger trigger = 21;
  total_size += 2 * this->trigger_size();
  for (int i = 0; i < this->trigger_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->trigger(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Event::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Event* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Event*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Event::MergeFrom(const Event& from) {
  GOOGLE_CHECK_NE(&from, this);
  goodpatjets_.MergeFrom(from.goodpatjets_);
  goodpatjetspflow_.MergeFrom(from.goodpatjetspflow_);
  goodpatjetsca8pf_.MergeFrom(from.goodpatjetsca8pf_);
  selectedpatelectrons_.MergeFrom(from.selectedpatelectrons_);
  selectedpatelectronsloosepflow_.MergeFrom(from.selectedpatelectronsloosepflow_);
  patmets_.MergeFrom(from.patmets_);
  patmetspflow_.MergeFrom(from.patmetspflow_);
  selectedpatmuons_.MergeFrom(from.selectedpatmuons_);
  selectedpatmuonsloosepflow_.MergeFrom(from.selectedpatmuonsloosepflow_);
  goodofflineprimaryvertices_.MergeFrom(from.goodofflineprimaryvertices_);
  beamspot_.MergeFrom(from.beamspot_);
  trigger_.MergeFrom(from.trigger_);
  if (from._has_bits_[11 / 32] & (0xffu << (11 % 32))) {
    if (from.has_magneticfield()) {
      set_magneticfield(from.magneticfield());
    }
    if (from.has_run()) {
      set_run(from.run());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
    if (from.has_bunch()) {
      set_bunch(from.bunch());
    }
    if (from.has_lumisection()) {
      set_lumisection(from.lumisection());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_orbit()) {
      set_orbit(from.orbit());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_isdata()) {
      set_isdata(from.isdata());
    }
    if (from.has_rho()) {
      set_rho(from.rho());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Event::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event::CopyFrom(const Event& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000b000) != 0x0000b000) return false;
  
  return true;
}

void Event::Swap(Event* other) {
  if (other != this) {
    goodpatjets_.Swap(&other->goodpatjets_);
    goodpatjetspflow_.Swap(&other->goodpatjetspflow_);
    goodpatjetsca8pf_.Swap(&other->goodpatjetsca8pf_);
    selectedpatelectrons_.Swap(&other->selectedpatelectrons_);
    selectedpatelectronsloosepflow_.Swap(&other->selectedpatelectronsloosepflow_);
    patmets_.Swap(&other->patmets_);
    patmetspflow_.Swap(&other->patmetspflow_);
    selectedpatmuons_.Swap(&other->selectedpatmuons_);
    selectedpatmuonsloosepflow_.Swap(&other->selectedpatmuonsloosepflow_);
    goodofflineprimaryvertices_.Swap(&other->goodofflineprimaryvertices_);
    beamspot_.Swap(&other->beamspot_);
    std::swap(magneticfield_, other->magneticfield_);
    std::swap(run_, other->run_);
    std::swap(number_, other->number_);
    std::swap(bunch_, other->bunch_);
    std::swap(lumisection_, other->lumisection_);
    std::swap(orbit_, other->orbit_);
    std::swap(time_, other->time_);
    std::swap(isdata_, other->isdata_);
    std::swap(rho_, other->rho_);
    trigger_.Swap(&other->trigger_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Event::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Event_descriptor_;
  metadata.reflection = Event_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GenEvent::kProcessIDFieldNumber;
const int GenEvent::kPtHatFieldNumber;
const int GenEvent::kPDFWeightsFieldNumber;
const int GenEvent::kPileUpInteractionsFieldNumber;
const int GenEvent::kPileUpOriginBXFieldNumber;
const int GenEvent::kGenMETExTrueFieldNumber;
const int GenEvent::kGenMETEyTrueFieldNumber;
const int GenEvent::kGenJetsFieldNumber;
const int GenEvent::kGenParticlesFieldNumber;
#endif  // !_MSC_VER

GenEvent::GenEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GenEvent::InitAsDefaultInstance() {
}

GenEvent::GenEvent(const GenEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GenEvent::SharedCtor() {
  _cached_size_ = 0;
  processid_ = 0u;
  pthat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GenEvent::~GenEvent() {
  SharedDtor();
}

void GenEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GenEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GenEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GenEvent_descriptor_;
}

const GenEvent& GenEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EventCollection_2eproto();  return *default_instance_;
}

GenEvent* GenEvent::default_instance_ = NULL;

GenEvent* GenEvent::New() const {
  return new GenEvent;
}

void GenEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    processid_ = 0u;
    pthat_ = 0;
  }
  pdfweights_.Clear();
  pileupinteractions_.Clear();
  pileuporiginbx_.Clear();
  genmetextrue_.Clear();
  genmeteytrue_.Clear();
  genjets_.Clear();
  genparticles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GenEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ProcessID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &processid_)));
          set_has_processid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_PtHat;
        break;
      }
      
      // optional double PtHat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PtHat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pthat_)));
          set_has_pthat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_PDFWeights;
        break;
      }
      
      // repeated double PDFWeights = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_PDFWeights:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25, input, this->mutable_pdfweights())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_pdfweights())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_PDFWeights;
        if (input->ExpectTag(32)) goto parse_PileUpInteractions;
        break;
      }
      
      // repeated int32 PileUpInteractions = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PileUpInteractions:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_pileupinteractions())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pileupinteractions())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_PileUpInteractions;
        if (input->ExpectTag(40)) goto parse_PileUpOriginBX;
        break;
      }
      
      // repeated int32 PileUpOriginBX = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PileUpOriginBX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_pileuporiginbx())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pileuporiginbx())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_PileUpOriginBX;
        if (input->ExpectTag(49)) goto parse_GenMETExTrue;
        break;
      }
      
      // repeated double GenMETExTrue = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_GenMETExTrue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 49, input, this->mutable_genmetextrue())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_genmetextrue())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(49)) goto parse_GenMETExTrue;
        if (input->ExpectTag(57)) goto parse_GenMETEyTrue;
        break;
      }
      
      // repeated double GenMETEyTrue = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_GenMETEyTrue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 57, input, this->mutable_genmeteytrue())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_genmeteytrue())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(57)) goto parse_GenMETEyTrue;
        if (input->ExpectTag(66)) goto parse_genJets;
        break;
      }
      
      // repeated .HEP.GenJet genJets = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_genJets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_genjets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_genJets;
        if (input->ExpectTag(74)) goto parse_genParticles;
        break;
      }
      
      // repeated .HEP.GenParticle genParticles = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_genParticles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_genparticles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_genParticles;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GenEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ProcessID = 1;
  if (has_processid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->processid(), output);
  }
  
  // optional double PtHat = 2;
  if (has_pthat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->pthat(), output);
  }
  
  // repeated double PDFWeights = 3;
  for (int i = 0; i < this->pdfweights_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->pdfweights(i), output);
  }
  
  // repeated int32 PileUpInteractions = 4;
  for (int i = 0; i < this->pileupinteractions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->pileupinteractions(i), output);
  }
  
  // repeated int32 PileUpOriginBX = 5;
  for (int i = 0; i < this->pileuporiginbx_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->pileuporiginbx(i), output);
  }
  
  // repeated double GenMETExTrue = 6;
  for (int i = 0; i < this->genmetextrue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      6, this->genmetextrue(i), output);
  }
  
  // repeated double GenMETEyTrue = 7;
  for (int i = 0; i < this->genmeteytrue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      7, this->genmeteytrue(i), output);
  }
  
  // repeated .HEP.GenJet genJets = 8;
  for (int i = 0; i < this->genjets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->genjets(i), output);
  }
  
  // repeated .HEP.GenParticle genParticles = 9;
  for (int i = 0; i < this->genparticles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->genparticles(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GenEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ProcessID = 1;
  if (has_processid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->processid(), target);
  }
  
  // optional double PtHat = 2;
  if (has_pthat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->pthat(), target);
  }
  
  // repeated double PDFWeights = 3;
  for (int i = 0; i < this->pdfweights_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(3, this->pdfweights(i), target);
  }
  
  // repeated int32 PileUpInteractions = 4;
  for (int i = 0; i < this->pileupinteractions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->pileupinteractions(i), target);
  }
  
  // repeated int32 PileUpOriginBX = 5;
  for (int i = 0; i < this->pileuporiginbx_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->pileuporiginbx(i), target);
  }
  
  // repeated double GenMETExTrue = 6;
  for (int i = 0; i < this->genmetextrue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(6, this->genmetextrue(i), target);
  }
  
  // repeated double GenMETEyTrue = 7;
  for (int i = 0; i < this->genmeteytrue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(7, this->genmeteytrue(i), target);
  }
  
  // repeated .HEP.GenJet genJets = 8;
  for (int i = 0; i < this->genjets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->genjets(i), target);
  }
  
  // repeated .HEP.GenParticle genParticles = 9;
  for (int i = 0; i < this->genparticles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->genparticles(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GenEvent::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ProcessID = 1;
    if (has_processid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->processid());
    }
    
    // optional double PtHat = 2;
    if (has_pthat()) {
      total_size += 1 + 8;
    }
    
  }
  // repeated double PDFWeights = 3;
  {
    int data_size = 0;
    data_size = 8 * this->pdfweights_size();
    total_size += 1 * this->pdfweights_size() + data_size;
  }
  
  // repeated int32 PileUpInteractions = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->pileupinteractions_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pileupinteractions(i));
    }
    total_size += 1 * this->pileupinteractions_size() + data_size;
  }
  
  // repeated int32 PileUpOriginBX = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->pileuporiginbx_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pileuporiginbx(i));
    }
    total_size += 1 * this->pileuporiginbx_size() + data_size;
  }
  
  // repeated double GenMETExTrue = 6;
  {
    int data_size = 0;
    data_size = 8 * this->genmetextrue_size();
    total_size += 1 * this->genmetextrue_size() + data_size;
  }
  
  // repeated double GenMETEyTrue = 7;
  {
    int data_size = 0;
    data_size = 8 * this->genmeteytrue_size();
    total_size += 1 * this->genmeteytrue_size() + data_size;
  }
  
  // repeated .HEP.GenJet genJets = 8;
  total_size += 1 * this->genjets_size();
  for (int i = 0; i < this->genjets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->genjets(i));
  }
  
  // repeated .HEP.GenParticle genParticles = 9;
  total_size += 1 * this->genparticles_size();
  for (int i = 0; i < this->genparticles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->genparticles(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GenEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GenEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GenEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GenEvent::MergeFrom(const GenEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  pdfweights_.MergeFrom(from.pdfweights_);
  pileupinteractions_.MergeFrom(from.pileupinteractions_);
  pileuporiginbx_.MergeFrom(from.pileuporiginbx_);
  genmetextrue_.MergeFrom(from.genmetextrue_);
  genmeteytrue_.MergeFrom(from.genmeteytrue_);
  genjets_.MergeFrom(from.genjets_);
  genparticles_.MergeFrom(from.genparticles_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_processid()) {
      set_processid(from.processid());
    }
    if (from.has_pthat()) {
      set_pthat(from.pthat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GenEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenEvent::CopyFrom(const GenEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenEvent::IsInitialized() const {
  
  return true;
}

void GenEvent::Swap(GenEvent* other) {
  if (other != this) {
    std::swap(processid_, other->processid_);
    std::swap(pthat_, other->pthat_);
    pdfweights_.Swap(&other->pdfweights_);
    pileupinteractions_.Swap(&other->pileupinteractions_);
    pileuporiginbx_.Swap(&other->pileuporiginbx_);
    genmetextrue_.Swap(&other->genmetextrue_);
    genmeteytrue_.Swap(&other->genmeteytrue_);
    genjets_.Swap(&other->genjets_);
    genparticles_.Swap(&other->genparticles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GenEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GenEvent_descriptor_;
  metadata.reflection = GenEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EventCollection::kEventFieldNumber;
const int EventCollection::kGenEventFieldNumber;
#endif  // !_MSC_VER

EventCollection::EventCollection()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EventCollection::InitAsDefaultInstance() {
}

EventCollection::EventCollection(const EventCollection& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EventCollection::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EventCollection::~EventCollection() {
  SharedDtor();
}

void EventCollection::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EventCollection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EventCollection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EventCollection_descriptor_;
}

const EventCollection& EventCollection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_EventCollection_2eproto();  return *default_instance_;
}

EventCollection* EventCollection::default_instance_ = NULL;

EventCollection* EventCollection::New() const {
  return new EventCollection;
}

void EventCollection::Clear() {
  event_.Clear();
  genevent_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EventCollection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .HEP.Event event = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_event()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_event;
        if (input->ExpectTag(18)) goto parse_genEvent;
        break;
      }
      
      // repeated .HEP.GenEvent genEvent = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_genEvent:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_genevent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_genEvent;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EventCollection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .HEP.Event event = 1;
  for (int i = 0; i < this->event_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->event(i), output);
  }
  
  // repeated .HEP.GenEvent genEvent = 2;
  for (int i = 0; i < this->genevent_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->genevent(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EventCollection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .HEP.Event event = 1;
  for (int i = 0; i < this->event_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->event(i), target);
  }
  
  // repeated .HEP.GenEvent genEvent = 2;
  for (int i = 0; i < this->genevent_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->genevent(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EventCollection::ByteSize() const {
  int total_size = 0;
  
  // repeated .HEP.Event event = 1;
  total_size += 1 * this->event_size();
  for (int i = 0; i < this->event_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->event(i));
  }
  
  // repeated .HEP.GenEvent genEvent = 2;
  total_size += 1 * this->genevent_size();
  for (int i = 0; i < this->genevent_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->genevent(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EventCollection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EventCollection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EventCollection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EventCollection::MergeFrom(const EventCollection& from) {
  GOOGLE_CHECK_NE(&from, this);
  event_.MergeFrom(from.event_);
  genevent_.MergeFrom(from.genevent_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EventCollection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EventCollection::CopyFrom(const EventCollection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventCollection::IsInitialized() const {
  
  for (int i = 0; i < event_size(); i++) {
    if (!this->event(i).IsInitialized()) return false;
  }
  return true;
}

void EventCollection::Swap(EventCollection* other) {
  if (other != this) {
    event_.Swap(&other->event_);
    genevent_.Swap(&other->genevent_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EventCollection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EventCollection_descriptor_;
  metadata.reflection = EventCollection_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace HEP

// @@protoc_insertion_point(global_scope)
